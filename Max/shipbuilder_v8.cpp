/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_4291 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_4253 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_4291;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_4229 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4253;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_4229()
                        {
                        }
                        
                        ~RNBOSubpatcher_4229()
                        {
                        }
                        
                        virtual RNBOSubpatcher_4253* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4253 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        number samplerate() {
                            return this->sr;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                        
                            this->cycle_tilde_01_perform(
                                this->cycle_tilde_01_frequency,
                                this->cycle_tilde_01_phase_offset,
                                out1,
                                this->dummyBuffer,
                                n
                            );
                        
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->cycle_tilde_01_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void processTempoEvent(MillisecondTime , Tempo ) {}
                        
                        void processTransportEvent(MillisecondTime , TransportState ) {}
                        
                        void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 0) {
                                this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus);
                                this->cycle_tilde_01_bufferUpdated();
                            }
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                            this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {}
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {
                            this->cycle_tilde_01_buffer->requestSize(16384, 1);
                            this->cycle_tilde_01_buffer->setSampleRate(this->sr);
                            this->cycle_tilde_01_buffer = this->cycle_tilde_01_buffer->allocateIfNeeded();
                        }
                        
                        void cycle_tilde_01_frequency_set(number v) {
                            this->cycle_tilde_01_frequency = v;
                        }
                        
                        void receive_01_output_number_set(number v) {
                            this->receive_01_output_number = v;
                            this->cycle_tilde_01_frequency_set(v);
                        }
                        
                        void cycle_tilde_01_perform(
                            number frequency,
                            number phase_offset,
                            SampleValue * out1,
                            SampleValue * out2,
                            Index n
                        ) {
                            RNBO_UNUSED(phase_offset);
                            auto __cycle_tilde_01_f2i = this->cycle_tilde_01_f2i;
                            auto __cycle_tilde_01_buffer = this->cycle_tilde_01_buffer;
                            auto __cycle_tilde_01_phasei = this->cycle_tilde_01_phasei;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                {
                                    uint32_t uint_phase;
                        
                                    {
                                        {
                                            uint_phase = __cycle_tilde_01_phasei;
                                        }
                                    }
                        
                                    uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                    number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                    number y0 = __cycle_tilde_01_buffer[(Index)idx];
                                    number y1 = __cycle_tilde_01_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                    number y = y0 + frac * (y1 - y0);
                        
                                    {
                                        uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_01_f2i));
                                        __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);
                                    }
                        
                                    out1[(Index)i] = y;
                                    out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                    continue;
                                }
                            }
                        
                            this->cycle_tilde_01_phasei = __cycle_tilde_01_phasei;
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        number cycle_tilde_01_ph_next(number freq, number reset) {
                            {
                                {
                                    if (reset >= 0.)
                                        this->cycle_tilde_01_ph_currentPhase = reset;
                                }
                            }
                        
                            number pincr = freq * this->cycle_tilde_01_ph_conv;
                        
                            if (this->cycle_tilde_01_ph_currentPhase < 0.)
                                this->cycle_tilde_01_ph_currentPhase = 1. + this->cycle_tilde_01_ph_currentPhase;
                        
                            if (this->cycle_tilde_01_ph_currentPhase > 1.)
                                this->cycle_tilde_01_ph_currentPhase = this->cycle_tilde_01_ph_currentPhase - 1.;
                        
                            number tmp = this->cycle_tilde_01_ph_currentPhase;
                            this->cycle_tilde_01_ph_currentPhase += pincr;
                            return tmp;
                        }
                        
                        void cycle_tilde_01_ph_reset() {
                            this->cycle_tilde_01_ph_currentPhase = 0;
                        }
                        
                        void cycle_tilde_01_ph_dspsetup() {
                            this->cycle_tilde_01_ph_conv = (number)1 / this->sr;
                        }
                        
                        void cycle_tilde_01_dspsetup(bool force) {
                            if ((bool)(this->cycle_tilde_01_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->cycle_tilde_01_phasei = 0;
                            this->cycle_tilde_01_f2i = (number)4294967296 / this->samplerate();
                            this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
                            this->cycle_tilde_01_setupDone = true;
                            this->cycle_tilde_01_ph_dspsetup();
                        }
                        
                        void cycle_tilde_01_bufferUpdated() {
                            this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            receive_01_output_number = 0;
                            cycle_tilde_01_frequency = 0;
                            cycle_tilde_01_phase_offset = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            cycle_tilde_01_wrap = 0;
                            cycle_tilde_01_ph_currentPhase = 0;
                            cycle_tilde_01_ph_conv = 0;
                            cycle_tilde_01_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number receive_01_output_number;
                            list receive_01_output_list;
                            number cycle_tilde_01_frequency;
                            number cycle_tilde_01_phase_offset;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef cycle_tilde_01_buffer;
                            long cycle_tilde_01_wrap;
                            uint32_t cycle_tilde_01_phasei;
                            SampleValue cycle_tilde_01_f2i;
                            number cycle_tilde_01_ph_currentPhase;
                            number cycle_tilde_01_ph_conv;
                            bool cycle_tilde_01_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_4230 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4253;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_4230()
                        {
                        }
                        
                        ~RNBOSubpatcher_4230()
                        {
                        }
                        
                        virtual RNBOSubpatcher_4253* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4253 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        number samplerate() {
                            return this->sr;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->phasor_01_perform(this->phasor_01_freq, out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->phasor_01_sigbuf = resizeSignal(this->phasor_01_sigbuf, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->phasor_01_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void processTempoEvent(MillisecondTime , Tempo ) {}
                        
                        void processTransportEvent(MillisecondTime , TransportState ) {}
                        
                        void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {}
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void phasor_01_freq_set(number v) {
                            this->phasor_01_freq = v;
                        }
                        
                        void receive_02_output_number_set(number v) {
                            this->receive_02_output_number = v;
                            this->phasor_01_freq_set(v);
                        }
                        
                        void phasor_01_perform(number freq, SampleValue * out, Index n) {
                            for (Index i = 0; i < n; i++) {
                                out[(Index)i] = this->phasor_01_ph_next(freq, -1);
                                this->phasor_01_sigbuf[(Index)i] = -1;
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        number phasor_01_ph_next(number freq, number reset) {
                            RNBO_UNUSED(reset);
                            number pincr = freq * this->phasor_01_ph_conv;
                        
                            if (this->phasor_01_ph_currentPhase < 0.)
                                this->phasor_01_ph_currentPhase = 1. + this->phasor_01_ph_currentPhase;
                        
                            if (this->phasor_01_ph_currentPhase > 1.)
                                this->phasor_01_ph_currentPhase = this->phasor_01_ph_currentPhase - 1.;
                        
                            number tmp = this->phasor_01_ph_currentPhase;
                            this->phasor_01_ph_currentPhase += pincr;
                            return tmp;
                        }
                        
                        void phasor_01_ph_reset() {
                            this->phasor_01_ph_currentPhase = 0;
                        }
                        
                        void phasor_01_ph_dspsetup() {
                            this->phasor_01_ph_conv = (number)1 / this->sr;
                        }
                        
                        void phasor_01_dspsetup(bool force) {
                            if ((bool)(this->phasor_01_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->phasor_01_conv = (number)1 / this->samplerate();
                            this->phasor_01_setupDone = true;
                            this->phasor_01_ph_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            receive_02_output_number = 0;
                            phasor_01_freq = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            phasor_01_sigbuf = nullptr;
                            phasor_01_lastLockedPhase = 0;
                            phasor_01_conv = 0;
                            phasor_01_ph_currentPhase = 0;
                            phasor_01_ph_conv = 0;
                            phasor_01_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number receive_02_output_number;
                            list receive_02_output_list;
                            number phasor_01_freq;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            signal phasor_01_sigbuf;
                            number phasor_01_lastLockedPhase;
                            number phasor_01_conv;
                            number phasor_01_ph_currentPhase;
                            number phasor_01_ph_conv;
                            bool phasor_01_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_4231 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4253;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_4231()
                        {
                        }
                        
                        ~RNBOSubpatcher_4231()
                        {
                        }
                        
                        virtual RNBOSubpatcher_4253* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4253 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        number wrap(number x, number low, number high) {
                            number lo;
                            number hi;
                        
                            if (low == high)
                                return low;
                        
                            if (low > high) {
                                hi = low;
                                lo = high;
                            } else {
                                lo = low;
                                hi = high;
                            }
                        
                            number range = hi - lo;
                        
                            if (x >= lo && x < hi)
                                return x;
                        
                            if (range <= 0.000000001)
                                return lo;
                        
                            long numWraps = (long)(trunc((x - lo) / range));
                            numWraps = numWraps - ((x < lo ? 1 : 0));
                            number result = x - range * numWraps;
                        
                            if (result >= hi)
                                return result - range;
                            else
                                return result;
                        }
                        
                        number samplerate() {
                            return this->sr;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->phasor_02_perform(this->phasor_02_freq, this->signals[0], n);
                            this->triangle_tilde_01_perform(this->signals[0], this->triangle_tilde_01_duty, out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 1; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->phasor_02_sigbuf = resizeSignal(this->phasor_02_sigbuf, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->phasor_02_dspsetup(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void processTempoEvent(MillisecondTime , Tempo ) {}
                        
                        void processTransportEvent(MillisecondTime , TransportState ) {}
                        
                        void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                        
                        void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                        
                        void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {}
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void phasor_02_freq_set(number v) {
                            this->phasor_02_freq = v;
                        }
                        
                        void receive_03_output_number_set(number v) {
                            this->receive_03_output_number = v;
                            this->phasor_02_freq_set(v);
                        }
                        
                        void phasor_02_perform(number freq, SampleValue * out, Index n) {
                            for (Index i = 0; i < n; i++) {
                                out[(Index)i] = this->phasor_02_ph_next(freq, -1);
                                this->phasor_02_sigbuf[(Index)i] = -1;
                            }
                        }
                        
                        void triangle_tilde_01_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                            RNBO_UNUSED(duty);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number p1 = 0.5;
                                auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                        
                                if (wrappedPhase < p1) {
                                    out1[(Index)i] = wrappedPhase / p1;
                                    continue;
                                } else {
                                    out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                    continue;
                                }
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        number phasor_02_ph_next(number freq, number reset) {
                            RNBO_UNUSED(reset);
                            number pincr = freq * this->phasor_02_ph_conv;
                        
                            if (this->phasor_02_ph_currentPhase < 0.)
                                this->phasor_02_ph_currentPhase = 1. + this->phasor_02_ph_currentPhase;
                        
                            if (this->phasor_02_ph_currentPhase > 1.)
                                this->phasor_02_ph_currentPhase = this->phasor_02_ph_currentPhase - 1.;
                        
                            number tmp = this->phasor_02_ph_currentPhase;
                            this->phasor_02_ph_currentPhase += pincr;
                            return tmp;
                        }
                        
                        void phasor_02_ph_reset() {
                            this->phasor_02_ph_currentPhase = 0;
                        }
                        
                        void phasor_02_ph_dspsetup() {
                            this->phasor_02_ph_conv = (number)1 / this->sr;
                        }
                        
                        void phasor_02_dspsetup(bool force) {
                            if ((bool)(this->phasor_02_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->phasor_02_conv = (number)1 / this->samplerate();
                            this->phasor_02_setupDone = true;
                            this->phasor_02_ph_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            triangle_tilde_01_phase = 0;
                            triangle_tilde_01_duty = 0.5;
                            phasor_02_freq = 0;
                            receive_03_output_number = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            phasor_02_sigbuf = nullptr;
                            phasor_02_lastLockedPhase = 0;
                            phasor_02_conv = 0;
                            phasor_02_ph_currentPhase = 0;
                            phasor_02_ph_conv = 0;
                            phasor_02_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number triangle_tilde_01_phase;
                            number triangle_tilde_01_duty;
                            number phasor_02_freq;
                            number receive_03_output_number;
                            list receive_03_output_list;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[1];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            signal phasor_02_sigbuf;
                            number phasor_02_lastLockedPhase;
                            number phasor_02_conv;
                            number phasor_02_ph_currentPhase;
                            number phasor_02_ph_conv;
                            bool phasor_02_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_4253()
            {
            }
            
            ~RNBOSubpatcher_4253()
            {
                delete this->p_01;
                delete this->p_02;
                delete this->p_03;
            }
            
            virtual RNBOSubpatcher_4291* getPatcher() const {
                return static_cast<RNBOSubpatcher_4291 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->p_01_perform(this->signals[0], n);
                this->p_02_perform(this->signals[1], n);
                this->p_03_perform(this->signals[2], n);
            
                this->selector_01_perform(
                    this->selector_01_onoff,
                    this->zeroBuffer,
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    out1,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_01 = new RNBOSubpatcher_4229();
                this->p_01->setEngineAndPatcher(this->getEngine(), this);
                this->p_01->initialize();
                this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
                this->p_02 = new RNBOSubpatcher_4230();
                this->p_02->setEngineAndPatcher(this->getEngine(), this);
                this->p_02->initialize();
                this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
                this->p_03 = new RNBOSubpatcher_4231();
                this->p_03->setEngineAndPatcher(this->getEngine(), this);
                this->p_03->initialize();
                this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->p_01->processTempoEvent(time, tempo);
                this->p_02->processTempoEvent(time, tempo);
                this->p_03->processTempoEvent(time, tempo);
            }
            
            void processTransportEvent(MillisecondTime time, TransportState state) {
                this->updateTime(time);
                this->p_01->processTransportEvent(time, state);
                this->p_02->processTransportEvent(time, state);
                this->p_03->processTransportEvent(time, state);
            }
            
            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                this->updateTime(time);
                this->p_01->processBeatTimeEvent(time, beattime);
                this->p_02->processBeatTimeEvent(time, beattime);
                this->p_03->processBeatTimeEvent(time, beattime);
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                this->updateTime(time);
                this->p_01->processTimeSignatureEvent(time, numerator, denominator);
                this->p_02->processTimeSignatureEvent(time, numerator, denominator);
                this->p_03->processTimeSignatureEvent(time, numerator, denominator);
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        this->p_01->setParameterValue(index, v, time);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        this->p_02->setParameterValue(index, v, time);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        this->p_03->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterValue(index);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterValue(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterName(index);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterName(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->getParameterId(index);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->getParameterId(index);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_01->getNumParameters())
                            this->p_01->getParameterInfo(index, info);
            
                        index -= this->p_01->getNumParameters();
            
                        if (index < this->p_02->getNumParameters())
                            this->p_02->getParameterInfo(index, info);
            
                        index -= this->p_02->getNumParameters();
            
                        if (index < this->p_03->getNumParameters())
                            this->p_03->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_01)
                    return 0;
            
                if (subpatcher == this->p_02)
                    return 0 + this->p_01->getNumParameters();
            
                if (subpatcher == this->p_03)
                    return 0 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_01->getNumParameters())
                        return this->p_01->constrainParameterValue(index, value);
            
                    index -= this->p_01->getNumParameters();
            
                    if (index < this->p_02->getNumParameters())
                        return this->p_02->constrainParameterValue(index, value);
            
                    index -= this->p_02->getNumParameters();
            
                    if (index < this->p_03->getNumParameters())
                        return this->p_03->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_01->processNumMessage(tag, objectId, time, payload);
                this->p_02->processNumMessage(tag, objectId, time, payload);
                this->p_03->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_01->processListMessage(tag, objectId, time, payload);
                this->p_02->processListMessage(tag, objectId, time, payload);
                this->p_03->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_01->processBangMessage(tag, objectId, time);
                this->p_02->processBangMessage(tag, objectId, time);
                this->p_03->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                auto subpatchResult_0 = this->p_01->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_02->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                auto subpatchResult_2 = this->p_03->resolveTag(tag);
            
                if (subpatchResult_2)
                    return subpatchResult_2;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_01->processDataViewUpdate(index, time);
                this->p_02->processDataViewUpdate(index, time);
                this->p_03->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->p_01->initializeObjects();
                this->p_02->initializeObjects();
                this->p_03->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_01->startup();
                this->p_02->startup();
                this->p_03->startup();
            }
            
            void allocateDataRefs() {
                this->p_01->allocateDataRefs();
                this->p_02->allocateDataRefs();
                this->p_03->allocateDataRefs();
            }
            
            void p_01_target_AM2freq_number_set(number v) {
                this->p_01->updateTime(this->_currentTime);
                this->p_01->receive_01_output_number_set(v);
            }
            
            void p_02_target_AM2freq_number_set(number v) {
                this->p_02->updateTime(this->_currentTime);
                this->p_02->receive_02_output_number_set(v);
            }
            
            void p_03_target_AM2freq_number_set(number v) {
                this->p_03->updateTime(this->_currentTime);
                this->p_03->receive_03_output_number_set(v);
            }
            
            void selector_01_onoff_set(number v) {
                this->selector_01_onoff = v;
            }
            
            void receive_04_output_number_set(number v) {
                this->receive_04_output_number = v;
                this->selector_01_onoff_set(v);
            }
            
            void p_01_perform(SampleValue * out1, Index n) {
                // subpatcher: sin
                SampleArray<1> outs = {out1};
            
                this->p_01->process(nullptr, 0, outs, 1, n);
            }
            
            void p_02_perform(SampleValue * out1, Index n) {
                // subpatcher: phasor
                SampleArray<1> outs = {out1};
            
                this->p_02->process(nullptr, 0, outs, 1, n);
            }
            
            void p_03_perform(SampleValue * out1, Index n) {
                // subpatcher: triangle
                SampleArray<1> outs = {out1};
            
                this->p_03->process(nullptr, 0, outs, 1, n);
            }
            
            void selector_01_perform(
                number onoff,
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (onoff >= 1 && onoff < 2)
                        out[(Index)i] = in1[(Index)i];
                    else if (onoff >= 2 && onoff < 3)
                        out[(Index)i] = in2[(Index)i];
                    else if (onoff >= 3 && onoff < 4)
                        out[(Index)i] = in3[(Index)i];
                    else if (onoff >= 4 && onoff < 5)
                        out[(Index)i] = in4[(Index)i];
                    else
                        out[(Index)i] = 0;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                receive_04_output_number = 0;
                selector_01_onoff = 1;
                p_01_target = 0;
                p_02_target = 0;
                p_03_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number receive_04_output_number;
                list receive_04_output_list;
                number selector_01_onoff;
                number p_01_target;
                number p_02_target;
                number p_03_target;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_4229* p_01;
                RNBOSubpatcher_4230* p_02;
                RNBOSubpatcher_4231* p_03;
            
    };
    
    class RNBOSubpatcher_4254 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_4291;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_4250 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4254;
                        friend class rnbomatic;
                        
                        public:
                        
                        class RNBOSubpatcher_4237 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4250;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4236 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4237;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4235 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4236;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    class RNBOSubpatcher_4232 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4235;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4232()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4232()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4235* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4235 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                
                                                                                                                    this->cycle_tilde_02_perform(
                                                                                                                        this->cycle_tilde_02_frequency,
                                                                                                                        this->cycle_tilde_02_phase_offset,
                                                                                                                        out1,
                                                                                                                        this->dummyBuffer,
                                                                                                                        n
                                                                                                                    );
                                                                                                                
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->cycle_tilde_02_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                                                    this->updateTime(time);
                                                                                                                
                                                                                                                    if (index == 0) {
                                                                                                                        this->cycle_tilde_02_buffer = new Float64Buffer(
                                                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                                                        );
                                                                                                                
                                                                                                                        this->cycle_tilde_02_bufferUpdated();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                
                                                                                                                    this->cycle_tilde_02_buffer = new Float64Buffer(
                                                                                                                        this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                                                    );
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {
                                                                                                                    this->cycle_tilde_02_buffer->requestSize(16384, 1);
                                                                                                                    this->cycle_tilde_02_buffer->setSampleRate(this->sr);
                                                                                                                    this->cycle_tilde_02_buffer = this->cycle_tilde_02_buffer->allocateIfNeeded();
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_02_perform(
                                                                                                                    number frequency,
                                                                                                                    number phase_offset,
                                                                                                                    SampleValue * out1,
                                                                                                                    SampleValue * out2,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(phase_offset);
                                                                                                                    auto __cycle_tilde_02_f2i = this->cycle_tilde_02_f2i;
                                                                                                                    auto __cycle_tilde_02_buffer = this->cycle_tilde_02_buffer;
                                                                                                                    auto __cycle_tilde_02_phasei = this->cycle_tilde_02_phasei;
                                                                                                                    Index i;
                                                                                                                
                                                                                                                    for (i = 0; i < n; i++) {
                                                                                                                        {
                                                                                                                            uint32_t uint_phase;
                                                                                                                
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    uint_phase = __cycle_tilde_02_phasei;
                                                                                                                                }
                                                                                                                            }
                                                                                                                
                                                                                                                            uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                                            number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                                            number y0 = __cycle_tilde_02_buffer[(Index)idx];
                                                                                                                            number y1 = __cycle_tilde_02_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                                            number y = y0 + frac * (y1 - y0);
                                                                                                                
                                                                                                                            {
                                                                                                                                uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_02_f2i));
                                                                                                                                __cycle_tilde_02_phasei = uint32_add(__cycle_tilde_02_phasei, pincr);
                                                                                                                            }
                                                                                                                
                                                                                                                            out1[(Index)i] = y;
                                                                                                                            out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }
                                                                                                                
                                                                                                                    this->cycle_tilde_02_phasei = __cycle_tilde_02_phasei;
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number cycle_tilde_02_ph_next(number freq, number reset) {
                                                                                                                    {
                                                                                                                        {
                                                                                                                            if (reset >= 0.)
                                                                                                                                this->cycle_tilde_02_ph_currentPhase = reset;
                                                                                                                        }
                                                                                                                    }
                                                                                                                
                                                                                                                    number pincr = freq * this->cycle_tilde_02_ph_conv;
                                                                                                                
                                                                                                                    if (this->cycle_tilde_02_ph_currentPhase < 0.)
                                                                                                                        this->cycle_tilde_02_ph_currentPhase = 1. + this->cycle_tilde_02_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->cycle_tilde_02_ph_currentPhase > 1.)
                                                                                                                        this->cycle_tilde_02_ph_currentPhase = this->cycle_tilde_02_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->cycle_tilde_02_ph_currentPhase;
                                                                                                                    this->cycle_tilde_02_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_02_ph_reset() {
                                                                                                                    this->cycle_tilde_02_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_02_ph_dspsetup() {
                                                                                                                    this->cycle_tilde_02_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_02_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->cycle_tilde_02_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->cycle_tilde_02_phasei = 0;
                                                                                                                    this->cycle_tilde_02_f2i = (number)4294967296 / this->samplerate();
                                                                                                                    this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
                                                                                                                    this->cycle_tilde_02_setupDone = true;
                                                                                                                    this->cycle_tilde_02_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_02_bufferUpdated() {
                                                                                                                    this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    receive_05_output_number = 0;
                                                                                                                    cycle_tilde_02_frequency = 0;
                                                                                                                    cycle_tilde_02_phase_offset = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    cycle_tilde_02_wrap = 0;
                                                                                                                    cycle_tilde_02_ph_currentPhase = 0;
                                                                                                                    cycle_tilde_02_ph_conv = 0;
                                                                                                                    cycle_tilde_02_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number receive_05_output_number;
                                                                                                                    list receive_05_output_list;
                                                                                                                    number cycle_tilde_02_frequency;
                                                                                                                    number cycle_tilde_02_phase_offset;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    Float64BufferRef cycle_tilde_02_buffer;
                                                                                                                    long cycle_tilde_02_wrap;
                                                                                                                    uint32_t cycle_tilde_02_phasei;
                                                                                                                    SampleValue cycle_tilde_02_f2i;
                                                                                                                    number cycle_tilde_02_ph_currentPhase;
                                                                                                                    number cycle_tilde_02_ph_conv;
                                                                                                                    bool cycle_tilde_02_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    class RNBOSubpatcher_4233 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4235;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4233()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4233()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4235* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4235 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                    this->phasor_03_perform(this->phasor_03_freq, out1, n);
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        this->phasor_03_sigbuf = resizeSignal(this->phasor_03_sigbuf, this->maxvs, maxBlockSize);
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->phasor_03_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {}
                                                                                                                
                                                                                                                void phasor_03_perform(number freq, SampleValue * out, Index n) {
                                                                                                                    for (Index i = 0; i < n; i++) {
                                                                                                                        out[(Index)i] = this->phasor_03_ph_next(freq, -1);
                                                                                                                        this->phasor_03_sigbuf[(Index)i] = -1;
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number phasor_03_ph_next(number freq, number reset) {
                                                                                                                    RNBO_UNUSED(reset);
                                                                                                                    number pincr = freq * this->phasor_03_ph_conv;
                                                                                                                
                                                                                                                    if (this->phasor_03_ph_currentPhase < 0.)
                                                                                                                        this->phasor_03_ph_currentPhase = 1. + this->phasor_03_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->phasor_03_ph_currentPhase > 1.)
                                                                                                                        this->phasor_03_ph_currentPhase = this->phasor_03_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->phasor_03_ph_currentPhase;
                                                                                                                    this->phasor_03_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_03_ph_reset() {
                                                                                                                    this->phasor_03_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_03_ph_dspsetup() {
                                                                                                                    this->phasor_03_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_03_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->phasor_03_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->phasor_03_conv = (number)1 / this->samplerate();
                                                                                                                    this->phasor_03_setupDone = true;
                                                                                                                    this->phasor_03_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    receive_06_output_number = 0;
                                                                                                                    phasor_03_freq = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    phasor_03_sigbuf = nullptr;
                                                                                                                    phasor_03_lastLockedPhase = 0;
                                                                                                                    phasor_03_conv = 0;
                                                                                                                    phasor_03_ph_currentPhase = 0;
                                                                                                                    phasor_03_ph_conv = 0;
                                                                                                                    phasor_03_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number receive_06_output_number;
                                                                                                                    list receive_06_output_list;
                                                                                                                    number phasor_03_freq;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    signal phasor_03_sigbuf;
                                                                                                                    number phasor_03_lastLockedPhase;
                                                                                                                    number phasor_03_conv;
                                                                                                                    number phasor_03_ph_currentPhase;
                                                                                                                    number phasor_03_ph_conv;
                                                                                                                    bool phasor_03_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    class RNBOSubpatcher_4234 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4235;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4234()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4234()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4235* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4235 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number wrap(number x, number low, number high) {
                                                                                                                    number lo;
                                                                                                                    number hi;
                                                                                                                
                                                                                                                    if (low == high)
                                                                                                                        return low;
                                                                                                                
                                                                                                                    if (low > high) {
                                                                                                                        hi = low;
                                                                                                                        lo = high;
                                                                                                                    } else {
                                                                                                                        lo = low;
                                                                                                                        hi = high;
                                                                                                                    }
                                                                                                                
                                                                                                                    number range = hi - lo;
                                                                                                                
                                                                                                                    if (x >= lo && x < hi)
                                                                                                                        return x;
                                                                                                                
                                                                                                                    if (range <= 0.000000001)
                                                                                                                        return lo;
                                                                                                                
                                                                                                                    long numWraps = (long)(trunc((x - lo) / range));
                                                                                                                    numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                                                    number result = x - range * numWraps;
                                                                                                                
                                                                                                                    if (result >= hi)
                                                                                                                        return result - range;
                                                                                                                    else
                                                                                                                        return result;
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                    this->phasor_04_perform(this->phasor_04_freq, this->signals[0], n);
                                                                                                                    this->triangle_tilde_02_perform(this->signals[0], this->triangle_tilde_02_duty, out1, n);
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        Index i;
                                                                                                                
                                                                                                                        for (i = 0; i < 1; i++) {
                                                                                                                            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                                                        }
                                                                                                                
                                                                                                                        this->phasor_04_sigbuf = resizeSignal(this->phasor_04_sigbuf, this->maxvs, maxBlockSize);
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->phasor_04_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {}
                                                                                                                
                                                                                                                void phasor_04_perform(number freq, SampleValue * out, Index n) {
                                                                                                                    for (Index i = 0; i < n; i++) {
                                                                                                                        out[(Index)i] = this->phasor_04_ph_next(freq, -1);
                                                                                                                        this->phasor_04_sigbuf[(Index)i] = -1;
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void triangle_tilde_02_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                                                    RNBO_UNUSED(duty);
                                                                                                                    Index i;
                                                                                                                
                                                                                                                    for (i = 0; i < n; i++) {
                                                                                                                        number p1 = 0.5;
                                                                                                                        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                                                        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                                                
                                                                                                                        if (wrappedPhase < p1) {
                                                                                                                            out1[(Index)i] = wrappedPhase / p1;
                                                                                                                            continue;
                                                                                                                        } else {
                                                                                                                            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number phasor_04_ph_next(number freq, number reset) {
                                                                                                                    RNBO_UNUSED(reset);
                                                                                                                    number pincr = freq * this->phasor_04_ph_conv;
                                                                                                                
                                                                                                                    if (this->phasor_04_ph_currentPhase < 0.)
                                                                                                                        this->phasor_04_ph_currentPhase = 1. + this->phasor_04_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->phasor_04_ph_currentPhase > 1.)
                                                                                                                        this->phasor_04_ph_currentPhase = this->phasor_04_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->phasor_04_ph_currentPhase;
                                                                                                                    this->phasor_04_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_04_ph_reset() {
                                                                                                                    this->phasor_04_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_04_ph_dspsetup() {
                                                                                                                    this->phasor_04_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_04_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->phasor_04_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->phasor_04_conv = (number)1 / this->samplerate();
                                                                                                                    this->phasor_04_setupDone = true;
                                                                                                                    this->phasor_04_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    triangle_tilde_02_phase = 0;
                                                                                                                    triangle_tilde_02_duty = 0.5;
                                                                                                                    phasor_04_freq = 0;
                                                                                                                    receive_07_output_number = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    signals[0] = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    phasor_04_sigbuf = nullptr;
                                                                                                                    phasor_04_lastLockedPhase = 0;
                                                                                                                    phasor_04_conv = 0;
                                                                                                                    phasor_04_ph_currentPhase = 0;
                                                                                                                    phasor_04_ph_conv = 0;
                                                                                                                    phasor_04_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number triangle_tilde_02_phase;
                                                                                                                    number triangle_tilde_02_duty;
                                                                                                                    number phasor_04_freq;
                                                                                                                    number receive_07_output_number;
                                                                                                                    list receive_07_output_list;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    SampleValue * signals[1];
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    signal phasor_04_sigbuf;
                                                                                                                    number phasor_04_lastLockedPhase;
                                                                                                                    number phasor_04_conv;
                                                                                                                    number phasor_04_ph_currentPhase;
                                                                                                                    number phasor_04_ph_conv;
                                                                                                                    bool phasor_04_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    RNBOSubpatcher_4235()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4235()
                                                                                    {
                                                                                        delete this->p_04;
                                                                                        delete this->p_05;
                                                                                        delete this->p_06;
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4236* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4236 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->p_04_perform(this->signals[0], n);
                                                                                        this->p_05_perform(this->signals[1], n);
                                                                                        this->p_06_perform(this->signals[2], n);
                                                                                    
                                                                                        this->selector_02_perform(
                                                                                            this->selector_02_onoff,
                                                                                            this->zeroBuffer,
                                                                                            this->signals[0],
                                                                                            this->signals[1],
                                                                                            this->signals[2],
                                                                                            out1,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 3; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        RNBO_UNUSED(forceDSPSetup);
                                                                                        this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                        this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {
                                                                                        this->p_04 = new RNBOSubpatcher_4232();
                                                                                        this->p_04->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_04->initialize();
                                                                                        this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
                                                                                        this->p_05 = new RNBOSubpatcher_4233();
                                                                                        this->p_05->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_05->initialize();
                                                                                        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
                                                                                        this->p_06 = new RNBOSubpatcher_4234();
                                                                                        this->p_06->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_06->initialize();
                                                                                        this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
                                                                                    }
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& preset) {
                                                                                        this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                                        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                                        this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                                                    }
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processTempoEvent(time, tempo);
                                                                                        this->p_05->processTempoEvent(time, tempo);
                                                                                        this->p_06->processTempoEvent(time, tempo);
                                                                                    }
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processTransportEvent(time, state);
                                                                                        this->p_05->processTransportEvent(time, state);
                                                                                        this->p_06->processTransportEvent(time, state);
                                                                                    }
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processBeatTimeEvent(time, beattime);
                                                                                        this->p_05->processBeatTimeEvent(time, beattime);
                                                                                        this->p_06->processBeatTimeEvent(time, beattime);
                                                                                    }
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processTimeSignatureEvent(time, numerator, denominator);
                                                                                        this->p_05->processTimeSignatureEvent(time, numerator, denominator);
                                                                                        this->p_06->processTimeSignatureEvent(time, numerator, denominator);
                                                                                    }
                                                                                    
                                                                                    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                                        RNBO_UNUSED(v);
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                this->p_04->setParameterValue(index, v, time);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                this->p_05->setParameterValue(index, v, time);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                this->p_06->setParameterValue(index, v, time);
                                                                                    
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                return this->p_04->getParameterValue(index);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                return this->p_05->getParameterValue(index);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                return this->p_06->getParameterValue(index);
                                                                                    
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters() + this->p_06->getNumParameters();
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                return this->p_04->getParameterName(index);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                return this->p_05->getParameterName(index);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                return this->p_06->getParameterName(index);
                                                                                    
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                return this->p_04->getParameterId(index);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                return this->p_05->getParameterId(index);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                return this->p_06->getParameterId(index);
                                                                                    
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                                        {
                                                                                            switch (index) {
                                                                                            default:
                                                                                                {
                                                                                                index -= 0;
                                                                                    
                                                                                                if (index < this->p_04->getNumParameters())
                                                                                                    this->p_04->getParameterInfo(index, info);
                                                                                    
                                                                                                index -= this->p_04->getNumParameters();
                                                                                    
                                                                                                if (index < this->p_05->getNumParameters())
                                                                                                    this->p_05->getParameterInfo(index, info);
                                                                                    
                                                                                                index -= this->p_05->getNumParameters();
                                                                                    
                                                                                                if (index < this->p_06->getNumParameters())
                                                                                                    this->p_06->getParameterInfo(index, info);
                                                                                    
                                                                                                break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                                        if (subpatcher == this->p_04)
                                                                                            return 0;
                                                                                    
                                                                                        if (subpatcher == this->p_05)
                                                                                            return 0 + this->p_04->getNumParameters();
                                                                                    
                                                                                        if (subpatcher == this->p_06)
                                                                                            return 0 + this->p_04->getNumParameters() + this->p_05->getNumParameters();
                                                                                    
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                return this->p_04->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                return this->p_05->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                return this->p_06->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                return this->p_04->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                return this->p_05->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                return this->p_06->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_04->getNumParameters())
                                                                                                return this->p_04->constrainParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_04->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_05->getNumParameters())
                                                                                                return this->p_05->constrainParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_05->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_06->getNumParameters())
                                                                                                return this->p_06->constrainParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processNumMessage(tag, objectId, time, payload);
                                                                                        this->p_05->processNumMessage(tag, objectId, time, payload);
                                                                                        this->p_06->processNumMessage(tag, objectId, time, payload);
                                                                                    }
                                                                                    
                                                                                    void processListMessage(
                                                                                        MessageTag tag,
                                                                                        MessageTag objectId,
                                                                                        MillisecondTime time,
                                                                                        const list& payload
                                                                                    ) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processListMessage(tag, objectId, time, payload);
                                                                                        this->p_05->processListMessage(tag, objectId, time, payload);
                                                                                        this->p_06->processListMessage(tag, objectId, time, payload);
                                                                                    }
                                                                                    
                                                                                    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_04->processBangMessage(tag, objectId, time);
                                                                                        this->p_05->processBangMessage(tag, objectId, time);
                                                                                        this->p_06->processBangMessage(tag, objectId, time);
                                                                                    }
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        auto subpatchResult_0 = this->p_04->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_0)
                                                                                            return subpatchResult_0;
                                                                                    
                                                                                        auto subpatchResult_1 = this->p_05->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_1)
                                                                                            return subpatchResult_1;
                                                                                    
                                                                                        auto subpatchResult_2 = this->p_06->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_2)
                                                                                            return subpatchResult_2;
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->p_04->processDataViewUpdate(index, time);
                                                                                        this->p_05->processDataViewUpdate(index, time);
                                                                                        this->p_06->processDataViewUpdate(index, time);
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {
                                                                                        this->p_04->initializeObjects();
                                                                                        this->p_05->initializeObjects();
                                                                                        this->p_06->initializeObjects();
                                                                                    }
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        this->p_04->startup();
                                                                                        this->p_05->startup();
                                                                                        this->p_06->startup();
                                                                                    }
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->p_04->allocateDataRefs();
                                                                                        this->p_05->allocateDataRefs();
                                                                                        this->p_06->allocateDataRefs();
                                                                                    }
                                                                                    
                                                                                    void p_04_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: sin
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_04->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void p_05_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: phasor
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_05->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void p_06_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: triangle
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_06->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void selector_02_perform(
                                                                                        number onoff,
                                                                                        const SampleValue * in1,
                                                                                        const SampleValue * in2,
                                                                                        const SampleValue * in3,
                                                                                        const SampleValue * in4,
                                                                                        SampleValue * out,
                                                                                        Index n
                                                                                    ) {
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            if (onoff >= 1 && onoff < 2)
                                                                                                out[(Index)i] = in1[(Index)i];
                                                                                            else if (onoff >= 2 && onoff < 3)
                                                                                                out[(Index)i] = in2[(Index)i];
                                                                                            else if (onoff >= 3 && onoff < 4)
                                                                                                out[(Index)i] = in3[(Index)i];
                                                                                            else if (onoff >= 4 && onoff < 5)
                                                                                                out[(Index)i] = in4[(Index)i];
                                                                                            else
                                                                                                out[(Index)i] = 0;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_08_output_number = 0;
                                                                                        selector_02_onoff = 1;
                                                                                        p_04_target = 0;
                                                                                        p_05_target = 0;
                                                                                        p_06_target = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        signals[1] = nullptr;
                                                                                        signals[2] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_08_output_number;
                                                                                        list receive_08_output_list;
                                                                                        number selector_02_onoff;
                                                                                        number p_04_target;
                                                                                        number p_05_target;
                                                                                        number p_06_target;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[3];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                        RNBOSubpatcher_4232* p_04;
                                                                                        RNBOSubpatcher_4233* p_05;
                                                                                        RNBOSubpatcher_4234* p_06;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4236()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4236()
                                                            {
                                                                delete this->p_07;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4237* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4237 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_07_perform(out1, n);
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_07 = new RNBOSubpatcher_4235();
                                                                this->p_07->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_07->initialize();
                                                                this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_07->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_07->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_07->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_07->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        this->p_07->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        return this->p_07->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_07->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        return this->p_07->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        return this->p_07->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_07->getNumParameters())
                                                                            this->p_07->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_07)
                                                                    return 0;
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        return this->p_07->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        return this->p_07->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_07->getNumParameters())
                                                                        return this->p_07->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_07->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_07->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_07->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_07->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_07->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_07->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_07->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_07->allocateDataRefs();
                                                            }
                                                            
                                                            void p_07_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: generator
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_07->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                p_07_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number p_07_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4235* p_07;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4237()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4237()
                                        {
                                            delete this->p_08;
                                        }
                                        
                                        virtual RNBOSubpatcher_4250* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4250 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_08_perform(this->signals[0], n);
                                            this->dspexpr_02_perform(this->signals[0], this->dspexpr_02_in2, this->signals[1], n);
                                            this->signalgate_01_perform(this->signalgate_01_onoff, this->signals[1], this->signals[0], n);
                                            this->dspexpr_01_perform(this->dspexpr_01_in1, this->signals[0], out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                Index i;
                                        
                                                for (i = 0; i < 2; i++) {
                                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                }
                                        
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_08 = new RNBOSubpatcher_4236();
                                            this->p_08->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_08->initialize();
                                            this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_08->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_08->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_08->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_08->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    this->p_08->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    return this->p_08->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_08->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    return this->p_08->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    return this->p_08->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_08->getNumParameters())
                                                        this->p_08->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_08)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    return this->p_08->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    return this->p_08->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_08->getNumParameters())
                                                    return this->p_08->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_08->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_08->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_08->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_08->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_08->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_08->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_08->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_08->allocateDataRefs();
                                        }
                                        
                                        void dspexpr_01_in1_set(number v) {
                                            this->dspexpr_01_in1 = v;
                                        }
                                        
                                        void receive_09_output_number_set(number v) {
                                            this->receive_09_output_number = v;
                                            this->dspexpr_01_in1_set(v);
                                        }
                                        
                                        void p_08_perform(SampleValue * out1, Index n) {
                                            // subpatcher: FMLFO
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_08->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                                            }
                                        }
                                        
                                        void signalgate_01_perform(number onoff, const SampleValue * input, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                if (onoff == 1) {
                                                    out1[(Index)i] = input[(Index)i];
                                                } else {
                                                    out1[(Index)i] = 0;
                                                }
                                            }
                                        }
                                        
                                        void dspexpr_01_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
                                            }
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            receive_09_output_number = 0;
                                            dspexpr_01_in1 = 0;
                                            dspexpr_01_in2 = 0;
                                            signalgate_01_onoff = 0;
                                            receive_10_output_number = 0;
                                            p_08_target = 0;
                                            dspexpr_02_in1 = 0;
                                            dspexpr_02_in2 = 0;
                                            receive_11_output_number = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            signals[0] = nullptr;
                                            signals[1] = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number receive_09_output_number;
                                            list receive_09_output_list;
                                            number dspexpr_01_in1;
                                            number dspexpr_01_in2;
                                            number signalgate_01_onoff;
                                            number receive_10_output_number;
                                            list receive_10_output_list;
                                            number p_08_target;
                                            number dspexpr_02_in1;
                                            number dspexpr_02_in2;
                                            number receive_11_output_number;
                                            list receive_11_output_list;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            SampleValue * signals[2];
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4236* p_08;
                                        
                        };
                        
                        RNBOSubpatcher_4250()
                        {
                        }
                        
                        ~RNBOSubpatcher_4250()
                        {
                            delete this->p_09;
                        }
                        
                        virtual RNBOSubpatcher_4254* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4254 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        number samplerate() {
                            return this->sr;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->p_09_perform(this->signals[0], n);
                        
                            this->cycle_tilde_03_perform(
                                this->signals[0],
                                this->cycle_tilde_03_phase_offset,
                                out1,
                                this->dummyBuffer,
                                n
                            );
                        
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 1; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->cycle_tilde_03_dspsetup(forceDSPSetup);
                            this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {
                            this->p_09 = new RNBOSubpatcher_4237();
                            this->p_09->setEngineAndPatcher(this->getEngine(), this);
                            this->p_09->initialize();
                            this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
                        }
                        
                        void getPreset(PatcherStateInterface& preset) {
                            this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "freq"));
                        }
                        
                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                            this->updateTime(time);
                            this->p_09->processTempoEvent(time, tempo);
                        }
                        
                        void processTransportEvent(MillisecondTime time, TransportState state) {
                            this->updateTime(time);
                            this->p_09->processTransportEvent(time, state);
                        }
                        
                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                            this->updateTime(time);
                            this->p_09->processBeatTimeEvent(time, beattime);
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                            this->updateTime(time);
                            this->p_09->processTimeSignatureEvent(time, numerator, denominator);
                        }
                        
                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                            RNBO_UNUSED(v);
                            this->updateTime(time);
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    this->p_09->setParameterValue(index, v, time);
                        
                                break;
                                }
                            }
                        }
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    return this->p_09->getParameterValue(index);
                        
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0 + this->p_09->getNumParameters();
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    return this->p_09->getParameterName(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    return this->p_09->getParameterId(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                            {
                                switch (index) {
                                default:
                                    {
                                    index -= 0;
                        
                                    if (index < this->p_09->getNumParameters())
                                        this->p_09->getParameterInfo(index, info);
                        
                                    break;
                                    }
                                }
                            }
                        }
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                            if (subpatcher == this->p_09)
                                return 0;
                        
                            return 0;
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    return this->p_09->convertToNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    return this->p_09->convertFromNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_09->getNumParameters())
                                    return this->p_09->constrainParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_09->processNumMessage(tag, objectId, time, payload);
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_09->processListMessage(tag, objectId, time, payload);
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_09->processBangMessage(tag, objectId, time);
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            auto subpatchResult_0 = this->p_09->resolveTag(tag);
                        
                            if (subpatchResult_0)
                                return subpatchResult_0;
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 0) {
                                this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus);
                                this->cycle_tilde_03_bufferUpdated();
                            }
                        
                            this->p_09->processDataViewUpdate(index, time);
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                            this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus);
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->p_09->initializeObjects();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->p_09->startup();
                        }
                        
                        void allocateDataRefs() {
                            this->p_09->allocateDataRefs();
                            this->cycle_tilde_03_buffer->requestSize(16384, 1);
                            this->cycle_tilde_03_buffer->setSampleRate(this->sr);
                            this->cycle_tilde_03_buffer = this->cycle_tilde_03_buffer->allocateIfNeeded();
                        }
                        
                        void p_09_target_AMLFOfreq_number_set(number v) {
                            this->p_09->updateTime(this->_currentTime);
                            this->p_09->receive_09_output_number_set(v);
                        }
                        
                        void p_09_perform(SampleValue * out1, Index n) {
                            // subpatcher: freq
                            SampleArray<1> outs = {out1};
                        
                            this->p_09->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void cycle_tilde_03_perform(
                            const Sample * frequency,
                            number phase_offset,
                            SampleValue * out1,
                            SampleValue * out2,
                            Index n
                        ) {
                            RNBO_UNUSED(phase_offset);
                            auto __cycle_tilde_03_f2i = this->cycle_tilde_03_f2i;
                            auto __cycle_tilde_03_buffer = this->cycle_tilde_03_buffer;
                            auto __cycle_tilde_03_phasei = this->cycle_tilde_03_phasei;
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                {
                                    uint32_t uint_phase;
                        
                                    {
                                        {
                                            uint_phase = __cycle_tilde_03_phasei;
                                        }
                                    }
                        
                                    uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                    number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                    number y0 = __cycle_tilde_03_buffer[(Index)idx];
                                    number y1 = __cycle_tilde_03_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                    number y = y0 + frac * (y1 - y0);
                        
                                    {
                                        uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_03_f2i));
                                        __cycle_tilde_03_phasei = uint32_add(__cycle_tilde_03_phasei, pincr);
                                    }
                        
                                    out1[(Index)i] = y;
                                    out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                    continue;
                                }
                            }
                        
                            this->cycle_tilde_03_phasei = __cycle_tilde_03_phasei;
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        number cycle_tilde_03_ph_next(number freq, number reset) {
                            {
                                {
                                    if (reset >= 0.)
                                        this->cycle_tilde_03_ph_currentPhase = reset;
                                }
                            }
                        
                            number pincr = freq * this->cycle_tilde_03_ph_conv;
                        
                            if (this->cycle_tilde_03_ph_currentPhase < 0.)
                                this->cycle_tilde_03_ph_currentPhase = 1. + this->cycle_tilde_03_ph_currentPhase;
                        
                            if (this->cycle_tilde_03_ph_currentPhase > 1.)
                                this->cycle_tilde_03_ph_currentPhase = this->cycle_tilde_03_ph_currentPhase - 1.;
                        
                            number tmp = this->cycle_tilde_03_ph_currentPhase;
                            this->cycle_tilde_03_ph_currentPhase += pincr;
                            return tmp;
                        }
                        
                        void cycle_tilde_03_ph_reset() {
                            this->cycle_tilde_03_ph_currentPhase = 0;
                        }
                        
                        void cycle_tilde_03_ph_dspsetup() {
                            this->cycle_tilde_03_ph_conv = (number)1 / this->sr;
                        }
                        
                        void cycle_tilde_03_dspsetup(bool force) {
                            if ((bool)(this->cycle_tilde_03_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->cycle_tilde_03_phasei = 0;
                            this->cycle_tilde_03_f2i = (number)4294967296 / this->samplerate();
                            this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
                            this->cycle_tilde_03_setupDone = true;
                            this->cycle_tilde_03_ph_dspsetup();
                        }
                        
                        void cycle_tilde_03_bufferUpdated() {
                            this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            cycle_tilde_03_frequency = 0;
                            cycle_tilde_03_phase_offset = 0;
                            p_09_target = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            cycle_tilde_03_wrap = 0;
                            cycle_tilde_03_ph_currentPhase = 0;
                            cycle_tilde_03_ph_conv = 0;
                            cycle_tilde_03_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number cycle_tilde_03_frequency;
                            number cycle_tilde_03_phase_offset;
                            number p_09_target;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[1];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Float64BufferRef cycle_tilde_03_buffer;
                            long cycle_tilde_03_wrap;
                            uint32_t cycle_tilde_03_phasei;
                            SampleValue cycle_tilde_03_f2i;
                            number cycle_tilde_03_ph_currentPhase;
                            number cycle_tilde_03_ph_conv;
                            bool cycle_tilde_03_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                            RNBOSubpatcher_4237* p_09;
                        
            };
            
            class RNBOSubpatcher_4251 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4254;
                        friend class rnbomatic;
                        
                        public:
                        
                        class RNBOSubpatcher_4243 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4251;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4242 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4243;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4241 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4242;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    class RNBOSubpatcher_4238 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4241;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4238()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4238()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4241* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4241 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                
                                                                                                                    this->cycle_tilde_04_perform(
                                                                                                                        this->cycle_tilde_04_frequency,
                                                                                                                        this->cycle_tilde_04_phase_offset,
                                                                                                                        out1,
                                                                                                                        this->dummyBuffer,
                                                                                                                        n
                                                                                                                    );
                                                                                                                
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->cycle_tilde_04_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                                                    this->updateTime(time);
                                                                                                                
                                                                                                                    if (index == 0) {
                                                                                                                        this->cycle_tilde_04_buffer = new Float64Buffer(
                                                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                                                        );
                                                                                                                
                                                                                                                        this->cycle_tilde_04_bufferUpdated();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                
                                                                                                                    this->cycle_tilde_04_buffer = new Float64Buffer(
                                                                                                                        this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                                                    );
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {
                                                                                                                    this->cycle_tilde_04_buffer->requestSize(16384, 1);
                                                                                                                    this->cycle_tilde_04_buffer->setSampleRate(this->sr);
                                                                                                                    this->cycle_tilde_04_buffer = this->cycle_tilde_04_buffer->allocateIfNeeded();
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_04_perform(
                                                                                                                    number frequency,
                                                                                                                    number phase_offset,
                                                                                                                    SampleValue * out1,
                                                                                                                    SampleValue * out2,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(phase_offset);
                                                                                                                    auto __cycle_tilde_04_f2i = this->cycle_tilde_04_f2i;
                                                                                                                    auto __cycle_tilde_04_buffer = this->cycle_tilde_04_buffer;
                                                                                                                    auto __cycle_tilde_04_phasei = this->cycle_tilde_04_phasei;
                                                                                                                    Index i;
                                                                                                                
                                                                                                                    for (i = 0; i < n; i++) {
                                                                                                                        {
                                                                                                                            uint32_t uint_phase;
                                                                                                                
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    uint_phase = __cycle_tilde_04_phasei;
                                                                                                                                }
                                                                                                                            }
                                                                                                                
                                                                                                                            uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                                            number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                                            number y0 = __cycle_tilde_04_buffer[(Index)idx];
                                                                                                                            number y1 = __cycle_tilde_04_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                                            number y = y0 + frac * (y1 - y0);
                                                                                                                
                                                                                                                            {
                                                                                                                                uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_04_f2i));
                                                                                                                                __cycle_tilde_04_phasei = uint32_add(__cycle_tilde_04_phasei, pincr);
                                                                                                                            }
                                                                                                                
                                                                                                                            out1[(Index)i] = y;
                                                                                                                            out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }
                                                                                                                
                                                                                                                    this->cycle_tilde_04_phasei = __cycle_tilde_04_phasei;
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number cycle_tilde_04_ph_next(number freq, number reset) {
                                                                                                                    {
                                                                                                                        {
                                                                                                                            if (reset >= 0.)
                                                                                                                                this->cycle_tilde_04_ph_currentPhase = reset;
                                                                                                                        }
                                                                                                                    }
                                                                                                                
                                                                                                                    number pincr = freq * this->cycle_tilde_04_ph_conv;
                                                                                                                
                                                                                                                    if (this->cycle_tilde_04_ph_currentPhase < 0.)
                                                                                                                        this->cycle_tilde_04_ph_currentPhase = 1. + this->cycle_tilde_04_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->cycle_tilde_04_ph_currentPhase > 1.)
                                                                                                                        this->cycle_tilde_04_ph_currentPhase = this->cycle_tilde_04_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->cycle_tilde_04_ph_currentPhase;
                                                                                                                    this->cycle_tilde_04_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_04_ph_reset() {
                                                                                                                    this->cycle_tilde_04_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_04_ph_dspsetup() {
                                                                                                                    this->cycle_tilde_04_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_04_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->cycle_tilde_04_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->cycle_tilde_04_phasei = 0;
                                                                                                                    this->cycle_tilde_04_f2i = (number)4294967296 / this->samplerate();
                                                                                                                    this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
                                                                                                                    this->cycle_tilde_04_setupDone = true;
                                                                                                                    this->cycle_tilde_04_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_04_bufferUpdated() {
                                                                                                                    this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    receive_12_output_number = 0;
                                                                                                                    cycle_tilde_04_frequency = 0;
                                                                                                                    cycle_tilde_04_phase_offset = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    cycle_tilde_04_wrap = 0;
                                                                                                                    cycle_tilde_04_ph_currentPhase = 0;
                                                                                                                    cycle_tilde_04_ph_conv = 0;
                                                                                                                    cycle_tilde_04_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number receive_12_output_number;
                                                                                                                    list receive_12_output_list;
                                                                                                                    number cycle_tilde_04_frequency;
                                                                                                                    number cycle_tilde_04_phase_offset;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    Float64BufferRef cycle_tilde_04_buffer;
                                                                                                                    long cycle_tilde_04_wrap;
                                                                                                                    uint32_t cycle_tilde_04_phasei;
                                                                                                                    SampleValue cycle_tilde_04_f2i;
                                                                                                                    number cycle_tilde_04_ph_currentPhase;
                                                                                                                    number cycle_tilde_04_ph_conv;
                                                                                                                    bool cycle_tilde_04_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    class RNBOSubpatcher_4239 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4241;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4239()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4239()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4241* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4241 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                    this->phasor_05_perform(this->phasor_05_freq, out1, n);
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        this->phasor_05_sigbuf = resizeSignal(this->phasor_05_sigbuf, this->maxvs, maxBlockSize);
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->phasor_05_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {}
                                                                                                                
                                                                                                                void phasor_05_perform(number freq, SampleValue * out, Index n) {
                                                                                                                    for (Index i = 0; i < n; i++) {
                                                                                                                        out[(Index)i] = this->phasor_05_ph_next(freq, -1);
                                                                                                                        this->phasor_05_sigbuf[(Index)i] = -1;
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number phasor_05_ph_next(number freq, number reset) {
                                                                                                                    RNBO_UNUSED(reset);
                                                                                                                    number pincr = freq * this->phasor_05_ph_conv;
                                                                                                                
                                                                                                                    if (this->phasor_05_ph_currentPhase < 0.)
                                                                                                                        this->phasor_05_ph_currentPhase = 1. + this->phasor_05_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->phasor_05_ph_currentPhase > 1.)
                                                                                                                        this->phasor_05_ph_currentPhase = this->phasor_05_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->phasor_05_ph_currentPhase;
                                                                                                                    this->phasor_05_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_05_ph_reset() {
                                                                                                                    this->phasor_05_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_05_ph_dspsetup() {
                                                                                                                    this->phasor_05_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_05_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->phasor_05_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->phasor_05_conv = (number)1 / this->samplerate();
                                                                                                                    this->phasor_05_setupDone = true;
                                                                                                                    this->phasor_05_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    receive_13_output_number = 0;
                                                                                                                    phasor_05_freq = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    phasor_05_sigbuf = nullptr;
                                                                                                                    phasor_05_lastLockedPhase = 0;
                                                                                                                    phasor_05_conv = 0;
                                                                                                                    phasor_05_ph_currentPhase = 0;
                                                                                                                    phasor_05_ph_conv = 0;
                                                                                                                    phasor_05_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number receive_13_output_number;
                                                                                                                    list receive_13_output_list;
                                                                                                                    number phasor_05_freq;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    signal phasor_05_sigbuf;
                                                                                                                    number phasor_05_lastLockedPhase;
                                                                                                                    number phasor_05_conv;
                                                                                                                    number phasor_05_ph_currentPhase;
                                                                                                                    number phasor_05_ph_conv;
                                                                                                                    bool phasor_05_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    class RNBOSubpatcher_4240 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4241;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4240()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4240()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4241* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4241 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number wrap(number x, number low, number high) {
                                                                                                                    number lo;
                                                                                                                    number hi;
                                                                                                                
                                                                                                                    if (low == high)
                                                                                                                        return low;
                                                                                                                
                                                                                                                    if (low > high) {
                                                                                                                        hi = low;
                                                                                                                        lo = high;
                                                                                                                    } else {
                                                                                                                        lo = low;
                                                                                                                        hi = high;
                                                                                                                    }
                                                                                                                
                                                                                                                    number range = hi - lo;
                                                                                                                
                                                                                                                    if (x >= lo && x < hi)
                                                                                                                        return x;
                                                                                                                
                                                                                                                    if (range <= 0.000000001)
                                                                                                                        return lo;
                                                                                                                
                                                                                                                    long numWraps = (long)(trunc((x - lo) / range));
                                                                                                                    numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                                                    number result = x - range * numWraps;
                                                                                                                
                                                                                                                    if (result >= hi)
                                                                                                                        return result - range;
                                                                                                                    else
                                                                                                                        return result;
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                    this->phasor_06_perform(this->phasor_06_freq, this->signals[0], n);
                                                                                                                    this->triangle_tilde_03_perform(this->signals[0], this->triangle_tilde_03_duty, out1, n);
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        Index i;
                                                                                                                
                                                                                                                        for (i = 0; i < 1; i++) {
                                                                                                                            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                                                        }
                                                                                                                
                                                                                                                        this->phasor_06_sigbuf = resizeSignal(this->phasor_06_sigbuf, this->maxvs, maxBlockSize);
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->phasor_06_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {}
                                                                                                                
                                                                                                                void phasor_06_perform(number freq, SampleValue * out, Index n) {
                                                                                                                    for (Index i = 0; i < n; i++) {
                                                                                                                        out[(Index)i] = this->phasor_06_ph_next(freq, -1);
                                                                                                                        this->phasor_06_sigbuf[(Index)i] = -1;
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void triangle_tilde_03_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                                                    RNBO_UNUSED(duty);
                                                                                                                    Index i;
                                                                                                                
                                                                                                                    for (i = 0; i < n; i++) {
                                                                                                                        number p1 = 0.5;
                                                                                                                        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                                                        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                                                
                                                                                                                        if (wrappedPhase < p1) {
                                                                                                                            out1[(Index)i] = wrappedPhase / p1;
                                                                                                                            continue;
                                                                                                                        } else {
                                                                                                                            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number phasor_06_ph_next(number freq, number reset) {
                                                                                                                    RNBO_UNUSED(reset);
                                                                                                                    number pincr = freq * this->phasor_06_ph_conv;
                                                                                                                
                                                                                                                    if (this->phasor_06_ph_currentPhase < 0.)
                                                                                                                        this->phasor_06_ph_currentPhase = 1. + this->phasor_06_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->phasor_06_ph_currentPhase > 1.)
                                                                                                                        this->phasor_06_ph_currentPhase = this->phasor_06_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->phasor_06_ph_currentPhase;
                                                                                                                    this->phasor_06_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_06_ph_reset() {
                                                                                                                    this->phasor_06_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_06_ph_dspsetup() {
                                                                                                                    this->phasor_06_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_06_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->phasor_06_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->phasor_06_conv = (number)1 / this->samplerate();
                                                                                                                    this->phasor_06_setupDone = true;
                                                                                                                    this->phasor_06_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    triangle_tilde_03_phase = 0;
                                                                                                                    triangle_tilde_03_duty = 0.5;
                                                                                                                    phasor_06_freq = 0;
                                                                                                                    receive_14_output_number = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    signals[0] = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    phasor_06_sigbuf = nullptr;
                                                                                                                    phasor_06_lastLockedPhase = 0;
                                                                                                                    phasor_06_conv = 0;
                                                                                                                    phasor_06_ph_currentPhase = 0;
                                                                                                                    phasor_06_ph_conv = 0;
                                                                                                                    phasor_06_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number triangle_tilde_03_phase;
                                                                                                                    number triangle_tilde_03_duty;
                                                                                                                    number phasor_06_freq;
                                                                                                                    number receive_14_output_number;
                                                                                                                    list receive_14_output_list;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    SampleValue * signals[1];
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    signal phasor_06_sigbuf;
                                                                                                                    number phasor_06_lastLockedPhase;
                                                                                                                    number phasor_06_conv;
                                                                                                                    number phasor_06_ph_currentPhase;
                                                                                                                    number phasor_06_ph_conv;
                                                                                                                    bool phasor_06_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    RNBOSubpatcher_4241()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4241()
                                                                                    {
                                                                                        delete this->p_10;
                                                                                        delete this->p_11;
                                                                                        delete this->p_12;
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4242* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4242 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->p_10_perform(this->signals[0], n);
                                                                                        this->p_11_perform(this->signals[1], n);
                                                                                        this->p_12_perform(this->signals[2], n);
                                                                                    
                                                                                        this->selector_03_perform(
                                                                                            this->selector_03_onoff,
                                                                                            this->zeroBuffer,
                                                                                            this->signals[0],
                                                                                            this->signals[1],
                                                                                            this->signals[2],
                                                                                            out1,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 3; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        RNBO_UNUSED(forceDSPSetup);
                                                                                        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                        this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {
                                                                                        this->p_10 = new RNBOSubpatcher_4238();
                                                                                        this->p_10->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_10->initialize();
                                                                                        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
                                                                                        this->p_11 = new RNBOSubpatcher_4239();
                                                                                        this->p_11->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_11->initialize();
                                                                                        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
                                                                                        this->p_12 = new RNBOSubpatcher_4240();
                                                                                        this->p_12->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_12->initialize();
                                                                                        this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
                                                                                    }
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& preset) {
                                                                                        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                                        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                                        this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                                                    }
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processTempoEvent(time, tempo);
                                                                                        this->p_11->processTempoEvent(time, tempo);
                                                                                        this->p_12->processTempoEvent(time, tempo);
                                                                                    }
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processTransportEvent(time, state);
                                                                                        this->p_11->processTransportEvent(time, state);
                                                                                        this->p_12->processTransportEvent(time, state);
                                                                                    }
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processBeatTimeEvent(time, beattime);
                                                                                        this->p_11->processBeatTimeEvent(time, beattime);
                                                                                        this->p_12->processBeatTimeEvent(time, beattime);
                                                                                    }
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processTimeSignatureEvent(time, numerator, denominator);
                                                                                        this->p_11->processTimeSignatureEvent(time, numerator, denominator);
                                                                                        this->p_12->processTimeSignatureEvent(time, numerator, denominator);
                                                                                    }
                                                                                    
                                                                                    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                                        RNBO_UNUSED(v);
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                this->p_10->setParameterValue(index, v, time);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                this->p_11->setParameterValue(index, v, time);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                this->p_12->setParameterValue(index, v, time);
                                                                                    
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                return this->p_10->getParameterValue(index);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                return this->p_11->getParameterValue(index);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                return this->p_12->getParameterValue(index);
                                                                                    
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0 + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters();
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                return this->p_10->getParameterName(index);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                return this->p_11->getParameterName(index);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                return this->p_12->getParameterName(index);
                                                                                    
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                return this->p_10->getParameterId(index);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                return this->p_11->getParameterId(index);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                return this->p_12->getParameterId(index);
                                                                                    
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                                        {
                                                                                            switch (index) {
                                                                                            default:
                                                                                                {
                                                                                                index -= 0;
                                                                                    
                                                                                                if (index < this->p_10->getNumParameters())
                                                                                                    this->p_10->getParameterInfo(index, info);
                                                                                    
                                                                                                index -= this->p_10->getNumParameters();
                                                                                    
                                                                                                if (index < this->p_11->getNumParameters())
                                                                                                    this->p_11->getParameterInfo(index, info);
                                                                                    
                                                                                                index -= this->p_11->getNumParameters();
                                                                                    
                                                                                                if (index < this->p_12->getNumParameters())
                                                                                                    this->p_12->getParameterInfo(index, info);
                                                                                    
                                                                                                break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                                        if (subpatcher == this->p_10)
                                                                                            return 0;
                                                                                    
                                                                                        if (subpatcher == this->p_11)
                                                                                            return 0 + this->p_10->getNumParameters();
                                                                                    
                                                                                        if (subpatcher == this->p_12)
                                                                                            return 0 + this->p_10->getNumParameters() + this->p_11->getNumParameters();
                                                                                    
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                return this->p_10->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                return this->p_11->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                return this->p_12->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                return this->p_10->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                return this->p_11->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                return this->p_12->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_10->getNumParameters())
                                                                                                return this->p_10->constrainParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_10->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_11->getNumParameters())
                                                                                                return this->p_11->constrainParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_11->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_12->getNumParameters())
                                                                                                return this->p_12->constrainParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processNumMessage(tag, objectId, time, payload);
                                                                                        this->p_11->processNumMessage(tag, objectId, time, payload);
                                                                                        this->p_12->processNumMessage(tag, objectId, time, payload);
                                                                                    }
                                                                                    
                                                                                    void processListMessage(
                                                                                        MessageTag tag,
                                                                                        MessageTag objectId,
                                                                                        MillisecondTime time,
                                                                                        const list& payload
                                                                                    ) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processListMessage(tag, objectId, time, payload);
                                                                                        this->p_11->processListMessage(tag, objectId, time, payload);
                                                                                        this->p_12->processListMessage(tag, objectId, time, payload);
                                                                                    }
                                                                                    
                                                                                    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_10->processBangMessage(tag, objectId, time);
                                                                                        this->p_11->processBangMessage(tag, objectId, time);
                                                                                        this->p_12->processBangMessage(tag, objectId, time);
                                                                                    }
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        auto subpatchResult_0 = this->p_10->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_0)
                                                                                            return subpatchResult_0;
                                                                                    
                                                                                        auto subpatchResult_1 = this->p_11->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_1)
                                                                                            return subpatchResult_1;
                                                                                    
                                                                                        auto subpatchResult_2 = this->p_12->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_2)
                                                                                            return subpatchResult_2;
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->p_10->processDataViewUpdate(index, time);
                                                                                        this->p_11->processDataViewUpdate(index, time);
                                                                                        this->p_12->processDataViewUpdate(index, time);
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {
                                                                                        this->p_10->initializeObjects();
                                                                                        this->p_11->initializeObjects();
                                                                                        this->p_12->initializeObjects();
                                                                                    }
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        this->p_10->startup();
                                                                                        this->p_11->startup();
                                                                                        this->p_12->startup();
                                                                                    }
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->p_10->allocateDataRefs();
                                                                                        this->p_11->allocateDataRefs();
                                                                                        this->p_12->allocateDataRefs();
                                                                                    }
                                                                                    
                                                                                    void p_10_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: sin
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_10->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void p_11_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: phasor
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_11->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void p_12_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: triangle
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_12->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void selector_03_perform(
                                                                                        number onoff,
                                                                                        const SampleValue * in1,
                                                                                        const SampleValue * in2,
                                                                                        const SampleValue * in3,
                                                                                        const SampleValue * in4,
                                                                                        SampleValue * out,
                                                                                        Index n
                                                                                    ) {
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            if (onoff >= 1 && onoff < 2)
                                                                                                out[(Index)i] = in1[(Index)i];
                                                                                            else if (onoff >= 2 && onoff < 3)
                                                                                                out[(Index)i] = in2[(Index)i];
                                                                                            else if (onoff >= 3 && onoff < 4)
                                                                                                out[(Index)i] = in3[(Index)i];
                                                                                            else if (onoff >= 4 && onoff < 5)
                                                                                                out[(Index)i] = in4[(Index)i];
                                                                                            else
                                                                                                out[(Index)i] = 0;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_15_output_number = 0;
                                                                                        selector_03_onoff = 1;
                                                                                        p_10_target = 0;
                                                                                        p_11_target = 0;
                                                                                        p_12_target = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        signals[1] = nullptr;
                                                                                        signals[2] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_15_output_number;
                                                                                        list receive_15_output_list;
                                                                                        number selector_03_onoff;
                                                                                        number p_10_target;
                                                                                        number p_11_target;
                                                                                        number p_12_target;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[3];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                        RNBOSubpatcher_4238* p_10;
                                                                                        RNBOSubpatcher_4239* p_11;
                                                                                        RNBOSubpatcher_4240* p_12;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4242()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4242()
                                                            {
                                                                delete this->p_13;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4243* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4243 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_13_perform(out1, n);
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_13 = new RNBOSubpatcher_4241();
                                                                this->p_13->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_13->initialize();
                                                                this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_13->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_13->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_13->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_13->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        this->p_13->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        return this->p_13->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_13->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        return this->p_13->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        return this->p_13->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_13->getNumParameters())
                                                                            this->p_13->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_13)
                                                                    return 0;
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        return this->p_13->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        return this->p_13->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_13->getNumParameters())
                                                                        return this->p_13->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_13->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_13->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_13->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_13->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_13->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_13->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_13->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_13->allocateDataRefs();
                                                            }
                                                            
                                                            void p_13_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: generator
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_13->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                p_13_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number p_13_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4241* p_13;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4243()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4243()
                                        {
                                            delete this->p_14;
                                        }
                                        
                                        virtual RNBOSubpatcher_4251* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4251 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_14_perform(this->signals[0], n);
                                            this->dspexpr_04_perform(this->signals[0], this->dspexpr_04_in2, this->signals[1], n);
                                            this->signalgate_02_perform(this->signalgate_02_onoff, this->signals[1], this->signals[0], n);
                                            this->dspexpr_03_perform(this->dspexpr_03_in1, this->signals[0], out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                Index i;
                                        
                                                for (i = 0; i < 2; i++) {
                                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                }
                                        
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_14 = new RNBOSubpatcher_4242();
                                            this->p_14->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_14->initialize();
                                            this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_14->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_14->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_14->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_14->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    this->p_14->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    return this->p_14->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_14->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    return this->p_14->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    return this->p_14->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_14->getNumParameters())
                                                        this->p_14->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_14)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    return this->p_14->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    return this->p_14->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_14->getNumParameters())
                                                    return this->p_14->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_14->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_14->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_14->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_14->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_14->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_14->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_14->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_14->allocateDataRefs();
                                        }
                                        
                                        void dspexpr_03_in1_set(number v) {
                                            this->dspexpr_03_in1 = v;
                                        }
                                        
                                        void receive_16_output_number_set(number v) {
                                            this->receive_16_output_number = v;
                                            this->dspexpr_03_in1_set(v);
                                        }
                                        
                                        void p_14_perform(SampleValue * out1, Index n) {
                                            // subpatcher: FMLFO
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_14->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void dspexpr_04_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                                            }
                                        }
                                        
                                        void signalgate_02_perform(number onoff, const SampleValue * input, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                if (onoff == 1) {
                                                    out1[(Index)i] = input[(Index)i];
                                                } else {
                                                    out1[(Index)i] = 0;
                                                }
                                            }
                                        }
                                        
                                        void dspexpr_03_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
                                            }
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            receive_16_output_number = 0;
                                            dspexpr_03_in1 = 0;
                                            dspexpr_03_in2 = 0;
                                            signalgate_02_onoff = 0;
                                            receive_17_output_number = 0;
                                            p_14_target = 0;
                                            dspexpr_04_in1 = 0;
                                            dspexpr_04_in2 = 0;
                                            receive_18_output_number = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            signals[0] = nullptr;
                                            signals[1] = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number receive_16_output_number;
                                            list receive_16_output_list;
                                            number dspexpr_03_in1;
                                            number dspexpr_03_in2;
                                            number signalgate_02_onoff;
                                            number receive_17_output_number;
                                            list receive_17_output_list;
                                            number p_14_target;
                                            number dspexpr_04_in1;
                                            number dspexpr_04_in2;
                                            number receive_18_output_number;
                                            list receive_18_output_list;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            SampleValue * signals[2];
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4242* p_14;
                                        
                        };
                        
                        RNBOSubpatcher_4251()
                        {
                        }
                        
                        ~RNBOSubpatcher_4251()
                        {
                            delete this->p_15;
                        }
                        
                        virtual RNBOSubpatcher_4254* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4254 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        number samplerate() {
                            return this->sr;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->p_15_perform(this->signals[0], n);
                            this->phasor_07_perform(this->signals[0], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 1; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->phasor_07_sigbuf = resizeSignal(this->phasor_07_sigbuf, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->phasor_07_dspsetup(forceDSPSetup);
                            this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {
                            this->p_15 = new RNBOSubpatcher_4243();
                            this->p_15->setEngineAndPatcher(this->getEngine(), this);
                            this->p_15->initialize();
                            this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
                        }
                        
                        void getPreset(PatcherStateInterface& preset) {
                            this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "freq"));
                        }
                        
                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                            this->updateTime(time);
                            this->p_15->processTempoEvent(time, tempo);
                        }
                        
                        void processTransportEvent(MillisecondTime time, TransportState state) {
                            this->updateTime(time);
                            this->p_15->processTransportEvent(time, state);
                        }
                        
                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                            this->updateTime(time);
                            this->p_15->processBeatTimeEvent(time, beattime);
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                            this->updateTime(time);
                            this->p_15->processTimeSignatureEvent(time, numerator, denominator);
                        }
                        
                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                            RNBO_UNUSED(v);
                            this->updateTime(time);
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    this->p_15->setParameterValue(index, v, time);
                        
                                break;
                                }
                            }
                        }
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    return this->p_15->getParameterValue(index);
                        
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0 + this->p_15->getNumParameters();
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    return this->p_15->getParameterName(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    return this->p_15->getParameterId(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                            {
                                switch (index) {
                                default:
                                    {
                                    index -= 0;
                        
                                    if (index < this->p_15->getNumParameters())
                                        this->p_15->getParameterInfo(index, info);
                        
                                    break;
                                    }
                                }
                            }
                        }
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                            if (subpatcher == this->p_15)
                                return 0;
                        
                            return 0;
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    return this->p_15->convertToNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    return this->p_15->convertFromNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_15->getNumParameters())
                                    return this->p_15->constrainParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_15->processNumMessage(tag, objectId, time, payload);
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_15->processListMessage(tag, objectId, time, payload);
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_15->processBangMessage(tag, objectId, time);
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            auto subpatchResult_0 = this->p_15->resolveTag(tag);
                        
                            if (subpatchResult_0)
                                return subpatchResult_0;
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->p_15->processDataViewUpdate(index, time);
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->p_15->initializeObjects();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->p_15->startup();
                        }
                        
                        void allocateDataRefs() {
                            this->p_15->allocateDataRefs();
                        }
                        
                        void p_15_target_AMLFOfreq_number_set(number v) {
                            this->p_15->updateTime(this->_currentTime);
                            this->p_15->receive_16_output_number_set(v);
                        }
                        
                        void p_15_perform(SampleValue * out1, Index n) {
                            // subpatcher: freq
                            SampleArray<1> outs = {out1};
                        
                            this->p_15->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void phasor_07_perform(const Sample * freq, SampleValue * out, Index n) {
                            for (Index i = 0; i < n; i++) {
                                out[(Index)i] = this->phasor_07_ph_next(freq[(Index)i], -1);
                                this->phasor_07_sigbuf[(Index)i] = -1;
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        number phasor_07_ph_next(number freq, number reset) {
                            RNBO_UNUSED(reset);
                            number pincr = freq * this->phasor_07_ph_conv;
                        
                            if (this->phasor_07_ph_currentPhase < 0.)
                                this->phasor_07_ph_currentPhase = 1. + this->phasor_07_ph_currentPhase;
                        
                            if (this->phasor_07_ph_currentPhase > 1.)
                                this->phasor_07_ph_currentPhase = this->phasor_07_ph_currentPhase - 1.;
                        
                            number tmp = this->phasor_07_ph_currentPhase;
                            this->phasor_07_ph_currentPhase += pincr;
                            return tmp;
                        }
                        
                        void phasor_07_ph_reset() {
                            this->phasor_07_ph_currentPhase = 0;
                        }
                        
                        void phasor_07_ph_dspsetup() {
                            this->phasor_07_ph_conv = (number)1 / this->sr;
                        }
                        
                        void phasor_07_dspsetup(bool force) {
                            if ((bool)(this->phasor_07_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->phasor_07_conv = (number)1 / this->samplerate();
                            this->phasor_07_setupDone = true;
                            this->phasor_07_ph_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            phasor_07_freq = 0;
                            p_15_target = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            phasor_07_sigbuf = nullptr;
                            phasor_07_lastLockedPhase = 0;
                            phasor_07_conv = 0;
                            phasor_07_ph_currentPhase = 0;
                            phasor_07_ph_conv = 0;
                            phasor_07_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number phasor_07_freq;
                            number p_15_target;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[1];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            signal phasor_07_sigbuf;
                            number phasor_07_lastLockedPhase;
                            number phasor_07_conv;
                            number phasor_07_ph_currentPhase;
                            number phasor_07_ph_conv;
                            bool phasor_07_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                            RNBOSubpatcher_4243* p_15;
                        
            };
            
            class RNBOSubpatcher_4252 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4254;
                        friend class rnbomatic;
                        
                        public:
                        
                        class RNBOSubpatcher_4249 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4252;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4248 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4249;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4247 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4248;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    class RNBOSubpatcher_4244 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4247;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4244()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4244()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4247* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4247 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                
                                                                                                                    this->cycle_tilde_05_perform(
                                                                                                                        this->cycle_tilde_05_frequency,
                                                                                                                        this->cycle_tilde_05_phase_offset,
                                                                                                                        out1,
                                                                                                                        this->dummyBuffer,
                                                                                                                        n
                                                                                                                    );
                                                                                                                
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->cycle_tilde_05_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                                                    this->updateTime(time);
                                                                                                                
                                                                                                                    if (index == 0) {
                                                                                                                        this->cycle_tilde_05_buffer = new Float64Buffer(
                                                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                                                        );
                                                                                                                
                                                                                                                        this->cycle_tilde_05_bufferUpdated();
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                
                                                                                                                    this->cycle_tilde_05_buffer = new Float64Buffer(
                                                                                                                        this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                                                    );
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {
                                                                                                                    this->cycle_tilde_05_buffer->requestSize(16384, 1);
                                                                                                                    this->cycle_tilde_05_buffer->setSampleRate(this->sr);
                                                                                                                    this->cycle_tilde_05_buffer = this->cycle_tilde_05_buffer->allocateIfNeeded();
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_05_perform(
                                                                                                                    number frequency,
                                                                                                                    number phase_offset,
                                                                                                                    SampleValue * out1,
                                                                                                                    SampleValue * out2,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(phase_offset);
                                                                                                                    auto __cycle_tilde_05_f2i = this->cycle_tilde_05_f2i;
                                                                                                                    auto __cycle_tilde_05_buffer = this->cycle_tilde_05_buffer;
                                                                                                                    auto __cycle_tilde_05_phasei = this->cycle_tilde_05_phasei;
                                                                                                                    Index i;
                                                                                                                
                                                                                                                    for (i = 0; i < n; i++) {
                                                                                                                        {
                                                                                                                            uint32_t uint_phase;
                                                                                                                
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    uint_phase = __cycle_tilde_05_phasei;
                                                                                                                                }
                                                                                                                            }
                                                                                                                
                                                                                                                            uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                                            number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                                            number y0 = __cycle_tilde_05_buffer[(Index)idx];
                                                                                                                            number y1 = __cycle_tilde_05_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                                            number y = y0 + frac * (y1 - y0);
                                                                                                                
                                                                                                                            {
                                                                                                                                uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_05_f2i));
                                                                                                                                __cycle_tilde_05_phasei = uint32_add(__cycle_tilde_05_phasei, pincr);
                                                                                                                            }
                                                                                                                
                                                                                                                            out1[(Index)i] = y;
                                                                                                                            out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }
                                                                                                                
                                                                                                                    this->cycle_tilde_05_phasei = __cycle_tilde_05_phasei;
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number cycle_tilde_05_ph_next(number freq, number reset) {
                                                                                                                    {
                                                                                                                        {
                                                                                                                            if (reset >= 0.)
                                                                                                                                this->cycle_tilde_05_ph_currentPhase = reset;
                                                                                                                        }
                                                                                                                    }
                                                                                                                
                                                                                                                    number pincr = freq * this->cycle_tilde_05_ph_conv;
                                                                                                                
                                                                                                                    if (this->cycle_tilde_05_ph_currentPhase < 0.)
                                                                                                                        this->cycle_tilde_05_ph_currentPhase = 1. + this->cycle_tilde_05_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->cycle_tilde_05_ph_currentPhase > 1.)
                                                                                                                        this->cycle_tilde_05_ph_currentPhase = this->cycle_tilde_05_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->cycle_tilde_05_ph_currentPhase;
                                                                                                                    this->cycle_tilde_05_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_05_ph_reset() {
                                                                                                                    this->cycle_tilde_05_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_05_ph_dspsetup() {
                                                                                                                    this->cycle_tilde_05_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_05_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->cycle_tilde_05_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->cycle_tilde_05_phasei = 0;
                                                                                                                    this->cycle_tilde_05_f2i = (number)4294967296 / this->samplerate();
                                                                                                                    this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
                                                                                                                    this->cycle_tilde_05_setupDone = true;
                                                                                                                    this->cycle_tilde_05_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                void cycle_tilde_05_bufferUpdated() {
                                                                                                                    this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    receive_19_output_number = 0;
                                                                                                                    cycle_tilde_05_frequency = 0;
                                                                                                                    cycle_tilde_05_phase_offset = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    cycle_tilde_05_wrap = 0;
                                                                                                                    cycle_tilde_05_ph_currentPhase = 0;
                                                                                                                    cycle_tilde_05_ph_conv = 0;
                                                                                                                    cycle_tilde_05_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number receive_19_output_number;
                                                                                                                    list receive_19_output_list;
                                                                                                                    number cycle_tilde_05_frequency;
                                                                                                                    number cycle_tilde_05_phase_offset;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    Float64BufferRef cycle_tilde_05_buffer;
                                                                                                                    long cycle_tilde_05_wrap;
                                                                                                                    uint32_t cycle_tilde_05_phasei;
                                                                                                                    SampleValue cycle_tilde_05_f2i;
                                                                                                                    number cycle_tilde_05_ph_currentPhase;
                                                                                                                    number cycle_tilde_05_ph_conv;
                                                                                                                    bool cycle_tilde_05_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    class RNBOSubpatcher_4245 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4247;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4245()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4245()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4247* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4247 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                    this->phasor_08_perform(this->phasor_08_freq, out1, n);
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        this->phasor_08_sigbuf = resizeSignal(this->phasor_08_sigbuf, this->maxvs, maxBlockSize);
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->phasor_08_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {}
                                                                                                                
                                                                                                                void phasor_08_perform(number freq, SampleValue * out, Index n) {
                                                                                                                    for (Index i = 0; i < n; i++) {
                                                                                                                        out[(Index)i] = this->phasor_08_ph_next(freq, -1);
                                                                                                                        this->phasor_08_sigbuf[(Index)i] = -1;
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number phasor_08_ph_next(number freq, number reset) {
                                                                                                                    RNBO_UNUSED(reset);
                                                                                                                    number pincr = freq * this->phasor_08_ph_conv;
                                                                                                                
                                                                                                                    if (this->phasor_08_ph_currentPhase < 0.)
                                                                                                                        this->phasor_08_ph_currentPhase = 1. + this->phasor_08_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->phasor_08_ph_currentPhase > 1.)
                                                                                                                        this->phasor_08_ph_currentPhase = this->phasor_08_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->phasor_08_ph_currentPhase;
                                                                                                                    this->phasor_08_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_08_ph_reset() {
                                                                                                                    this->phasor_08_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_08_ph_dspsetup() {
                                                                                                                    this->phasor_08_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_08_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->phasor_08_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->phasor_08_conv = (number)1 / this->samplerate();
                                                                                                                    this->phasor_08_setupDone = true;
                                                                                                                    this->phasor_08_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    receive_20_output_number = 0;
                                                                                                                    phasor_08_freq = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    phasor_08_sigbuf = nullptr;
                                                                                                                    phasor_08_lastLockedPhase = 0;
                                                                                                                    phasor_08_conv = 0;
                                                                                                                    phasor_08_ph_currentPhase = 0;
                                                                                                                    phasor_08_ph_conv = 0;
                                                                                                                    phasor_08_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number receive_20_output_number;
                                                                                                                    list receive_20_output_list;
                                                                                                                    number phasor_08_freq;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    signal phasor_08_sigbuf;
                                                                                                                    number phasor_08_lastLockedPhase;
                                                                                                                    number phasor_08_conv;
                                                                                                                    number phasor_08_ph_currentPhase;
                                                                                                                    number phasor_08_ph_conv;
                                                                                                                    bool phasor_08_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    class RNBOSubpatcher_4246 : public PatcherInterfaceImpl {
                                                                                                                
                                                                                                                friend class RNBOSubpatcher_4247;
                                                                                                                friend class rnbomatic;
                                                                                                                
                                                                                                                public:
                                                                                                                
                                                                                                                RNBOSubpatcher_4246()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                ~RNBOSubpatcher_4246()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                virtual RNBOSubpatcher_4247* getPatcher() const {
                                                                                                                    return static_cast<RNBOSubpatcher_4247 *>(_parentPatcher);
                                                                                                                }
                                                                                                                
                                                                                                                rnbomatic* getTopLevelPatcher() {
                                                                                                                    return this->getPatcher()->getTopLevelPatcher();
                                                                                                                }
                                                                                                                
                                                                                                                void cancelClockEvents()
                                                                                                                {
                                                                                                                }
                                                                                                                
                                                                                                                number wrap(number x, number low, number high) {
                                                                                                                    number lo;
                                                                                                                    number hi;
                                                                                                                
                                                                                                                    if (low == high)
                                                                                                                        return low;
                                                                                                                
                                                                                                                    if (low > high) {
                                                                                                                        hi = low;
                                                                                                                        lo = high;
                                                                                                                    } else {
                                                                                                                        lo = low;
                                                                                                                        hi = high;
                                                                                                                    }
                                                                                                                
                                                                                                                    number range = hi - lo;
                                                                                                                
                                                                                                                    if (x >= lo && x < hi)
                                                                                                                        return x;
                                                                                                                
                                                                                                                    if (range <= 0.000000001)
                                                                                                                        return lo;
                                                                                                                
                                                                                                                    long numWraps = (long)(trunc((x - lo) / range));
                                                                                                                    numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                                                    number result = x - range * numWraps;
                                                                                                                
                                                                                                                    if (result >= hi)
                                                                                                                        return result - range;
                                                                                                                    else
                                                                                                                        return result;
                                                                                                                }
                                                                                                                
                                                                                                                number samplerate() {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumMidiInputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                                                
                                                                                                                Index getNumMidiOutputPorts() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void process(
                                                                                                                    const SampleValue * const* inputs,
                                                                                                                    Index numInputs,
                                                                                                                    SampleValue * const* outputs,
                                                                                                                    Index numOutputs,
                                                                                                                    Index n
                                                                                                                ) {
                                                                                                                    RNBO_UNUSED(numInputs);
                                                                                                                    RNBO_UNUSED(inputs);
                                                                                                                    this->vs = n;
                                                                                                                    this->updateTime(this->getEngine()->getCurrentTime());
                                                                                                                    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                                                    this->phasor_09_perform(this->phasor_09_freq, this->signals[0], n);
                                                                                                                    this->triangle_tilde_04_perform(this->signals[0], this->triangle_tilde_04_duty, out1, n);
                                                                                                                    this->stackprotect_perform(n);
                                                                                                                    this->audioProcessSampleCount += this->vs;
                                                                                                                }
                                                                                                                
                                                                                                                void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                                                    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                                                        Index i;
                                                                                                                
                                                                                                                        for (i = 0; i < 1; i++) {
                                                                                                                            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                                                        }
                                                                                                                
                                                                                                                        this->phasor_09_sigbuf = resizeSignal(this->phasor_09_sigbuf, this->maxvs, maxBlockSize);
                                                                                                                        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                                                        this->didAllocateSignals = true;
                                                                                                                    }
                                                                                                                
                                                                                                                    const bool sampleRateChanged = sampleRate != this->sr;
                                                                                                                    const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                                                    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                                                
                                                                                                                    if (sampleRateChanged || maxvsChanged) {
                                                                                                                        this->vs = maxBlockSize;
                                                                                                                        this->maxvs = maxBlockSize;
                                                                                                                        this->sr = sampleRate;
                                                                                                                        this->invsr = 1 / sampleRate;
                                                                                                                    }
                                                                                                                
                                                                                                                    this->phasor_09_dspsetup(forceDSPSetup);
                                                                                                                
                                                                                                                    if (sampleRateChanged)
                                                                                                                        this->onSampleRateChanged(sampleRate);
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingTarget(MessageTag id) {
                                                                                                                    switch (id) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        this->setProbingIndex(-1);
                                                                                                                        break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void setProbingIndex(ProbingIndex ) {}
                                                                                                                
                                                                                                                Index getProbingChannels(MessageTag outletId) const {
                                                                                                                    RNBO_UNUSED(outletId);
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getIsMuted()  {
                                                                                                                    return this->isMuted;
                                                                                                                }
                                                                                                                
                                                                                                                void setIsMuted(Index v)  {
                                                                                                                    this->isMuted = v;
                                                                                                                }
                                                                                                                
                                                                                                                Index getPatcherSerial() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void getState(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void setState() {}
                                                                                                                
                                                                                                                void getPreset(PatcherStateInterface& ) {}
                                                                                                                
                                                                                                                void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                                                
                                                                                                                void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                                                
                                                                                                                void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                                                
                                                                                                                void onSampleRateChanged(double ) {}
                                                                                                                
                                                                                                                void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                                                
                                                                                                                void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                                                
                                                                                                                void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                                                    this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                                                }
                                                                                                                
                                                                                                                void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                                                    this->setParameterValueNormalized(index, value, time);
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return 0;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalInParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumSignalOutParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterIndex getNumParameters() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return "bogus";
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                                                
                                                                                                                void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                                                    this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                                                }
                                                                                                                
                                                                                                                void setParameterOffset(ParameterIndex offset) {
                                                                                                                    this->parameterOffset = offset;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                                                    if (steps == 1) {
                                                                                                                        if (normalizedValue > 0) {
                                                                                                                            normalizedValue = 1.;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                                                        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                                                        normalizedValue = numberOfSteps * oneStep;
                                                                                                                    }
                                                                                                                
                                                                                                                    return normalizedValue;
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                                                
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return value;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                                                    this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                                                }
                                                                                                                
                                                                                                                void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                                                
                                                                                                                void processOutletEvent(
                                                                                                                    EngineLink* sender,
                                                                                                                    OutletIndex index,
                                                                                                                    ParameterValue value,
                                                                                                                    MillisecondTime time
                                                                                                                ) {
                                                                                                                    this->updateTime(time);
                                                                                                                    this->processOutletAtCurrentTime(sender, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                                                
                                                                                                                void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                                                
                                                                                                                void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                                                
                                                                                                                MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                                                    switch (tag) {
                                                                                                                
                                                                                                                    }
                                                                                                                
                                                                                                                    return nullptr;
                                                                                                                }
                                                                                                                
                                                                                                                DataRef* getDataRef(DataRefIndex index)  {
                                                                                                                    switch (index) {
                                                                                                                    default:
                                                                                                                        {
                                                                                                                        return nullptr;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                DataRefIndex getNumDataRefs() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                                                
                                                                                                                void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                                                
                                                                                                                void initialize() {
                                                                                                                    this->assign_defaults();
                                                                                                                    this->setState();
                                                                                                                }
                                                                                                                
                                                                                                                protected:
                                                                                                                
                                                                                                                number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                                                    return ms * sampleRate * 0.001;
                                                                                                                }
                                                                                                                
                                                                                                                MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                                                    return samps * (this->invsr * 1000);
                                                                                                                }
                                                                                                                
                                                                                                                Index getMaxBlockSize() const {
                                                                                                                    return this->maxvs;
                                                                                                                }
                                                                                                                
                                                                                                                number getSampleRate() const {
                                                                                                                    return this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                bool hasFixedVectorSize() const {
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumInputChannels() const {
                                                                                                                    return 0;
                                                                                                                }
                                                                                                                
                                                                                                                Index getNumOutputChannels() const {
                                                                                                                    return 1;
                                                                                                                }
                                                                                                                
                                                                                                                void initializeObjects() {}
                                                                                                                
                                                                                                                void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                                                    this->getEngine()->sendOutlet(this, index, value);
                                                                                                                }
                                                                                                                
                                                                                                                void startup() {}
                                                                                                                
                                                                                                                void allocateDataRefs() {}
                                                                                                                
                                                                                                                void phasor_09_perform(number freq, SampleValue * out, Index n) {
                                                                                                                    for (Index i = 0; i < n; i++) {
                                                                                                                        out[(Index)i] = this->phasor_09_ph_next(freq, -1);
                                                                                                                        this->phasor_09_sigbuf[(Index)i] = -1;
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void triangle_tilde_04_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                                                    RNBO_UNUSED(duty);
                                                                                                                    Index i;
                                                                                                                
                                                                                                                    for (i = 0; i < n; i++) {
                                                                                                                        number p1 = 0.5;
                                                                                                                        auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                                                        p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                                                
                                                                                                                        if (wrappedPhase < p1) {
                                                                                                                            out1[(Index)i] = wrappedPhase / p1;
                                                                                                                            continue;
                                                                                                                        } else {
                                                                                                                            out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                
                                                                                                                void stackprotect_perform(Index n) {
                                                                                                                    RNBO_UNUSED(n);
                                                                                                                    auto __stackprotect_count = this->stackprotect_count;
                                                                                                                    __stackprotect_count = 0;
                                                                                                                    this->stackprotect_count = __stackprotect_count;
                                                                                                                }
                                                                                                                
                                                                                                                number phasor_09_ph_next(number freq, number reset) {
                                                                                                                    RNBO_UNUSED(reset);
                                                                                                                    number pincr = freq * this->phasor_09_ph_conv;
                                                                                                                
                                                                                                                    if (this->phasor_09_ph_currentPhase < 0.)
                                                                                                                        this->phasor_09_ph_currentPhase = 1. + this->phasor_09_ph_currentPhase;
                                                                                                                
                                                                                                                    if (this->phasor_09_ph_currentPhase > 1.)
                                                                                                                        this->phasor_09_ph_currentPhase = this->phasor_09_ph_currentPhase - 1.;
                                                                                                                
                                                                                                                    number tmp = this->phasor_09_ph_currentPhase;
                                                                                                                    this->phasor_09_ph_currentPhase += pincr;
                                                                                                                    return tmp;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_09_ph_reset() {
                                                                                                                    this->phasor_09_ph_currentPhase = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_09_ph_dspsetup() {
                                                                                                                    this->phasor_09_ph_conv = (number)1 / this->sr;
                                                                                                                }
                                                                                                                
                                                                                                                void phasor_09_dspsetup(bool force) {
                                                                                                                    if ((bool)(this->phasor_09_setupDone) && (bool)(!(bool)(force)))
                                                                                                                        return;
                                                                                                                
                                                                                                                    this->phasor_09_conv = (number)1 / this->samplerate();
                                                                                                                    this->phasor_09_setupDone = true;
                                                                                                                    this->phasor_09_ph_dspsetup();
                                                                                                                }
                                                                                                                
                                                                                                                bool stackprotect_check() {
                                                                                                                    this->stackprotect_count++;
                                                                                                                
                                                                                                                    if (this->stackprotect_count > 128) {
                                                                                                                        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                                                        return true;
                                                                                                                    }
                                                                                                                
                                                                                                                    return false;
                                                                                                                }
                                                                                                                
                                                                                                                void updateTime(MillisecondTime time) {
                                                                                                                    this->_currentTime = time;
                                                                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                                                
                                                                                                                    if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                                                        this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                }
                                                                                                                
                                                                                                                void assign_defaults()
                                                                                                                {
                                                                                                                    triangle_tilde_04_phase = 0;
                                                                                                                    triangle_tilde_04_duty = 0.5;
                                                                                                                    phasor_09_freq = 0;
                                                                                                                    receive_21_output_number = 0;
                                                                                                                    _currentTime = 0;
                                                                                                                    audioProcessSampleCount = 0;
                                                                                                                    sampleOffsetIntoNextAudioBuffer = 0;
                                                                                                                    zeroBuffer = nullptr;
                                                                                                                    dummyBuffer = nullptr;
                                                                                                                    signals[0] = nullptr;
                                                                                                                    didAllocateSignals = 0;
                                                                                                                    vs = 0;
                                                                                                                    maxvs = 0;
                                                                                                                    sr = 44100;
                                                                                                                    invsr = 0.00002267573696;
                                                                                                                    phasor_09_sigbuf = nullptr;
                                                                                                                    phasor_09_lastLockedPhase = 0;
                                                                                                                    phasor_09_conv = 0;
                                                                                                                    phasor_09_ph_currentPhase = 0;
                                                                                                                    phasor_09_ph_conv = 0;
                                                                                                                    phasor_09_setupDone = false;
                                                                                                                    stackprotect_count = 0;
                                                                                                                    _voiceIndex = 0;
                                                                                                                    _noteNumber = 0;
                                                                                                                    isMuted = 1;
                                                                                                                    parameterOffset = 0;
                                                                                                                }
                                                                                                                
                                                                                                                // member variables
                                                                                                                
                                                                                                                    number triangle_tilde_04_phase;
                                                                                                                    number triangle_tilde_04_duty;
                                                                                                                    number phasor_09_freq;
                                                                                                                    number receive_21_output_number;
                                                                                                                    list receive_21_output_list;
                                                                                                                    MillisecondTime _currentTime;
                                                                                                                    SampleIndex audioProcessSampleCount;
                                                                                                                    SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                                                    signal zeroBuffer;
                                                                                                                    signal dummyBuffer;
                                                                                                                    SampleValue * signals[1];
                                                                                                                    bool didAllocateSignals;
                                                                                                                    Index vs;
                                                                                                                    Index maxvs;
                                                                                                                    number sr;
                                                                                                                    number invsr;
                                                                                                                    signal phasor_09_sigbuf;
                                                                                                                    number phasor_09_lastLockedPhase;
                                                                                                                    number phasor_09_conv;
                                                                                                                    number phasor_09_ph_currentPhase;
                                                                                                                    number phasor_09_ph_conv;
                                                                                                                    bool phasor_09_setupDone;
                                                                                                                    number stackprotect_count;
                                                                                                                    Index _voiceIndex;
                                                                                                                    Int _noteNumber;
                                                                                                                    Index isMuted;
                                                                                                                    ParameterIndex parameterOffset;
                                                                                                                
                                                                                    };
                                                                                    
                                                                                    RNBOSubpatcher_4247()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4247()
                                                                                    {
                                                                                        delete this->p_16;
                                                                                        delete this->p_17;
                                                                                        delete this->p_18;
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4248* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4248 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->p_16_perform(this->signals[0], n);
                                                                                        this->p_17_perform(this->signals[1], n);
                                                                                        this->p_18_perform(this->signals[2], n);
                                                                                    
                                                                                        this->selector_04_perform(
                                                                                            this->selector_04_onoff,
                                                                                            this->zeroBuffer,
                                                                                            this->signals[0],
                                                                                            this->signals[1],
                                                                                            this->signals[2],
                                                                                            out1,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 3; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        RNBO_UNUSED(forceDSPSetup);
                                                                                        this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                        this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                        this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {
                                                                                        this->p_16 = new RNBOSubpatcher_4244();
                                                                                        this->p_16->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_16->initialize();
                                                                                        this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
                                                                                        this->p_17 = new RNBOSubpatcher_4245();
                                                                                        this->p_17->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_17->initialize();
                                                                                        this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
                                                                                        this->p_18 = new RNBOSubpatcher_4246();
                                                                                        this->p_18->setEngineAndPatcher(this->getEngine(), this);
                                                                                        this->p_18->initialize();
                                                                                        this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
                                                                                    }
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& preset) {
                                                                                        this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                                        this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                                        this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                                                    }
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processTempoEvent(time, tempo);
                                                                                        this->p_17->processTempoEvent(time, tempo);
                                                                                        this->p_18->processTempoEvent(time, tempo);
                                                                                    }
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processTransportEvent(time, state);
                                                                                        this->p_17->processTransportEvent(time, state);
                                                                                        this->p_18->processTransportEvent(time, state);
                                                                                    }
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processBeatTimeEvent(time, beattime);
                                                                                        this->p_17->processBeatTimeEvent(time, beattime);
                                                                                        this->p_18->processBeatTimeEvent(time, beattime);
                                                                                    }
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processTimeSignatureEvent(time, numerator, denominator);
                                                                                        this->p_17->processTimeSignatureEvent(time, numerator, denominator);
                                                                                        this->p_18->processTimeSignatureEvent(time, numerator, denominator);
                                                                                    }
                                                                                    
                                                                                    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                                        RNBO_UNUSED(v);
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                this->p_16->setParameterValue(index, v, time);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                this->p_17->setParameterValue(index, v, time);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                this->p_18->setParameterValue(index, v, time);
                                                                                    
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                return this->p_16->getParameterValue(index);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                return this->p_17->getParameterValue(index);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                return this->p_18->getParameterValue(index);
                                                                                    
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters() + this->p_18->getNumParameters();
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                return this->p_16->getParameterName(index);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                return this->p_17->getParameterName(index);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                return this->p_18->getParameterName(index);
                                                                                    
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                return this->p_16->getParameterId(index);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                return this->p_17->getParameterId(index);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                return this->p_18->getParameterId(index);
                                                                                    
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                                        {
                                                                                            switch (index) {
                                                                                            default:
                                                                                                {
                                                                                                index -= 0;
                                                                                    
                                                                                                if (index < this->p_16->getNumParameters())
                                                                                                    this->p_16->getParameterInfo(index, info);
                                                                                    
                                                                                                index -= this->p_16->getNumParameters();
                                                                                    
                                                                                                if (index < this->p_17->getNumParameters())
                                                                                                    this->p_17->getParameterInfo(index, info);
                                                                                    
                                                                                                index -= this->p_17->getNumParameters();
                                                                                    
                                                                                                if (index < this->p_18->getNumParameters())
                                                                                                    this->p_18->getParameterInfo(index, info);
                                                                                    
                                                                                                break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                                        if (subpatcher == this->p_16)
                                                                                            return 0;
                                                                                    
                                                                                        if (subpatcher == this->p_17)
                                                                                            return 0 + this->p_16->getNumParameters();
                                                                                    
                                                                                        if (subpatcher == this->p_18)
                                                                                            return 0 + this->p_16->getNumParameters() + this->p_17->getNumParameters();
                                                                                    
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                return this->p_16->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                return this->p_17->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                return this->p_18->convertToNormalizedParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                return this->p_16->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                return this->p_17->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                return this->p_18->convertFromNormalizedParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            index -= 0;
                                                                                    
                                                                                            if (index < this->p_16->getNumParameters())
                                                                                                return this->p_16->constrainParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_16->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_17->getNumParameters())
                                                                                                return this->p_17->constrainParameterValue(index, value);
                                                                                    
                                                                                            index -= this->p_17->getNumParameters();
                                                                                    
                                                                                            if (index < this->p_18->getNumParameters())
                                                                                                return this->p_18->constrainParameterValue(index, value);
                                                                                    
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processNumMessage(tag, objectId, time, payload);
                                                                                        this->p_17->processNumMessage(tag, objectId, time, payload);
                                                                                        this->p_18->processNumMessage(tag, objectId, time, payload);
                                                                                    }
                                                                                    
                                                                                    void processListMessage(
                                                                                        MessageTag tag,
                                                                                        MessageTag objectId,
                                                                                        MillisecondTime time,
                                                                                        const list& payload
                                                                                    ) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processListMessage(tag, objectId, time, payload);
                                                                                        this->p_17->processListMessage(tag, objectId, time, payload);
                                                                                        this->p_18->processListMessage(tag, objectId, time, payload);
                                                                                    }
                                                                                    
                                                                                    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                                        RNBO_UNUSED(objectId);
                                                                                        this->updateTime(time);
                                                                                        this->p_16->processBangMessage(tag, objectId, time);
                                                                                        this->p_17->processBangMessage(tag, objectId, time);
                                                                                        this->p_18->processBangMessage(tag, objectId, time);
                                                                                    }
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        auto subpatchResult_0 = this->p_16->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_0)
                                                                                            return subpatchResult_0;
                                                                                    
                                                                                        auto subpatchResult_1 = this->p_17->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_1)
                                                                                            return subpatchResult_1;
                                                                                    
                                                                                        auto subpatchResult_2 = this->p_18->resolveTag(tag);
                                                                                    
                                                                                        if (subpatchResult_2)
                                                                                            return subpatchResult_2;
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->p_16->processDataViewUpdate(index, time);
                                                                                        this->p_17->processDataViewUpdate(index, time);
                                                                                        this->p_18->processDataViewUpdate(index, time);
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {
                                                                                        this->p_16->initializeObjects();
                                                                                        this->p_17->initializeObjects();
                                                                                        this->p_18->initializeObjects();
                                                                                    }
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        this->p_16->startup();
                                                                                        this->p_17->startup();
                                                                                        this->p_18->startup();
                                                                                    }
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->p_16->allocateDataRefs();
                                                                                        this->p_17->allocateDataRefs();
                                                                                        this->p_18->allocateDataRefs();
                                                                                    }
                                                                                    
                                                                                    void p_16_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: sin
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_16->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void p_17_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: phasor
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_17->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void p_18_perform(SampleValue * out1, Index n) {
                                                                                        // subpatcher: triangle
                                                                                        SampleArray<1> outs = {out1};
                                                                                    
                                                                                        this->p_18->process(nullptr, 0, outs, 1, n);
                                                                                    }
                                                                                    
                                                                                    void selector_04_perform(
                                                                                        number onoff,
                                                                                        const SampleValue * in1,
                                                                                        const SampleValue * in2,
                                                                                        const SampleValue * in3,
                                                                                        const SampleValue * in4,
                                                                                        SampleValue * out,
                                                                                        Index n
                                                                                    ) {
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            if (onoff >= 1 && onoff < 2)
                                                                                                out[(Index)i] = in1[(Index)i];
                                                                                            else if (onoff >= 2 && onoff < 3)
                                                                                                out[(Index)i] = in2[(Index)i];
                                                                                            else if (onoff >= 3 && onoff < 4)
                                                                                                out[(Index)i] = in3[(Index)i];
                                                                                            else if (onoff >= 4 && onoff < 5)
                                                                                                out[(Index)i] = in4[(Index)i];
                                                                                            else
                                                                                                out[(Index)i] = 0;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_22_output_number = 0;
                                                                                        selector_04_onoff = 1;
                                                                                        p_16_target = 0;
                                                                                        p_17_target = 0;
                                                                                        p_18_target = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        signals[1] = nullptr;
                                                                                        signals[2] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_22_output_number;
                                                                                        list receive_22_output_list;
                                                                                        number selector_04_onoff;
                                                                                        number p_16_target;
                                                                                        number p_17_target;
                                                                                        number p_18_target;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[3];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                        RNBOSubpatcher_4244* p_16;
                                                                                        RNBOSubpatcher_4245* p_17;
                                                                                        RNBOSubpatcher_4246* p_18;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4248()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4248()
                                                            {
                                                                delete this->p_19;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4249* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4249 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_19_perform(out1, n);
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_19 = new RNBOSubpatcher_4247();
                                                                this->p_19->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_19->initialize();
                                                                this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_19->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_19->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_19->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_19->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        this->p_19->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        return this->p_19->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_19->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        return this->p_19->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        return this->p_19->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_19->getNumParameters())
                                                                            this->p_19->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_19)
                                                                    return 0;
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        return this->p_19->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        return this->p_19->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_19->getNumParameters())
                                                                        return this->p_19->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_19->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_19->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_19->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_19->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_19->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_19->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_19->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_19->allocateDataRefs();
                                                            }
                                                            
                                                            void p_19_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: generator
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_19->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                p_19_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number p_19_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4247* p_19;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4249()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4249()
                                        {
                                            delete this->p_20;
                                        }
                                        
                                        virtual RNBOSubpatcher_4252* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4252 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_20_perform(this->signals[0], n);
                                            this->dspexpr_06_perform(this->signals[0], this->dspexpr_06_in2, this->signals[1], n);
                                            this->signalgate_03_perform(this->signalgate_03_onoff, this->signals[1], this->signals[0], n);
                                            this->dspexpr_05_perform(this->dspexpr_05_in1, this->signals[0], out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                Index i;
                                        
                                                for (i = 0; i < 2; i++) {
                                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                }
                                        
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_20->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_20 = new RNBOSubpatcher_4248();
                                            this->p_20->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_20->initialize();
                                            this->p_20->setParameterOffset(this->getParameterOffset(this->p_20));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_20->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_20->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_20->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_20->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_20->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    this->p_20->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    return this->p_20->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_20->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    return this->p_20->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    return this->p_20->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_20->getNumParameters())
                                                        this->p_20->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_20)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    return this->p_20->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    return this->p_20->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_20->getNumParameters())
                                                    return this->p_20->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_20->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_20->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_20->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_20->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_20->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_20->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_20->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_20->allocateDataRefs();
                                        }
                                        
                                        void dspexpr_05_in1_set(number v) {
                                            this->dspexpr_05_in1 = v;
                                        }
                                        
                                        void receive_23_output_number_set(number v) {
                                            this->receive_23_output_number = v;
                                            this->dspexpr_05_in1_set(v);
                                        }
                                        
                                        void p_20_perform(SampleValue * out1, Index n) {
                                            // subpatcher: FMLFO
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_20->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void dspexpr_06_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                                            }
                                        }
                                        
                                        void signalgate_03_perform(number onoff, const SampleValue * input, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                if (onoff == 1) {
                                                    out1[(Index)i] = input[(Index)i];
                                                } else {
                                                    out1[(Index)i] = 0;
                                                }
                                            }
                                        }
                                        
                                        void dspexpr_05_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
                                            Index i;
                                        
                                            for (i = 0; i < n; i++) {
                                                out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
                                            }
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            receive_23_output_number = 0;
                                            dspexpr_05_in1 = 0;
                                            dspexpr_05_in2 = 0;
                                            signalgate_03_onoff = 0;
                                            receive_24_output_number = 0;
                                            p_20_target = 0;
                                            dspexpr_06_in1 = 0;
                                            dspexpr_06_in2 = 0;
                                            receive_25_output_number = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            signals[0] = nullptr;
                                            signals[1] = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number receive_23_output_number;
                                            list receive_23_output_list;
                                            number dspexpr_05_in1;
                                            number dspexpr_05_in2;
                                            number signalgate_03_onoff;
                                            number receive_24_output_number;
                                            list receive_24_output_list;
                                            number p_20_target;
                                            number dspexpr_06_in1;
                                            number dspexpr_06_in2;
                                            number receive_25_output_number;
                                            list receive_25_output_list;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            SampleValue * signals[2];
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4248* p_20;
                                        
                        };
                        
                        RNBOSubpatcher_4252()
                        {
                        }
                        
                        ~RNBOSubpatcher_4252()
                        {
                            delete this->p_21;
                        }
                        
                        virtual RNBOSubpatcher_4254* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4254 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        number wrap(number x, number low, number high) {
                            number lo;
                            number hi;
                        
                            if (low == high)
                                return low;
                        
                            if (low > high) {
                                hi = low;
                                lo = high;
                            } else {
                                lo = low;
                                hi = high;
                            }
                        
                            number range = hi - lo;
                        
                            if (x >= lo && x < hi)
                                return x;
                        
                            if (range <= 0.000000001)
                                return lo;
                        
                            long numWraps = (long)(trunc((x - lo) / range));
                            numWraps = numWraps - ((x < lo ? 1 : 0));
                            number result = x - range * numWraps;
                        
                            if (result >= hi)
                                return result - range;
                            else
                                return result;
                        }
                        
                        number samplerate() {
                            return this->sr;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->p_21_perform(this->signals[0], n);
                            this->phasor_10_perform(this->signals[0], this->signals[1], n);
                            this->triangle_tilde_05_perform(this->signals[1], this->triangle_tilde_05_duty, out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 2; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->phasor_10_sigbuf = resizeSignal(this->phasor_10_sigbuf, this->maxvs, maxBlockSize);
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            this->phasor_10_dspsetup(forceDSPSetup);
                            this->p_21->prepareToProcess(sampleRate, maxBlockSize, force);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {
                            this->p_21 = new RNBOSubpatcher_4249();
                            this->p_21->setEngineAndPatcher(this->getEngine(), this);
                            this->p_21->initialize();
                            this->p_21->setParameterOffset(this->getParameterOffset(this->p_21));
                        }
                        
                        void getPreset(PatcherStateInterface& preset) {
                            this->p_21->getPreset(getSubState(getSubState(preset, "__sps"), "freq"));
                        }
                        
                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                            this->updateTime(time);
                            this->p_21->processTempoEvent(time, tempo);
                        }
                        
                        void processTransportEvent(MillisecondTime time, TransportState state) {
                            this->updateTime(time);
                            this->p_21->processTransportEvent(time, state);
                        }
                        
                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                            this->updateTime(time);
                            this->p_21->processBeatTimeEvent(time, beattime);
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                            this->updateTime(time);
                            this->p_21->processTimeSignatureEvent(time, numerator, denominator);
                        }
                        
                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                            RNBO_UNUSED(v);
                            this->updateTime(time);
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    this->p_21->setParameterValue(index, v, time);
                        
                                break;
                                }
                            }
                        }
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    return this->p_21->getParameterValue(index);
                        
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0 + this->p_21->getNumParameters();
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    return this->p_21->getParameterName(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    return this->p_21->getParameterId(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                            {
                                switch (index) {
                                default:
                                    {
                                    index -= 0;
                        
                                    if (index < this->p_21->getNumParameters())
                                        this->p_21->getParameterInfo(index, info);
                        
                                    break;
                                    }
                                }
                            }
                        }
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                            if (subpatcher == this->p_21)
                                return 0;
                        
                            return 0;
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    return this->p_21->convertToNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    return this->p_21->convertFromNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_21->getNumParameters())
                                    return this->p_21->constrainParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_21->processNumMessage(tag, objectId, time, payload);
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_21->processListMessage(tag, objectId, time, payload);
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_21->processBangMessage(tag, objectId, time);
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            auto subpatchResult_0 = this->p_21->resolveTag(tag);
                        
                            if (subpatchResult_0)
                                return subpatchResult_0;
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->p_21->processDataViewUpdate(index, time);
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->p_21->initializeObjects();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->p_21->startup();
                        }
                        
                        void allocateDataRefs() {
                            this->p_21->allocateDataRefs();
                        }
                        
                        void p_21_target_AMLFOfreq_number_set(number v) {
                            this->p_21->updateTime(this->_currentTime);
                            this->p_21->receive_23_output_number_set(v);
                        }
                        
                        void p_21_perform(SampleValue * out1, Index n) {
                            // subpatcher: freq
                            SampleArray<1> outs = {out1};
                        
                            this->p_21->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void phasor_10_perform(const Sample * freq, SampleValue * out, Index n) {
                            for (Index i = 0; i < n; i++) {
                                out[(Index)i] = this->phasor_10_ph_next(freq[(Index)i], -1);
                                this->phasor_10_sigbuf[(Index)i] = -1;
                            }
                        }
                        
                        void triangle_tilde_05_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                            RNBO_UNUSED(duty);
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                number p1 = 0.5;
                                auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                        
                                if (wrappedPhase < p1) {
                                    out1[(Index)i] = wrappedPhase / p1;
                                    continue;
                                } else {
                                    out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                    continue;
                                }
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        number phasor_10_ph_next(number freq, number reset) {
                            RNBO_UNUSED(reset);
                            number pincr = freq * this->phasor_10_ph_conv;
                        
                            if (this->phasor_10_ph_currentPhase < 0.)
                                this->phasor_10_ph_currentPhase = 1. + this->phasor_10_ph_currentPhase;
                        
                            if (this->phasor_10_ph_currentPhase > 1.)
                                this->phasor_10_ph_currentPhase = this->phasor_10_ph_currentPhase - 1.;
                        
                            number tmp = this->phasor_10_ph_currentPhase;
                            this->phasor_10_ph_currentPhase += pincr;
                            return tmp;
                        }
                        
                        void phasor_10_ph_reset() {
                            this->phasor_10_ph_currentPhase = 0;
                        }
                        
                        void phasor_10_ph_dspsetup() {
                            this->phasor_10_ph_conv = (number)1 / this->sr;
                        }
                        
                        void phasor_10_dspsetup(bool force) {
                            if ((bool)(this->phasor_10_setupDone) && (bool)(!(bool)(force)))
                                return;
                        
                            this->phasor_10_conv = (number)1 / this->samplerate();
                            this->phasor_10_setupDone = true;
                            this->phasor_10_ph_dspsetup();
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            triangle_tilde_05_phase = 0;
                            triangle_tilde_05_duty = 0.5;
                            phasor_10_freq = 0;
                            p_21_target = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            phasor_10_sigbuf = nullptr;
                            phasor_10_lastLockedPhase = 0;
                            phasor_10_conv = 0;
                            phasor_10_ph_currentPhase = 0;
                            phasor_10_ph_conv = 0;
                            phasor_10_setupDone = false;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number triangle_tilde_05_phase;
                            number triangle_tilde_05_duty;
                            number phasor_10_freq;
                            number p_21_target;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[2];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            signal phasor_10_sigbuf;
                            number phasor_10_lastLockedPhase;
                            number phasor_10_conv;
                            number phasor_10_ph_currentPhase;
                            number phasor_10_ph_conv;
                            bool phasor_10_setupDone;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                            RNBOSubpatcher_4249* p_21;
                        
            };
            
            RNBOSubpatcher_4254()
            {
            }
            
            ~RNBOSubpatcher_4254()
            {
                delete this->p_22;
                delete this->p_23;
                delete this->p_24;
            }
            
            virtual RNBOSubpatcher_4291* getPatcher() const {
                return static_cast<RNBOSubpatcher_4291 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->p_22_perform(this->signals[0], n);
                this->p_23_perform(this->signals[1], n);
                this->p_24_perform(this->signals[2], n);
            
                this->selector_05_perform(
                    this->selector_05_onoff,
                    this->zeroBuffer,
                    this->signals[0],
                    this->signals[1],
                    this->signals[2],
                    out1,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 3; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_22->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_23->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_24->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_22 = new RNBOSubpatcher_4250();
                this->p_22->setEngineAndPatcher(this->getEngine(), this);
                this->p_22->initialize();
                this->p_22->setParameterOffset(this->getParameterOffset(this->p_22));
                this->p_23 = new RNBOSubpatcher_4251();
                this->p_23->setEngineAndPatcher(this->getEngine(), this);
                this->p_23->initialize();
                this->p_23->setParameterOffset(this->getParameterOffset(this->p_23));
                this->p_24 = new RNBOSubpatcher_4252();
                this->p_24->setEngineAndPatcher(this->getEngine(), this);
                this->p_24->initialize();
                this->p_24->setParameterOffset(this->getParameterOffset(this->p_24));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_22->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                this->p_23->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                this->p_24->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->p_22->processTempoEvent(time, tempo);
                this->p_23->processTempoEvent(time, tempo);
                this->p_24->processTempoEvent(time, tempo);
            }
            
            void processTransportEvent(MillisecondTime time, TransportState state) {
                this->updateTime(time);
                this->p_22->processTransportEvent(time, state);
                this->p_23->processTransportEvent(time, state);
                this->p_24->processTransportEvent(time, state);
            }
            
            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                this->updateTime(time);
                this->p_22->processBeatTimeEvent(time, beattime);
                this->p_23->processBeatTimeEvent(time, beattime);
                this->p_24->processBeatTimeEvent(time, beattime);
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                this->updateTime(time);
                this->p_22->processTimeSignatureEvent(time, numerator, denominator);
                this->p_23->processTimeSignatureEvent(time, numerator, denominator);
                this->p_24->processTimeSignatureEvent(time, numerator, denominator);
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        this->p_22->setParameterValue(index, v, time);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        this->p_23->setParameterValue(index, v, time);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        this->p_24->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->getParameterValue(index);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->getParameterValue(index);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_22->getNumParameters() + this->p_23->getNumParameters() + this->p_24->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->getParameterName(index);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->getParameterName(index);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->getParameterId(index);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->getParameterId(index);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_22->getNumParameters())
                            this->p_22->getParameterInfo(index, info);
            
                        index -= this->p_22->getNumParameters();
            
                        if (index < this->p_23->getNumParameters())
                            this->p_23->getParameterInfo(index, info);
            
                        index -= this->p_23->getNumParameters();
            
                        if (index < this->p_24->getNumParameters())
                            this->p_24->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_22)
                    return 0;
            
                if (subpatcher == this->p_23)
                    return 0 + this->p_22->getNumParameters();
            
                if (subpatcher == this->p_24)
                    return 0 + this->p_22->getNumParameters() + this->p_23->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->constrainParameterValue(index, value);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->constrainParameterValue(index, value);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_22->processNumMessage(tag, objectId, time, payload);
                this->p_23->processNumMessage(tag, objectId, time, payload);
                this->p_24->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_22->processListMessage(tag, objectId, time, payload);
                this->p_23->processListMessage(tag, objectId, time, payload);
                this->p_24->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_22->processBangMessage(tag, objectId, time);
                this->p_23->processBangMessage(tag, objectId, time);
                this->p_24->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                auto subpatchResult_0 = this->p_22->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_23->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                auto subpatchResult_2 = this->p_24->resolveTag(tag);
            
                if (subpatchResult_2)
                    return subpatchResult_2;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_22->processDataViewUpdate(index, time);
                this->p_23->processDataViewUpdate(index, time);
                this->p_24->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->p_22->initializeObjects();
                this->p_23->initializeObjects();
                this->p_24->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_22->startup();
                this->p_23->startup();
                this->p_24->startup();
            }
            
            void allocateDataRefs() {
                this->p_22->allocateDataRefs();
                this->p_23->allocateDataRefs();
                this->p_24->allocateDataRefs();
            }
            
            void selector_05_onoff_set(number v) {
                this->selector_05_onoff = v;
            }
            
            void receive_26_output_number_set(number v) {
                this->receive_26_output_number = v;
                this->selector_05_onoff_set(v);
            }
            
            void p_22_target_AMLFOfreq_number_set(number v) {
                this->p_22->updateTime(this->_currentTime);
                this->p_22->p_09_target_AMLFOfreq_number_set(v);
            }
            
            void p_23_target_AMLFOfreq_number_set(number v) {
                this->p_23->updateTime(this->_currentTime);
                this->p_23->p_15_target_AMLFOfreq_number_set(v);
            }
            
            void p_24_target_AMLFOfreq_number_set(number v) {
                this->p_24->updateTime(this->_currentTime);
                this->p_24->p_21_target_AMLFOfreq_number_set(v);
            }
            
            void p_22_perform(SampleValue * out1, Index n) {
                // subpatcher: sin
                SampleArray<1> outs = {out1};
            
                this->p_22->process(nullptr, 0, outs, 1, n);
            }
            
            void p_23_perform(SampleValue * out1, Index n) {
                // subpatcher: phasor
                SampleArray<1> outs = {out1};
            
                this->p_23->process(nullptr, 0, outs, 1, n);
            }
            
            void p_24_perform(SampleValue * out1, Index n) {
                // subpatcher: triangle
                SampleArray<1> outs = {out1};
            
                this->p_24->process(nullptr, 0, outs, 1, n);
            }
            
            void selector_05_perform(
                number onoff,
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (onoff >= 1 && onoff < 2)
                        out[(Index)i] = in1[(Index)i];
                    else if (onoff >= 2 && onoff < 3)
                        out[(Index)i] = in2[(Index)i];
                    else if (onoff >= 3 && onoff < 4)
                        out[(Index)i] = in3[(Index)i];
                    else if (onoff >= 4 && onoff < 5)
                        out[(Index)i] = in4[(Index)i];
                    else
                        out[(Index)i] = 0;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                receive_26_output_number = 0;
                selector_05_onoff = 1;
                p_22_target = 0;
                p_23_target = 0;
                p_24_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number receive_26_output_number;
                list receive_26_output_list;
                number selector_05_onoff;
                number p_22_target;
                number p_23_target;
                number p_24_target;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[3];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_4250* p_22;
                RNBOSubpatcher_4251* p_23;
                RNBOSubpatcher_4252* p_24;
            
    };
    
    RNBOSubpatcher_4291()
    {
    }
    
    ~RNBOSubpatcher_4291()
    {
        delete this->p_25;
        delete this->p_26;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        this->p_25_perform(this->signals[0], n);
        this->p_26_perform(this->signals[1], n);
        this->dspexpr_08_perform(in1, this->signals[1], this->signals[2], n);
        this->dspexpr_09_perform(this->signals[2], this->dspexpr_09_in2, this->signals[1], n);
        this->selector_07_perform(this->selector_07_onoff, in1, this->signals[1], this->signals[2], n);
        this->dspexpr_07_perform(this->signals[2], this->signals[0], this->signals[1], n);
        this->dspexpr_10_perform(this->signals[1], this->dspexpr_10_in2, this->signals[0], n);
        this->selector_06_perform(this->selector_06_onoff, this->signals[2], this->signals[0], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 3; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_25->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_26->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_25 = new RNBOSubpatcher_4253();
        this->p_25->setEngineAndPatcher(this->getEngine(), this);
        this->p_25->initialize();
        this->p_25->setParameterOffset(this->getParameterOffset(this->p_25));
        this->p_26 = new RNBOSubpatcher_4254();
        this->p_26->setEngineAndPatcher(this->getEngine(), this);
        this->p_26->initialize();
        this->p_26->setParameterOffset(this->getParameterOffset(this->p_26));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_25->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
        this->p_26->getPreset(getSubState(getSubState(preset, "__sps"), "generator[1]"));
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_25->processTempoEvent(time, tempo);
        this->p_26->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_25->processTransportEvent(time, state);
        this->p_26->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_25->processBeatTimeEvent(time, beattime);
        this->p_26->processBeatTimeEvent(time, beattime);
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_25->processTimeSignatureEvent(time, numerator, denominator);
        this->p_26->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                this->p_25->setParameterValue(index, v, time);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                this->p_26->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->getParameterValue(index);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_25->getNumParameters() + this->p_26->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->getParameterName(index);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->getParameterId(index);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_25->getNumParameters())
                    this->p_25->getParameterInfo(index, info);
    
                index -= this->p_25->getNumParameters();
    
                if (index < this->p_26->getNumParameters())
                    this->p_26->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_25)
            return 0;
    
        if (subpatcher == this->p_26)
            return 0 + this->p_25->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_25->getNumParameters())
                return this->p_25->constrainParameterValue(index, value);
    
            index -= this->p_25->getNumParameters();
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_25->processNumMessage(tag, objectId, time, payload);
        this->p_26->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_25->processListMessage(tag, objectId, time, payload);
        this->p_26->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_25->processBangMessage(tag, objectId, time);
        this->p_26->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        auto subpatchResult_0 = this->p_25->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_26->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_25->processDataViewUpdate(index, time);
        this->p_26->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 1;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->p_25->initializeObjects();
        this->p_26->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_25->startup();
        this->p_26->startup();
    }
    
    void allocateDataRefs() {
        this->p_25->allocateDataRefs();
        this->p_26->allocateDataRefs();
    }
    
    void p_25_target_AM2freq_number_set(number v) {
        this->p_25->updateTime(this->_currentTime);
        this->p_25->p_01_target_AM2freq_number_set(v);
        this->p_25->updateTime(this->_currentTime);
        this->p_25->p_02_target_AM2freq_number_set(v);
        this->p_25->updateTime(this->_currentTime);
        this->p_25->p_03_target_AM2freq_number_set(v);
    }
    
    void p_25_target_AM2source_number_set(number v) {
        this->p_25->updateTime(this->_currentTime);
        this->p_25->receive_04_output_number_set(v);
    }
    
    void p_26_target_AMsource_number_set(number v) {
        this->p_26->updateTime(this->_currentTime);
        this->p_26->receive_26_output_number_set(v);
    }
    
    void p_26_target_AMLFOfreq_number_set(number v) {
        this->p_26->updateTime(this->_currentTime);
        this->p_26->p_22_target_AMLFOfreq_number_set(v);
        this->p_26->updateTime(this->_currentTime);
        this->p_26->p_23_target_AMLFOfreq_number_set(v);
        this->p_26->updateTime(this->_currentTime);
        this->p_26->p_24_target_AMLFOfreq_number_set(v);
    }
    
    void dspexpr_10_in2_set(number v) {
        this->dspexpr_10_in2 = v;
    }
    
    void receive_29_output_number_set(number v) {
        this->receive_29_output_number = v;
        this->dspexpr_10_in2_set(v);
    }
    
    void dspexpr_09_in2_set(number v) {
        this->dspexpr_09_in2 = v;
    }
    
    void receive_30_output_number_set(number v) {
        this->receive_30_output_number = v;
        this->dspexpr_09_in2_set(v);
    }
    
    void selector_07_onoff_set(number v) {
        this->selector_07_onoff = v;
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->selector_07_onoff_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(this->expr_01_in1 + this->expr_01_in2);//#map:AM[1]/+_obj-8:1
    }
    
    void receive_27_output_number_set(number v) {
        this->receive_27_output_number = v;
        this->expr_01_in1_set(v);
    }
    
    void selector_06_onoff_set(number v) {
        this->selector_06_onoff = v;
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
        this->selector_06_onoff_set(this->expr_02_out1);
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
        this->expr_02_out1_set(this->expr_02_in1 + this->expr_02_in2);//#map:AM[1]/+_obj-28:1
    }
    
    void receive_28_output_number_set(number v) {
        this->receive_28_output_number = v;
        this->expr_02_in1_set(v);
    }
    
    void p_25_perform(SampleValue * out1, Index n) {
        // subpatcher: generator
        SampleArray<1> outs = {out1};
    
        this->p_25->process(nullptr, 0, outs, 1, n);
    }
    
    void p_26_perform(SampleValue * out1, Index n) {
        // subpatcher: generator
        SampleArray<1> outs = {out1};
    
        this->p_26->process(nullptr, 0, outs, 1, n);
    }
    
    void dspexpr_08_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_09_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void selector_07_perform(
        number onoff,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            if (onoff >= 1 && onoff < 2)
                out[(Index)i] = in1[(Index)i];
            else if (onoff >= 2 && onoff < 3)
                out[(Index)i] = in2[(Index)i];
            else
                out[(Index)i] = 0;
        }
    }
    
    void dspexpr_07_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_10_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
        }
    }
    
    void selector_06_perform(
        number onoff,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            if (onoff >= 1 && onoff < 2)
                out[(Index)i] = in1[(Index)i];
            else if (onoff >= 2 && onoff < 3)
                out[(Index)i] = in2[(Index)i];
            else
                out[(Index)i] = 0;
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        expr_01_in1 = 0;
        expr_01_in2 = 1;
        expr_01_out1 = 0;
        receive_27_output_number = 0;
        receive_28_output_number = 0;
        expr_02_in1 = 0;
        expr_02_in2 = 1;
        expr_02_out1 = 0;
        selector_06_onoff = 1;
        selector_07_onoff = 1;
        dspexpr_07_in1 = 0;
        dspexpr_07_in2 = 0;
        dspexpr_08_in1 = 0;
        dspexpr_08_in2 = 0;
        dspexpr_09_in1 = 0;
        dspexpr_09_in2 = 0;
        dspexpr_10_in1 = 0;
        dspexpr_10_in2 = 0;
        receive_29_output_number = 0;
        receive_30_output_number = 0;
        p_25_target = 0;
        p_26_target = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number expr_01_in1;
        number expr_01_in2;
        number expr_01_out1;
        number receive_27_output_number;
        list receive_27_output_list;
        number receive_28_output_number;
        list receive_28_output_list;
        number expr_02_in1;
        number expr_02_in2;
        number expr_02_out1;
        number selector_06_onoff;
        number selector_07_onoff;
        number dspexpr_07_in1;
        number dspexpr_07_in2;
        number dspexpr_08_in1;
        number dspexpr_08_in2;
        number dspexpr_09_in1;
        number dspexpr_09_in2;
        number dspexpr_10_in1;
        number dspexpr_10_in2;
        number receive_29_output_number;
        list receive_29_output_list;
        number receive_30_output_number;
        list receive_30_output_list;
        number p_25_target;
        number p_26_target;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[3];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_4253* p_25;
        RNBOSubpatcher_4254* p_26;
    
};

class RNBOSubpatcher_4292 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_4288 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_4292;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_4265 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4288;
                        friend class rnbomatic;
                        
                        public:
                        
                        class RNBOSubpatcher_4263 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4265;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4258 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4263;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4255 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4258;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4255()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4255()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4258* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4258 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                    
                                                                                        this->cycle_tilde_06_perform(
                                                                                            this->cycle_tilde_06_frequency,
                                                                                            this->cycle_tilde_06_phase_offset,
                                                                                            out1,
                                                                                            this->dummyBuffer,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_06_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        if (index == 0) {
                                                                                            this->cycle_tilde_06_buffer = new Float64Buffer(
                                                                                                this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                            );
                                                                                    
                                                                                            this->cycle_tilde_06_bufferUpdated();
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    
                                                                                        this->cycle_tilde_06_buffer = new Float64Buffer(
                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                        );
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->cycle_tilde_06_buffer->requestSize(16384, 1);
                                                                                        this->cycle_tilde_06_buffer->setSampleRate(this->sr);
                                                                                        this->cycle_tilde_06_buffer = this->cycle_tilde_06_buffer->allocateIfNeeded();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_06_frequency_set(number v) {
                                                                                        this->cycle_tilde_06_frequency = v;
                                                                                    }
                                                                                    
                                                                                    void receive_31_output_number_set(number v) {
                                                                                        this->receive_31_output_number = v;
                                                                                        this->cycle_tilde_06_frequency_set(v);
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_06_perform(
                                                                                        number frequency,
                                                                                        number phase_offset,
                                                                                        SampleValue * out1,
                                                                                        SampleValue * out2,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(phase_offset);
                                                                                        auto __cycle_tilde_06_f2i = this->cycle_tilde_06_f2i;
                                                                                        auto __cycle_tilde_06_buffer = this->cycle_tilde_06_buffer;
                                                                                        auto __cycle_tilde_06_phasei = this->cycle_tilde_06_phasei;
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            {
                                                                                                uint32_t uint_phase;
                                                                                    
                                                                                                {
                                                                                                    {
                                                                                                        uint_phase = __cycle_tilde_06_phasei;
                                                                                                    }
                                                                                                }
                                                                                    
                                                                                                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                number y0 = __cycle_tilde_06_buffer[(Index)idx];
                                                                                                number y1 = __cycle_tilde_06_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                number y = y0 + frac * (y1 - y0);
                                                                                    
                                                                                                {
                                                                                                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_06_f2i));
                                                                                                    __cycle_tilde_06_phasei = uint32_add(__cycle_tilde_06_phasei, pincr);
                                                                                                }
                                                                                    
                                                                                                out1[(Index)i] = y;
                                                                                                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_06_phasei = __cycle_tilde_06_phasei;
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number cycle_tilde_06_ph_next(number freq, number reset) {
                                                                                        {
                                                                                            {
                                                                                                if (reset >= 0.)
                                                                                                    this->cycle_tilde_06_ph_currentPhase = reset;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        number pincr = freq * this->cycle_tilde_06_ph_conv;
                                                                                    
                                                                                        if (this->cycle_tilde_06_ph_currentPhase < 0.)
                                                                                            this->cycle_tilde_06_ph_currentPhase = 1. + this->cycle_tilde_06_ph_currentPhase;
                                                                                    
                                                                                        if (this->cycle_tilde_06_ph_currentPhase > 1.)
                                                                                            this->cycle_tilde_06_ph_currentPhase = this->cycle_tilde_06_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->cycle_tilde_06_ph_currentPhase;
                                                                                        this->cycle_tilde_06_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_06_ph_reset() {
                                                                                        this->cycle_tilde_06_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_06_ph_dspsetup() {
                                                                                        this->cycle_tilde_06_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_06_dspsetup(bool force) {
                                                                                        if ((bool)(this->cycle_tilde_06_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->cycle_tilde_06_phasei = 0;
                                                                                        this->cycle_tilde_06_f2i = (number)4294967296 / this->samplerate();
                                                                                        this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
                                                                                        this->cycle_tilde_06_setupDone = true;
                                                                                        this->cycle_tilde_06_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_06_bufferUpdated() {
                                                                                        this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_31_output_number = 0;
                                                                                        cycle_tilde_06_frequency = 0;
                                                                                        cycle_tilde_06_phase_offset = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        cycle_tilde_06_wrap = 0;
                                                                                        cycle_tilde_06_ph_currentPhase = 0;
                                                                                        cycle_tilde_06_ph_conv = 0;
                                                                                        cycle_tilde_06_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_31_output_number;
                                                                                        list receive_31_output_list;
                                                                                        number cycle_tilde_06_frequency;
                                                                                        number cycle_tilde_06_phase_offset;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        Float64BufferRef cycle_tilde_06_buffer;
                                                                                        long cycle_tilde_06_wrap;
                                                                                        uint32_t cycle_tilde_06_phasei;
                                                                                        SampleValue cycle_tilde_06_f2i;
                                                                                        number cycle_tilde_06_ph_currentPhase;
                                                                                        number cycle_tilde_06_ph_conv;
                                                                                        bool cycle_tilde_06_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4256 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4258;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4256()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4256()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4258* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4258 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_11_perform(this->phasor_11_freq, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->phasor_11_sigbuf = resizeSignal(this->phasor_11_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_11_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_11_freq_set(number v) {
                                                                                        this->phasor_11_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_32_output_number_set(number v) {
                                                                                        this->receive_32_output_number = v;
                                                                                        this->phasor_11_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_11_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_11_ph_next(freq, -1);
                                                                                            this->phasor_11_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_11_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_11_ph_conv;
                                                                                    
                                                                                        if (this->phasor_11_ph_currentPhase < 0.)
                                                                                            this->phasor_11_ph_currentPhase = 1. + this->phasor_11_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_11_ph_currentPhase > 1.)
                                                                                            this->phasor_11_ph_currentPhase = this->phasor_11_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_11_ph_currentPhase;
                                                                                        this->phasor_11_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_11_ph_reset() {
                                                                                        this->phasor_11_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_11_ph_dspsetup() {
                                                                                        this->phasor_11_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_11_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_11_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_11_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_11_setupDone = true;
                                                                                        this->phasor_11_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_32_output_number = 0;
                                                                                        phasor_11_freq = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_11_sigbuf = nullptr;
                                                                                        phasor_11_lastLockedPhase = 0;
                                                                                        phasor_11_conv = 0;
                                                                                        phasor_11_ph_currentPhase = 0;
                                                                                        phasor_11_ph_conv = 0;
                                                                                        phasor_11_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_32_output_number;
                                                                                        list receive_32_output_list;
                                                                                        number phasor_11_freq;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_11_sigbuf;
                                                                                        number phasor_11_lastLockedPhase;
                                                                                        number phasor_11_conv;
                                                                                        number phasor_11_ph_currentPhase;
                                                                                        number phasor_11_ph_conv;
                                                                                        bool phasor_11_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4257 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4258;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4257()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4257()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4258* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4258 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number wrap(number x, number low, number high) {
                                                                                        number lo;
                                                                                        number hi;
                                                                                    
                                                                                        if (low == high)
                                                                                            return low;
                                                                                    
                                                                                        if (low > high) {
                                                                                            hi = low;
                                                                                            lo = high;
                                                                                        } else {
                                                                                            lo = low;
                                                                                            hi = high;
                                                                                        }
                                                                                    
                                                                                        number range = hi - lo;
                                                                                    
                                                                                        if (x >= lo && x < hi)
                                                                                            return x;
                                                                                    
                                                                                        if (range <= 0.000000001)
                                                                                            return lo;
                                                                                    
                                                                                        long numWraps = (long)(trunc((x - lo) / range));
                                                                                        numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                        number result = x - range * numWraps;
                                                                                    
                                                                                        if (result >= hi)
                                                                                            return result - range;
                                                                                        else
                                                                                            return result;
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_12_perform(this->phasor_12_freq, this->signals[0], n);
                                                                                        this->triangle_tilde_06_perform(this->signals[0], this->triangle_tilde_06_duty, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 1; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->phasor_12_sigbuf = resizeSignal(this->phasor_12_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_12_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_12_freq_set(number v) {
                                                                                        this->phasor_12_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_33_output_number_set(number v) {
                                                                                        this->receive_33_output_number = v;
                                                                                        this->phasor_12_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_12_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_12_ph_next(freq, -1);
                                                                                            this->phasor_12_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void triangle_tilde_06_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                        RNBO_UNUSED(duty);
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            number p1 = 0.5;
                                                                                            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                    
                                                                                            if (wrappedPhase < p1) {
                                                                                                out1[(Index)i] = wrappedPhase / p1;
                                                                                                continue;
                                                                                            } else {
                                                                                                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_12_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_12_ph_conv;
                                                                                    
                                                                                        if (this->phasor_12_ph_currentPhase < 0.)
                                                                                            this->phasor_12_ph_currentPhase = 1. + this->phasor_12_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_12_ph_currentPhase > 1.)
                                                                                            this->phasor_12_ph_currentPhase = this->phasor_12_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_12_ph_currentPhase;
                                                                                        this->phasor_12_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_12_ph_reset() {
                                                                                        this->phasor_12_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_12_ph_dspsetup() {
                                                                                        this->phasor_12_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_12_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_12_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_12_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_12_setupDone = true;
                                                                                        this->phasor_12_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        triangle_tilde_06_phase = 0;
                                                                                        triangle_tilde_06_duty = 0.5;
                                                                                        phasor_12_freq = 0;
                                                                                        receive_33_output_number = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_12_sigbuf = nullptr;
                                                                                        phasor_12_lastLockedPhase = 0;
                                                                                        phasor_12_conv = 0;
                                                                                        phasor_12_ph_currentPhase = 0;
                                                                                        phasor_12_ph_conv = 0;
                                                                                        phasor_12_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number triangle_tilde_06_phase;
                                                                                        number triangle_tilde_06_duty;
                                                                                        number phasor_12_freq;
                                                                                        number receive_33_output_number;
                                                                                        list receive_33_output_list;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[1];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_12_sigbuf;
                                                                                        number phasor_12_lastLockedPhase;
                                                                                        number phasor_12_conv;
                                                                                        number phasor_12_ph_currentPhase;
                                                                                        number phasor_12_ph_conv;
                                                                                        bool phasor_12_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4258()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4258()
                                                            {
                                                                delete this->p_27;
                                                                delete this->p_28;
                                                                delete this->p_29;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4263* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4263 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_27_perform(this->signals[0], n);
                                                                this->p_28_perform(this->signals[1], n);
                                                                this->p_29_perform(this->signals[2], n);
                                                            
                                                                this->selector_08_perform(
                                                                    this->selector_08_onoff,
                                                                    this->zeroBuffer,
                                                                    this->signals[0],
                                                                    this->signals[1],
                                                                    this->signals[2],
                                                                    out1,
                                                                    n
                                                                );
                                                            
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    Index i;
                                                            
                                                                    for (i = 0; i < 3; i++) {
                                                                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                    }
                                                            
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_27->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_28->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_29->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_27 = new RNBOSubpatcher_4255();
                                                                this->p_27->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_27->initialize();
                                                                this->p_27->setParameterOffset(this->getParameterOffset(this->p_27));
                                                                this->p_28 = new RNBOSubpatcher_4256();
                                                                this->p_28->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_28->initialize();
                                                                this->p_28->setParameterOffset(this->getParameterOffset(this->p_28));
                                                                this->p_29 = new RNBOSubpatcher_4257();
                                                                this->p_29->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_29->initialize();
                                                                this->p_29->setParameterOffset(this->getParameterOffset(this->p_29));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_27->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                this->p_28->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                this->p_29->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_27->processTempoEvent(time, tempo);
                                                                this->p_28->processTempoEvent(time, tempo);
                                                                this->p_29->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_27->processTransportEvent(time, state);
                                                                this->p_28->processTransportEvent(time, state);
                                                                this->p_29->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_27->processBeatTimeEvent(time, beattime);
                                                                this->p_28->processBeatTimeEvent(time, beattime);
                                                                this->p_29->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_27->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_28->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_29->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        this->p_27->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        this->p_28->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        this->p_29->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        return this->p_27->getParameterValue(index);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        return this->p_28->getParameterValue(index);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        return this->p_29->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        return this->p_27->getParameterName(index);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        return this->p_28->getParameterName(index);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        return this->p_29->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        return this->p_27->getParameterId(index);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        return this->p_28->getParameterId(index);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        return this->p_29->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_27->getNumParameters())
                                                                            this->p_27->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_27->getNumParameters();
                                                            
                                                                        if (index < this->p_28->getNumParameters())
                                                                            this->p_28->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_28->getNumParameters();
                                                            
                                                                        if (index < this->p_29->getNumParameters())
                                                                            this->p_29->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_27)
                                                                    return 0;
                                                            
                                                                if (subpatcher == this->p_28)
                                                                    return 0 + this->p_27->getNumParameters();
                                                            
                                                                if (subpatcher == this->p_29)
                                                                    return 0 + this->p_27->getNumParameters() + this->p_28->getNumParameters();
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        return this->p_27->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        return this->p_28->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        return this->p_29->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        return this->p_27->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        return this->p_28->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        return this->p_29->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_27->getNumParameters())
                                                                        return this->p_27->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_27->getNumParameters();
                                                            
                                                                    if (index < this->p_28->getNumParameters())
                                                                        return this->p_28->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_28->getNumParameters();
                                                            
                                                                    if (index < this->p_29->getNumParameters())
                                                                        return this->p_29->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_27->processNumMessage(tag, objectId, time, payload);
                                                                this->p_28->processNumMessage(tag, objectId, time, payload);
                                                                this->p_29->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_27->processListMessage(tag, objectId, time, payload);
                                                                this->p_28->processListMessage(tag, objectId, time, payload);
                                                                this->p_29->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_27->processBangMessage(tag, objectId, time);
                                                                this->p_28->processBangMessage(tag, objectId, time);
                                                                this->p_29->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_27->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                auto subpatchResult_1 = this->p_28->resolveTag(tag);
                                                            
                                                                if (subpatchResult_1)
                                                                    return subpatchResult_1;
                                                            
                                                                auto subpatchResult_2 = this->p_29->resolveTag(tag);
                                                            
                                                                if (subpatchResult_2)
                                                                    return subpatchResult_2;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_27->processDataViewUpdate(index, time);
                                                                this->p_28->processDataViewUpdate(index, time);
                                                                this->p_29->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_27->initializeObjects();
                                                                this->p_28->initializeObjects();
                                                                this->p_29->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_27->startup();
                                                                this->p_28->startup();
                                                                this->p_29->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_27->allocateDataRefs();
                                                                this->p_28->allocateDataRefs();
                                                                this->p_29->allocateDataRefs();
                                                            }
                                                            
                                                            void selector_08_onoff_set(number v) {
                                                                this->selector_08_onoff = v;
                                                            }
                                                            
                                                            void receive_34_output_number_set(number v) {
                                                                this->receive_34_output_number = v;
                                                                this->selector_08_onoff_set(v);
                                                            }
                                                            
                                                            void p_27_target_FMLFOfreq_number_set(number v) {
                                                                this->p_27->updateTime(this->_currentTime);
                                                                this->p_27->receive_31_output_number_set(v);
                                                            }
                                                            
                                                            void p_28_target_FMLFOfreq_number_set(number v) {
                                                                this->p_28->updateTime(this->_currentTime);
                                                                this->p_28->receive_32_output_number_set(v);
                                                            }
                                                            
                                                            void p_29_target_FMLFOfreq_number_set(number v) {
                                                                this->p_29->updateTime(this->_currentTime);
                                                                this->p_29->receive_33_output_number_set(v);
                                                            }
                                                            
                                                            void p_27_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: sin
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_27->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_28_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: phasor
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_28->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_29_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: triangle
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_29->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void selector_08_perform(
                                                                number onoff,
                                                                const SampleValue * in1,
                                                                const SampleValue * in2,
                                                                const SampleValue * in3,
                                                                const SampleValue * in4,
                                                                SampleValue * out,
                                                                Index n
                                                            ) {
                                                                Index i;
                                                            
                                                                for (i = 0; i < n; i++) {
                                                                    if (onoff >= 1 && onoff < 2)
                                                                        out[(Index)i] = in1[(Index)i];
                                                                    else if (onoff >= 2 && onoff < 3)
                                                                        out[(Index)i] = in2[(Index)i];
                                                                    else if (onoff >= 3 && onoff < 4)
                                                                        out[(Index)i] = in3[(Index)i];
                                                                    else if (onoff >= 4 && onoff < 5)
                                                                        out[(Index)i] = in4[(Index)i];
                                                                    else
                                                                        out[(Index)i] = 0;
                                                                }
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                receive_34_output_number = 0;
                                                                selector_08_onoff = 1;
                                                                p_27_target = 0;
                                                                p_28_target = 0;
                                                                p_29_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                signals[0] = nullptr;
                                                                signals[1] = nullptr;
                                                                signals[2] = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number receive_34_output_number;
                                                                list receive_34_output_list;
                                                                number selector_08_onoff;
                                                                number p_27_target;
                                                                number p_28_target;
                                                                number p_29_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                SampleValue * signals[3];
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4255* p_27;
                                                                RNBOSubpatcher_4256* p_28;
                                                                RNBOSubpatcher_4257* p_29;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4263()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4263()
                                        {
                                            delete this->p_30;
                                        }
                                        
                                        virtual RNBOSubpatcher_4265* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4265 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_30_perform(out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_30->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_30 = new RNBOSubpatcher_4258();
                                            this->p_30->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_30->initialize();
                                            this->p_30->setParameterOffset(this->getParameterOffset(this->p_30));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_30->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_30->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_30->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_30->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_30->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    this->p_30->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    return this->p_30->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_30->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    return this->p_30->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    return this->p_30->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_30->getNumParameters())
                                                        this->p_30->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_30)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    return this->p_30->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    return this->p_30->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_30->getNumParameters())
                                                    return this->p_30->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_30->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_30->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_30->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_30->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_30->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_30->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_30->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_30->allocateDataRefs();
                                        }
                                        
                                        void p_30_target_FMLFOsource_number_set(number v) {
                                            this->p_30->updateTime(this->_currentTime);
                                            this->p_30->receive_34_output_number_set(v);
                                        }
                                        
                                        void p_30_target_FMLFOfreq_number_set(number v) {
                                            this->p_30->updateTime(this->_currentTime);
                                            this->p_30->p_27_target_FMLFOfreq_number_set(v);
                                            this->p_30->updateTime(this->_currentTime);
                                            this->p_30->p_28_target_FMLFOfreq_number_set(v);
                                            this->p_30->updateTime(this->_currentTime);
                                            this->p_30->p_29_target_FMLFOfreq_number_set(v);
                                        }
                                        
                                        void p_30_perform(SampleValue * out1, Index n) {
                                            // subpatcher: generator
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_30->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            p_30_target = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number p_30_target;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4258* p_30;
                                        
                        };
                        
                        class RNBOSubpatcher_4264 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4265;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4262 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4264;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4259 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4262;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4259()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4259()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4262* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4262 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                    
                                                                                        this->cycle_tilde_07_perform(
                                                                                            this->cycle_tilde_07_frequency,
                                                                                            this->cycle_tilde_07_phase_offset,
                                                                                            out1,
                                                                                            this->dummyBuffer,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_07_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        if (index == 0) {
                                                                                            this->cycle_tilde_07_buffer = new Float64Buffer(
                                                                                                this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                            );
                                                                                    
                                                                                            this->cycle_tilde_07_bufferUpdated();
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    
                                                                                        this->cycle_tilde_07_buffer = new Float64Buffer(
                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                        );
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->cycle_tilde_07_buffer->requestSize(16384, 1);
                                                                                        this->cycle_tilde_07_buffer->setSampleRate(this->sr);
                                                                                        this->cycle_tilde_07_buffer = this->cycle_tilde_07_buffer->allocateIfNeeded();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_07_frequency_set(number v) {
                                                                                        this->cycle_tilde_07_frequency = v;
                                                                                    }
                                                                                    
                                                                                    void receive_35_output_number_set(number v) {
                                                                                        this->receive_35_output_number = v;
                                                                                        this->cycle_tilde_07_frequency_set(v);
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_07_perform(
                                                                                        number frequency,
                                                                                        number phase_offset,
                                                                                        SampleValue * out1,
                                                                                        SampleValue * out2,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(phase_offset);
                                                                                        auto __cycle_tilde_07_f2i = this->cycle_tilde_07_f2i;
                                                                                        auto __cycle_tilde_07_buffer = this->cycle_tilde_07_buffer;
                                                                                        auto __cycle_tilde_07_phasei = this->cycle_tilde_07_phasei;
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            {
                                                                                                uint32_t uint_phase;
                                                                                    
                                                                                                {
                                                                                                    {
                                                                                                        uint_phase = __cycle_tilde_07_phasei;
                                                                                                    }
                                                                                                }
                                                                                    
                                                                                                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                number y0 = __cycle_tilde_07_buffer[(Index)idx];
                                                                                                number y1 = __cycle_tilde_07_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                number y = y0 + frac * (y1 - y0);
                                                                                    
                                                                                                {
                                                                                                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_07_f2i));
                                                                                                    __cycle_tilde_07_phasei = uint32_add(__cycle_tilde_07_phasei, pincr);
                                                                                                }
                                                                                    
                                                                                                out1[(Index)i] = y;
                                                                                                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_07_phasei = __cycle_tilde_07_phasei;
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number cycle_tilde_07_ph_next(number freq, number reset) {
                                                                                        {
                                                                                            {
                                                                                                if (reset >= 0.)
                                                                                                    this->cycle_tilde_07_ph_currentPhase = reset;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        number pincr = freq * this->cycle_tilde_07_ph_conv;
                                                                                    
                                                                                        if (this->cycle_tilde_07_ph_currentPhase < 0.)
                                                                                            this->cycle_tilde_07_ph_currentPhase = 1. + this->cycle_tilde_07_ph_currentPhase;
                                                                                    
                                                                                        if (this->cycle_tilde_07_ph_currentPhase > 1.)
                                                                                            this->cycle_tilde_07_ph_currentPhase = this->cycle_tilde_07_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->cycle_tilde_07_ph_currentPhase;
                                                                                        this->cycle_tilde_07_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_07_ph_reset() {
                                                                                        this->cycle_tilde_07_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_07_ph_dspsetup() {
                                                                                        this->cycle_tilde_07_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_07_dspsetup(bool force) {
                                                                                        if ((bool)(this->cycle_tilde_07_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->cycle_tilde_07_phasei = 0;
                                                                                        this->cycle_tilde_07_f2i = (number)4294967296 / this->samplerate();
                                                                                        this->cycle_tilde_07_wrap = (long)(this->cycle_tilde_07_buffer->getSize()) - 1;
                                                                                        this->cycle_tilde_07_setupDone = true;
                                                                                        this->cycle_tilde_07_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_07_bufferUpdated() {
                                                                                        this->cycle_tilde_07_wrap = (long)(this->cycle_tilde_07_buffer->getSize()) - 1;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_35_output_number = 0;
                                                                                        cycle_tilde_07_frequency = 0;
                                                                                        cycle_tilde_07_phase_offset = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        cycle_tilde_07_wrap = 0;
                                                                                        cycle_tilde_07_ph_currentPhase = 0;
                                                                                        cycle_tilde_07_ph_conv = 0;
                                                                                        cycle_tilde_07_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_35_output_number;
                                                                                        list receive_35_output_list;
                                                                                        number cycle_tilde_07_frequency;
                                                                                        number cycle_tilde_07_phase_offset;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        Float64BufferRef cycle_tilde_07_buffer;
                                                                                        long cycle_tilde_07_wrap;
                                                                                        uint32_t cycle_tilde_07_phasei;
                                                                                        SampleValue cycle_tilde_07_f2i;
                                                                                        number cycle_tilde_07_ph_currentPhase;
                                                                                        number cycle_tilde_07_ph_conv;
                                                                                        bool cycle_tilde_07_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4260 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4262;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4260()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4260()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4262* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4262 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_13_perform(this->phasor_13_freq, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->phasor_13_sigbuf = resizeSignal(this->phasor_13_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_13_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_13_freq_set(number v) {
                                                                                        this->phasor_13_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_36_output_number_set(number v) {
                                                                                        this->receive_36_output_number = v;
                                                                                        this->phasor_13_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_13_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_13_ph_next(freq, -1);
                                                                                            this->phasor_13_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_13_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_13_ph_conv;
                                                                                    
                                                                                        if (this->phasor_13_ph_currentPhase < 0.)
                                                                                            this->phasor_13_ph_currentPhase = 1. + this->phasor_13_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_13_ph_currentPhase > 1.)
                                                                                            this->phasor_13_ph_currentPhase = this->phasor_13_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_13_ph_currentPhase;
                                                                                        this->phasor_13_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_13_ph_reset() {
                                                                                        this->phasor_13_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_13_ph_dspsetup() {
                                                                                        this->phasor_13_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_13_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_13_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_13_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_13_setupDone = true;
                                                                                        this->phasor_13_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_36_output_number = 0;
                                                                                        phasor_13_freq = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_13_sigbuf = nullptr;
                                                                                        phasor_13_lastLockedPhase = 0;
                                                                                        phasor_13_conv = 0;
                                                                                        phasor_13_ph_currentPhase = 0;
                                                                                        phasor_13_ph_conv = 0;
                                                                                        phasor_13_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_36_output_number;
                                                                                        list receive_36_output_list;
                                                                                        number phasor_13_freq;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_13_sigbuf;
                                                                                        number phasor_13_lastLockedPhase;
                                                                                        number phasor_13_conv;
                                                                                        number phasor_13_ph_currentPhase;
                                                                                        number phasor_13_ph_conv;
                                                                                        bool phasor_13_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4261 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4262;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4261()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4261()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4262* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4262 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number wrap(number x, number low, number high) {
                                                                                        number lo;
                                                                                        number hi;
                                                                                    
                                                                                        if (low == high)
                                                                                            return low;
                                                                                    
                                                                                        if (low > high) {
                                                                                            hi = low;
                                                                                            lo = high;
                                                                                        } else {
                                                                                            lo = low;
                                                                                            hi = high;
                                                                                        }
                                                                                    
                                                                                        number range = hi - lo;
                                                                                    
                                                                                        if (x >= lo && x < hi)
                                                                                            return x;
                                                                                    
                                                                                        if (range <= 0.000000001)
                                                                                            return lo;
                                                                                    
                                                                                        long numWraps = (long)(trunc((x - lo) / range));
                                                                                        numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                        number result = x - range * numWraps;
                                                                                    
                                                                                        if (result >= hi)
                                                                                            return result - range;
                                                                                        else
                                                                                            return result;
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_14_perform(this->phasor_14_freq, this->signals[0], n);
                                                                                        this->triangle_tilde_07_perform(this->signals[0], this->triangle_tilde_07_duty, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 1; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->phasor_14_sigbuf = resizeSignal(this->phasor_14_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_14_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_14_freq_set(number v) {
                                                                                        this->phasor_14_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_37_output_number_set(number v) {
                                                                                        this->receive_37_output_number = v;
                                                                                        this->phasor_14_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_14_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_14_ph_next(freq, -1);
                                                                                            this->phasor_14_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void triangle_tilde_07_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                        RNBO_UNUSED(duty);
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            number p1 = 0.5;
                                                                                            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                    
                                                                                            if (wrappedPhase < p1) {
                                                                                                out1[(Index)i] = wrappedPhase / p1;
                                                                                                continue;
                                                                                            } else {
                                                                                                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_14_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_14_ph_conv;
                                                                                    
                                                                                        if (this->phasor_14_ph_currentPhase < 0.)
                                                                                            this->phasor_14_ph_currentPhase = 1. + this->phasor_14_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_14_ph_currentPhase > 1.)
                                                                                            this->phasor_14_ph_currentPhase = this->phasor_14_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_14_ph_currentPhase;
                                                                                        this->phasor_14_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_14_ph_reset() {
                                                                                        this->phasor_14_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_14_ph_dspsetup() {
                                                                                        this->phasor_14_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_14_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_14_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_14_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_14_setupDone = true;
                                                                                        this->phasor_14_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        triangle_tilde_07_phase = 0;
                                                                                        triangle_tilde_07_duty = 0.5;
                                                                                        phasor_14_freq = 0;
                                                                                        receive_37_output_number = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_14_sigbuf = nullptr;
                                                                                        phasor_14_lastLockedPhase = 0;
                                                                                        phasor_14_conv = 0;
                                                                                        phasor_14_ph_currentPhase = 0;
                                                                                        phasor_14_ph_conv = 0;
                                                                                        phasor_14_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number triangle_tilde_07_phase;
                                                                                        number triangle_tilde_07_duty;
                                                                                        number phasor_14_freq;
                                                                                        number receive_37_output_number;
                                                                                        list receive_37_output_list;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[1];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_14_sigbuf;
                                                                                        number phasor_14_lastLockedPhase;
                                                                                        number phasor_14_conv;
                                                                                        number phasor_14_ph_currentPhase;
                                                                                        number phasor_14_ph_conv;
                                                                                        bool phasor_14_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4262()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4262()
                                                            {
                                                                delete this->p_31;
                                                                delete this->p_32;
                                                                delete this->p_33;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4264* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4264 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_31_perform(this->signals[0], n);
                                                                this->p_32_perform(this->signals[1], n);
                                                                this->p_33_perform(this->signals[2], n);
                                                            
                                                                this->selector_09_perform(
                                                                    this->selector_09_onoff,
                                                                    this->zeroBuffer,
                                                                    this->signals[0],
                                                                    this->signals[1],
                                                                    this->signals[2],
                                                                    out1,
                                                                    n
                                                                );
                                                            
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    Index i;
                                                            
                                                                    for (i = 0; i < 3; i++) {
                                                                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                    }
                                                            
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_31->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_32->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_33->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_31 = new RNBOSubpatcher_4259();
                                                                this->p_31->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_31->initialize();
                                                                this->p_31->setParameterOffset(this->getParameterOffset(this->p_31));
                                                                this->p_32 = new RNBOSubpatcher_4260();
                                                                this->p_32->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_32->initialize();
                                                                this->p_32->setParameterOffset(this->getParameterOffset(this->p_32));
                                                                this->p_33 = new RNBOSubpatcher_4261();
                                                                this->p_33->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_33->initialize();
                                                                this->p_33->setParameterOffset(this->getParameterOffset(this->p_33));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_31->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                this->p_32->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                this->p_33->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_31->processTempoEvent(time, tempo);
                                                                this->p_32->processTempoEvent(time, tempo);
                                                                this->p_33->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_31->processTransportEvent(time, state);
                                                                this->p_32->processTransportEvent(time, state);
                                                                this->p_33->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_31->processBeatTimeEvent(time, beattime);
                                                                this->p_32->processBeatTimeEvent(time, beattime);
                                                                this->p_33->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_31->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_32->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_33->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        this->p_31->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        this->p_32->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        this->p_33->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        return this->p_31->getParameterValue(index);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        return this->p_32->getParameterValue(index);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        return this->p_33->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_31->getNumParameters() + this->p_32->getNumParameters() + this->p_33->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        return this->p_31->getParameterName(index);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        return this->p_32->getParameterName(index);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        return this->p_33->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        return this->p_31->getParameterId(index);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        return this->p_32->getParameterId(index);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        return this->p_33->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_31->getNumParameters())
                                                                            this->p_31->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_31->getNumParameters();
                                                            
                                                                        if (index < this->p_32->getNumParameters())
                                                                            this->p_32->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_32->getNumParameters();
                                                            
                                                                        if (index < this->p_33->getNumParameters())
                                                                            this->p_33->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_31)
                                                                    return 0;
                                                            
                                                                if (subpatcher == this->p_32)
                                                                    return 0 + this->p_31->getNumParameters();
                                                            
                                                                if (subpatcher == this->p_33)
                                                                    return 0 + this->p_31->getNumParameters() + this->p_32->getNumParameters();
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        return this->p_31->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        return this->p_32->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        return this->p_33->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        return this->p_31->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        return this->p_32->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        return this->p_33->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_31->getNumParameters())
                                                                        return this->p_31->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_31->getNumParameters();
                                                            
                                                                    if (index < this->p_32->getNumParameters())
                                                                        return this->p_32->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_32->getNumParameters();
                                                            
                                                                    if (index < this->p_33->getNumParameters())
                                                                        return this->p_33->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_31->processNumMessage(tag, objectId, time, payload);
                                                                this->p_32->processNumMessage(tag, objectId, time, payload);
                                                                this->p_33->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_31->processListMessage(tag, objectId, time, payload);
                                                                this->p_32->processListMessage(tag, objectId, time, payload);
                                                                this->p_33->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_31->processBangMessage(tag, objectId, time);
                                                                this->p_32->processBangMessage(tag, objectId, time);
                                                                this->p_33->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_31->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                auto subpatchResult_1 = this->p_32->resolveTag(tag);
                                                            
                                                                if (subpatchResult_1)
                                                                    return subpatchResult_1;
                                                            
                                                                auto subpatchResult_2 = this->p_33->resolveTag(tag);
                                                            
                                                                if (subpatchResult_2)
                                                                    return subpatchResult_2;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_31->processDataViewUpdate(index, time);
                                                                this->p_32->processDataViewUpdate(index, time);
                                                                this->p_33->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_31->initializeObjects();
                                                                this->p_32->initializeObjects();
                                                                this->p_33->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_31->startup();
                                                                this->p_32->startup();
                                                                this->p_33->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_31->allocateDataRefs();
                                                                this->p_32->allocateDataRefs();
                                                                this->p_33->allocateDataRefs();
                                                            }
                                                            
                                                            void selector_09_onoff_set(number v) {
                                                                this->selector_09_onoff = v;
                                                            }
                                                            
                                                            void receive_38_output_number_set(number v) {
                                                                this->receive_38_output_number = v;
                                                                this->selector_09_onoff_set(v);
                                                            }
                                                            
                                                            void p_31_target_FMLFO2freq_number_set(number v) {
                                                                this->p_31->updateTime(this->_currentTime);
                                                                this->p_31->receive_35_output_number_set(v);
                                                            }
                                                            
                                                            void p_32_target_FMLFO2freq_number_set(number v) {
                                                                this->p_32->updateTime(this->_currentTime);
                                                                this->p_32->receive_36_output_number_set(v);
                                                            }
                                                            
                                                            void p_33_target_FMLFO2freq_number_set(number v) {
                                                                this->p_33->updateTime(this->_currentTime);
                                                                this->p_33->receive_37_output_number_set(v);
                                                            }
                                                            
                                                            void p_31_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: sin
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_31->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_32_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: phasor
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_32->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_33_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: triangle
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_33->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void selector_09_perform(
                                                                number onoff,
                                                                const SampleValue * in1,
                                                                const SampleValue * in2,
                                                                const SampleValue * in3,
                                                                const SampleValue * in4,
                                                                SampleValue * out,
                                                                Index n
                                                            ) {
                                                                Index i;
                                                            
                                                                for (i = 0; i < n; i++) {
                                                                    if (onoff >= 1 && onoff < 2)
                                                                        out[(Index)i] = in1[(Index)i];
                                                                    else if (onoff >= 2 && onoff < 3)
                                                                        out[(Index)i] = in2[(Index)i];
                                                                    else if (onoff >= 3 && onoff < 4)
                                                                        out[(Index)i] = in3[(Index)i];
                                                                    else if (onoff >= 4 && onoff < 5)
                                                                        out[(Index)i] = in4[(Index)i];
                                                                    else
                                                                        out[(Index)i] = 0;
                                                                }
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                receive_38_output_number = 0;
                                                                selector_09_onoff = 1;
                                                                p_31_target = 0;
                                                                p_32_target = 0;
                                                                p_33_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                signals[0] = nullptr;
                                                                signals[1] = nullptr;
                                                                signals[2] = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number receive_38_output_number;
                                                                list receive_38_output_list;
                                                                number selector_09_onoff;
                                                                number p_31_target;
                                                                number p_32_target;
                                                                number p_33_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                SampleValue * signals[3];
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4259* p_31;
                                                                RNBOSubpatcher_4260* p_32;
                                                                RNBOSubpatcher_4261* p_33;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4264()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4264()
                                        {
                                            delete this->p_34;
                                        }
                                        
                                        virtual RNBOSubpatcher_4265* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4265 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_34_perform(out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_34->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_34 = new RNBOSubpatcher_4262();
                                            this->p_34->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_34->initialize();
                                            this->p_34->setParameterOffset(this->getParameterOffset(this->p_34));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_34->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_34->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_34->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_34->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_34->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    this->p_34->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    return this->p_34->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_34->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    return this->p_34->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    return this->p_34->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_34->getNumParameters())
                                                        this->p_34->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_34)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    return this->p_34->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    return this->p_34->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_34->getNumParameters())
                                                    return this->p_34->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_34->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_34->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_34->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_34->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_34->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_34->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_34->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_34->allocateDataRefs();
                                        }
                                        
                                        void p_34_target_FMLFO2source_number_set(number v) {
                                            this->p_34->updateTime(this->_currentTime);
                                            this->p_34->receive_38_output_number_set(v);
                                        }
                                        
                                        void p_34_target_FMLFO2freq_number_set(number v) {
                                            this->p_34->updateTime(this->_currentTime);
                                            this->p_34->p_31_target_FMLFO2freq_number_set(v);
                                            this->p_34->updateTime(this->_currentTime);
                                            this->p_34->p_32_target_FMLFO2freq_number_set(v);
                                            this->p_34->updateTime(this->_currentTime);
                                            this->p_34->p_33_target_FMLFO2freq_number_set(v);
                                        }
                                        
                                        void p_34_perform(SampleValue * out1, Index n) {
                                            // subpatcher: generator
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_34->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            p_34_target = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number p_34_target;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4262* p_34;
                                        
                        };
                        
                        RNBOSubpatcher_4265()
                        {
                        }
                        
                        ~RNBOSubpatcher_4265()
                        {
                            delete this->p_35;
                            delete this->p_36;
                        }
                        
                        virtual RNBOSubpatcher_4288* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4288 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->signalgate_04_perform(this->signalgate_04_onoff, this->zeroBuffer, this->signals[0], n);
                            this->p_35_perform(this->signals[1], n);
                            this->dspexpr_12_perform(this->signals[1], this->dspexpr_12_in2, this->signals[2], n);
                            this->p_36_perform(this->signals[1], n);
                            this->dspexpr_14_perform(this->signals[1], this->dspexpr_14_in2, this->signals[3], n);
                            this->dspexpr_13_perform(this->signals[2], this->signals[3], this->signals[1], n);
                        
                            this->selector_10_perform(
                                this->selector_10_onoff,
                                this->signals[0],
                                this->signals[1],
                                this->signals[3],
                                n
                            );
                        
                            this->dspexpr_11_perform(this->dspexpr_11_in1, this->signals[3], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                            this->p_35->prepareToProcess(sampleRate, maxBlockSize, force);
                            this->p_36->prepareToProcess(sampleRate, maxBlockSize, force);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {
                            this->p_35 = new RNBOSubpatcher_4263();
                            this->p_35->setEngineAndPatcher(this->getEngine(), this);
                            this->p_35->initialize();
                            this->p_35->setParameterOffset(this->getParameterOffset(this->p_35));
                            this->p_36 = new RNBOSubpatcher_4264();
                            this->p_36->setEngineAndPatcher(this->getEngine(), this);
                            this->p_36->initialize();
                            this->p_36->setParameterOffset(this->getParameterOffset(this->p_36));
                        }
                        
                        void getPreset(PatcherStateInterface& preset) {
                            this->p_35->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO[1]"));
                            this->p_36->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO"));
                        }
                        
                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                            this->updateTime(time);
                            this->p_35->processTempoEvent(time, tempo);
                            this->p_36->processTempoEvent(time, tempo);
                        }
                        
                        void processTransportEvent(MillisecondTime time, TransportState state) {
                            this->updateTime(time);
                            this->p_35->processTransportEvent(time, state);
                            this->p_36->processTransportEvent(time, state);
                        }
                        
                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                            this->updateTime(time);
                            this->p_35->processBeatTimeEvent(time, beattime);
                            this->p_36->processBeatTimeEvent(time, beattime);
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                            this->updateTime(time);
                            this->p_35->processTimeSignatureEvent(time, numerator, denominator);
                            this->p_36->processTimeSignatureEvent(time, numerator, denominator);
                        }
                        
                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                            RNBO_UNUSED(v);
                            this->updateTime(time);
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    this->p_35->setParameterValue(index, v, time);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    this->p_36->setParameterValue(index, v, time);
                        
                                break;
                                }
                            }
                        }
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    return this->p_35->getParameterValue(index);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    return this->p_36->getParameterValue(index);
                        
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0 + this->p_35->getNumParameters() + this->p_36->getNumParameters();
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    return this->p_35->getParameterName(index);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    return this->p_36->getParameterName(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    return this->p_35->getParameterId(index);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    return this->p_36->getParameterId(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                            {
                                switch (index) {
                                default:
                                    {
                                    index -= 0;
                        
                                    if (index < this->p_35->getNumParameters())
                                        this->p_35->getParameterInfo(index, info);
                        
                                    index -= this->p_35->getNumParameters();
                        
                                    if (index < this->p_36->getNumParameters())
                                        this->p_36->getParameterInfo(index, info);
                        
                                    break;
                                    }
                                }
                            }
                        }
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                            if (subpatcher == this->p_35)
                                return 0;
                        
                            if (subpatcher == this->p_36)
                                return 0 + this->p_35->getNumParameters();
                        
                            return 0;
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    return this->p_35->convertToNormalizedParameterValue(index, value);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    return this->p_36->convertToNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    return this->p_35->convertFromNormalizedParameterValue(index, value);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    return this->p_36->convertFromNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_35->getNumParameters())
                                    return this->p_35->constrainParameterValue(index, value);
                        
                                index -= this->p_35->getNumParameters();
                        
                                if (index < this->p_36->getNumParameters())
                                    return this->p_36->constrainParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_35->processNumMessage(tag, objectId, time, payload);
                            this->p_36->processNumMessage(tag, objectId, time, payload);
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_35->processListMessage(tag, objectId, time, payload);
                            this->p_36->processListMessage(tag, objectId, time, payload);
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_35->processBangMessage(tag, objectId, time);
                            this->p_36->processBangMessage(tag, objectId, time);
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            auto subpatchResult_0 = this->p_35->resolveTag(tag);
                        
                            if (subpatchResult_0)
                                return subpatchResult_0;
                        
                            auto subpatchResult_1 = this->p_36->resolveTag(tag);
                        
                            if (subpatchResult_1)
                                return subpatchResult_1;
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->p_35->processDataViewUpdate(index, time);
                            this->p_36->processDataViewUpdate(index, time);
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->p_35->initializeObjects();
                            this->p_36->initializeObjects();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->p_35->startup();
                            this->p_36->startup();
                        }
                        
                        void allocateDataRefs() {
                            this->p_35->allocateDataRefs();
                            this->p_36->allocateDataRefs();
                        }
                        
                        void p_35_target_FMLFOsource_number_set(number v) {
                            this->p_35->updateTime(this->_currentTime);
                            this->p_35->p_30_target_FMLFOsource_number_set(v);
                        }
                        
                        void dspexpr_12_in2_set(number v) {
                            this->dspexpr_12_in2 = v;
                        }
                        
                        void receive_42_output_number_set(number v) {
                            this->receive_42_output_number = v;
                            this->dspexpr_12_in2_set(v);
                        }
                        
                        void signalgate_04_onoff_set(number v) {
                            this->signalgate_04_onoff = v;
                        }
                        
                        void receive_41_output_number_set(number v) {
                            this->receive_41_output_number = v;
                            this->signalgate_04_onoff_set(v);
                        }
                        
                        void dspexpr_11_in1_set(number v) {
                            this->dspexpr_11_in1 = v;
                        }
                        
                        void receive_39_output_number_set(number v) {
                            this->receive_39_output_number = v;
                            this->dspexpr_11_in1_set(v);
                        }
                        
                        void selector_10_onoff_set(number v) {
                            this->selector_10_onoff = v;
                        }
                        
                        void expr_03_out1_set(number v) {
                            this->expr_03_out1 = v;
                            this->selector_10_onoff_set(this->expr_03_out1);
                        }
                        
                        void expr_03_in1_set(number in1) {
                            this->expr_03_in1 = in1;
                            this->expr_03_out1_set(this->expr_03_in1 + this->expr_03_in2);//#map:generator/sin/freq/+_obj-15:1
                        }
                        
                        void receive_40_output_number_set(number v) {
                            this->receive_40_output_number = v;
                            this->expr_03_in1_set(v);
                        }
                        
                        void p_36_target_FMLFO2source_number_set(number v) {
                            this->p_36->updateTime(this->_currentTime);
                            this->p_36->p_34_target_FMLFO2source_number_set(v);
                        }
                        
                        void p_35_target_FMLFOfreq_number_set(number v) {
                            this->p_35->updateTime(this->_currentTime);
                            this->p_35->p_30_target_FMLFOfreq_number_set(v);
                        }
                        
                        void p_36_target_FMLFO2freq_number_set(number v) {
                            this->p_36->updateTime(this->_currentTime);
                            this->p_36->p_34_target_FMLFO2freq_number_set(v);
                        }
                        
                        void signalgate_04_perform(number onoff, const SampleValue * input, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (onoff == 1) {
                                    out1[(Index)i] = input[(Index)i];
                                } else {
                                    out1[(Index)i] = 0;
                                }
                            }
                        }
                        
                        void p_35_perform(SampleValue * out1, Index n) {
                            // subpatcher: FMLFO
                            SampleArray<1> outs = {out1};
                        
                            this->p_35->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void dspexpr_12_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void p_36_perform(SampleValue * out1, Index n) {
                            // subpatcher: FMLFO
                            SampleArray<1> outs = {out1};
                        
                            this->p_36->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void dspexpr_14_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_13_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void selector_10_perform(
                            number onoff,
                            const SampleValue * in1,
                            const SampleValue * in2,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (onoff >= 1 && onoff < 2)
                                    out[(Index)i] = in1[(Index)i];
                                else if (onoff >= 2 && onoff < 3)
                                    out[(Index)i] = in2[(Index)i];
                                else
                                    out[(Index)i] = 0;
                            }
                        }
                        
                        void dspexpr_11_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            receive_39_output_number = 0;
                            dspexpr_11_in1 = 0;
                            dspexpr_11_in2 = 0;
                            expr_03_in1 = 0;
                            expr_03_in2 = 1;
                            expr_03_out1 = 0;
                            receive_40_output_number = 0;
                            selector_10_onoff = 1;
                            signalgate_04_onoff = 0;
                            receive_41_output_number = 0;
                            dspexpr_12_in1 = 0;
                            dspexpr_12_in2 = 0;
                            dspexpr_13_in1 = 0;
                            dspexpr_13_in2 = 0;
                            p_35_target = 0;
                            p_36_target = 0;
                            dspexpr_14_in1 = 0;
                            dspexpr_14_in2 = 0;
                            receive_42_output_number = 0;
                            receive_43_output_number = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number receive_39_output_number;
                            list receive_39_output_list;
                            number dspexpr_11_in1;
                            number dspexpr_11_in2;
                            number expr_03_in1;
                            number expr_03_in2;
                            number expr_03_out1;
                            number receive_40_output_number;
                            list receive_40_output_list;
                            number selector_10_onoff;
                            number signalgate_04_onoff;
                            number receive_41_output_number;
                            list receive_41_output_list;
                            number dspexpr_12_in1;
                            number dspexpr_12_in2;
                            number dspexpr_13_in1;
                            number dspexpr_13_in2;
                            number p_35_target;
                            number p_36_target;
                            number dspexpr_14_in1;
                            number dspexpr_14_in2;
                            number receive_42_output_number;
                            list receive_42_output_list;
                            number receive_43_output_number;
                            list receive_43_output_list;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                            RNBOSubpatcher_4263* p_35;
                            RNBOSubpatcher_4264* p_36;
                        
            };
            
            RNBOSubpatcher_4288()
            {
            }
            
            ~RNBOSubpatcher_4288()
            {
                delete this->p_37;
            }
            
            virtual RNBOSubpatcher_4292* getPatcher() const {
                return static_cast<RNBOSubpatcher_4292 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->p_37_perform(this->signals[0], n);
            
                this->cycle_tilde_08_perform(
                    this->signals[0],
                    this->cycle_tilde_08_phase_offset,
                    out1,
                    this->dummyBuffer,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->cycle_tilde_08_dspsetup(forceDSPSetup);
                this->p_37->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_37 = new RNBOSubpatcher_4265();
                this->p_37->setEngineAndPatcher(this->getEngine(), this);
                this->p_37->initialize();
                this->p_37->setParameterOffset(this->getParameterOffset(this->p_37));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_37->getPreset(getSubState(getSubState(preset, "__sps"), "freq"));
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->p_37->processTempoEvent(time, tempo);
            }
            
            void processTransportEvent(MillisecondTime time, TransportState state) {
                this->updateTime(time);
                this->p_37->processTransportEvent(time, state);
            }
            
            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                this->updateTime(time);
                this->p_37->processBeatTimeEvent(time, beattime);
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                this->updateTime(time);
                this->p_37->processTimeSignatureEvent(time, numerator, denominator);
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        this->p_37->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        return this->p_37->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_37->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        return this->p_37->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        return this->p_37->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_37->getNumParameters())
                            this->p_37->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_37)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        return this->p_37->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        return this->p_37->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_37->getNumParameters())
                        return this->p_37->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_37->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_37->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_37->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                auto subpatchResult_0 = this->p_37->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->cycle_tilde_08_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
                    this->cycle_tilde_08_bufferUpdated();
                }
            
                this->p_37->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->cycle_tilde_08_buffer = new Float64Buffer(this->getPatcher()->getPatcher()->RNBODefaultSinus);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->p_37->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_37->startup();
            }
            
            void allocateDataRefs() {
                this->p_37->allocateDataRefs();
                this->cycle_tilde_08_buffer->requestSize(16384, 1);
                this->cycle_tilde_08_buffer->setSampleRate(this->sr);
                this->cycle_tilde_08_buffer = this->cycle_tilde_08_buffer->allocateIfNeeded();
            }
            
            void p_37_target_FMLFOsource_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->p_35_target_FMLFOsource_number_set(v);
            }
            
            void p_37_target_FMLFODepth_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->receive_42_output_number_set(v);
            }
            
            void p_37_target_FM_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->receive_41_output_number_set(v);
            }
            
            void p_37_target_pitch_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->receive_39_output_number_set(v);
            }
            
            void p_37_target_FM2_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->receive_40_output_number_set(v);
            }
            
            void p_37_target_FMLFO2source_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->p_36_target_FMLFO2source_number_set(v);
            }
            
            void p_37_target_FMLFOfreq_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->p_35_target_FMLFOfreq_number_set(v);
            }
            
            void p_37_target_FMLFO2freq_number_set(number v) {
                this->p_37->updateTime(this->_currentTime);
                this->p_37->p_36_target_FMLFO2freq_number_set(v);
            }
            
            void p_37_perform(SampleValue * out1, Index n) {
                // subpatcher: freq
                SampleArray<1> outs = {out1};
            
                this->p_37->process(nullptr, 0, outs, 1, n);
            }
            
            void cycle_tilde_08_perform(
                const Sample * frequency,
                number phase_offset,
                SampleValue * out1,
                SampleValue * out2,
                Index n
            ) {
                RNBO_UNUSED(phase_offset);
                auto __cycle_tilde_08_f2i = this->cycle_tilde_08_f2i;
                auto __cycle_tilde_08_buffer = this->cycle_tilde_08_buffer;
                auto __cycle_tilde_08_phasei = this->cycle_tilde_08_phasei;
                Index i;
            
                for (i = 0; i < n; i++) {
                    {
                        uint32_t uint_phase;
            
                        {
                            {
                                uint_phase = __cycle_tilde_08_phasei;
                            }
                        }
            
                        uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                        number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                        number y0 = __cycle_tilde_08_buffer[(Index)idx];
                        number y1 = __cycle_tilde_08_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                        number y = y0 + frac * (y1 - y0);
            
                        {
                            uint32_t pincr = (uint32_t)(uint32_trunc(frequency[(Index)i] * __cycle_tilde_08_f2i));
                            __cycle_tilde_08_phasei = uint32_add(__cycle_tilde_08_phasei, pincr);
                        }
            
                        out1[(Index)i] = y;
                        out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                        continue;
                    }
                }
            
                this->cycle_tilde_08_phasei = __cycle_tilde_08_phasei;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number cycle_tilde_08_ph_next(number freq, number reset) {
                {
                    {
                        if (reset >= 0.)
                            this->cycle_tilde_08_ph_currentPhase = reset;
                    }
                }
            
                number pincr = freq * this->cycle_tilde_08_ph_conv;
            
                if (this->cycle_tilde_08_ph_currentPhase < 0.)
                    this->cycle_tilde_08_ph_currentPhase = 1. + this->cycle_tilde_08_ph_currentPhase;
            
                if (this->cycle_tilde_08_ph_currentPhase > 1.)
                    this->cycle_tilde_08_ph_currentPhase = this->cycle_tilde_08_ph_currentPhase - 1.;
            
                number tmp = this->cycle_tilde_08_ph_currentPhase;
                this->cycle_tilde_08_ph_currentPhase += pincr;
                return tmp;
            }
            
            void cycle_tilde_08_ph_reset() {
                this->cycle_tilde_08_ph_currentPhase = 0;
            }
            
            void cycle_tilde_08_ph_dspsetup() {
                this->cycle_tilde_08_ph_conv = (number)1 / this->sr;
            }
            
            void cycle_tilde_08_dspsetup(bool force) {
                if ((bool)(this->cycle_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->cycle_tilde_08_phasei = 0;
                this->cycle_tilde_08_f2i = (number)4294967296 / this->samplerate();
                this->cycle_tilde_08_wrap = (long)(this->cycle_tilde_08_buffer->getSize()) - 1;
                this->cycle_tilde_08_setupDone = true;
                this->cycle_tilde_08_ph_dspsetup();
            }
            
            void cycle_tilde_08_bufferUpdated() {
                this->cycle_tilde_08_wrap = (long)(this->cycle_tilde_08_buffer->getSize()) - 1;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                cycle_tilde_08_frequency = 0;
                cycle_tilde_08_phase_offset = 0;
                p_37_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                cycle_tilde_08_wrap = 0;
                cycle_tilde_08_ph_currentPhase = 0;
                cycle_tilde_08_ph_conv = 0;
                cycle_tilde_08_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number cycle_tilde_08_frequency;
                number cycle_tilde_08_phase_offset;
                number p_37_target;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef cycle_tilde_08_buffer;
                long cycle_tilde_08_wrap;
                uint32_t cycle_tilde_08_phasei;
                SampleValue cycle_tilde_08_f2i;
                number cycle_tilde_08_ph_currentPhase;
                number cycle_tilde_08_ph_conv;
                bool cycle_tilde_08_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_4265* p_37;
            
    };
    
    class RNBOSubpatcher_4289 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_4292;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_4276 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4289;
                        friend class rnbomatic;
                        
                        public:
                        
                        class RNBOSubpatcher_4274 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4276;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4269 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4274;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4266 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4269;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4266()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4266()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4269* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4269 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                    
                                                                                        this->cycle_tilde_09_perform(
                                                                                            this->cycle_tilde_09_frequency,
                                                                                            this->cycle_tilde_09_phase_offset,
                                                                                            out1,
                                                                                            this->dummyBuffer,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_09_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        if (index == 0) {
                                                                                            this->cycle_tilde_09_buffer = new Float64Buffer(
                                                                                                this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                            );
                                                                                    
                                                                                            this->cycle_tilde_09_bufferUpdated();
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    
                                                                                        this->cycle_tilde_09_buffer = new Float64Buffer(
                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                        );
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->cycle_tilde_09_buffer->requestSize(16384, 1);
                                                                                        this->cycle_tilde_09_buffer->setSampleRate(this->sr);
                                                                                        this->cycle_tilde_09_buffer = this->cycle_tilde_09_buffer->allocateIfNeeded();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_09_frequency_set(number v) {
                                                                                        this->cycle_tilde_09_frequency = v;
                                                                                    }
                                                                                    
                                                                                    void receive_44_output_number_set(number v) {
                                                                                        this->receive_44_output_number = v;
                                                                                        this->cycle_tilde_09_frequency_set(v);
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_09_perform(
                                                                                        number frequency,
                                                                                        number phase_offset,
                                                                                        SampleValue * out1,
                                                                                        SampleValue * out2,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(phase_offset);
                                                                                        auto __cycle_tilde_09_f2i = this->cycle_tilde_09_f2i;
                                                                                        auto __cycle_tilde_09_buffer = this->cycle_tilde_09_buffer;
                                                                                        auto __cycle_tilde_09_phasei = this->cycle_tilde_09_phasei;
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            {
                                                                                                uint32_t uint_phase;
                                                                                    
                                                                                                {
                                                                                                    {
                                                                                                        uint_phase = __cycle_tilde_09_phasei;
                                                                                                    }
                                                                                                }
                                                                                    
                                                                                                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                number y0 = __cycle_tilde_09_buffer[(Index)idx];
                                                                                                number y1 = __cycle_tilde_09_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                number y = y0 + frac * (y1 - y0);
                                                                                    
                                                                                                {
                                                                                                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_09_f2i));
                                                                                                    __cycle_tilde_09_phasei = uint32_add(__cycle_tilde_09_phasei, pincr);
                                                                                                }
                                                                                    
                                                                                                out1[(Index)i] = y;
                                                                                                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_09_phasei = __cycle_tilde_09_phasei;
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number cycle_tilde_09_ph_next(number freq, number reset) {
                                                                                        {
                                                                                            {
                                                                                                if (reset >= 0.)
                                                                                                    this->cycle_tilde_09_ph_currentPhase = reset;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        number pincr = freq * this->cycle_tilde_09_ph_conv;
                                                                                    
                                                                                        if (this->cycle_tilde_09_ph_currentPhase < 0.)
                                                                                            this->cycle_tilde_09_ph_currentPhase = 1. + this->cycle_tilde_09_ph_currentPhase;
                                                                                    
                                                                                        if (this->cycle_tilde_09_ph_currentPhase > 1.)
                                                                                            this->cycle_tilde_09_ph_currentPhase = this->cycle_tilde_09_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->cycle_tilde_09_ph_currentPhase;
                                                                                        this->cycle_tilde_09_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_09_ph_reset() {
                                                                                        this->cycle_tilde_09_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_09_ph_dspsetup() {
                                                                                        this->cycle_tilde_09_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_09_dspsetup(bool force) {
                                                                                        if ((bool)(this->cycle_tilde_09_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->cycle_tilde_09_phasei = 0;
                                                                                        this->cycle_tilde_09_f2i = (number)4294967296 / this->samplerate();
                                                                                        this->cycle_tilde_09_wrap = (long)(this->cycle_tilde_09_buffer->getSize()) - 1;
                                                                                        this->cycle_tilde_09_setupDone = true;
                                                                                        this->cycle_tilde_09_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_09_bufferUpdated() {
                                                                                        this->cycle_tilde_09_wrap = (long)(this->cycle_tilde_09_buffer->getSize()) - 1;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_44_output_number = 0;
                                                                                        cycle_tilde_09_frequency = 0;
                                                                                        cycle_tilde_09_phase_offset = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        cycle_tilde_09_wrap = 0;
                                                                                        cycle_tilde_09_ph_currentPhase = 0;
                                                                                        cycle_tilde_09_ph_conv = 0;
                                                                                        cycle_tilde_09_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_44_output_number;
                                                                                        list receive_44_output_list;
                                                                                        number cycle_tilde_09_frequency;
                                                                                        number cycle_tilde_09_phase_offset;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        Float64BufferRef cycle_tilde_09_buffer;
                                                                                        long cycle_tilde_09_wrap;
                                                                                        uint32_t cycle_tilde_09_phasei;
                                                                                        SampleValue cycle_tilde_09_f2i;
                                                                                        number cycle_tilde_09_ph_currentPhase;
                                                                                        number cycle_tilde_09_ph_conv;
                                                                                        bool cycle_tilde_09_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4267 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4269;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4267()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4267()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4269* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4269 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_15_perform(this->phasor_15_freq, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->phasor_15_sigbuf = resizeSignal(this->phasor_15_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_15_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_15_freq_set(number v) {
                                                                                        this->phasor_15_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_45_output_number_set(number v) {
                                                                                        this->receive_45_output_number = v;
                                                                                        this->phasor_15_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_15_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_15_ph_next(freq, -1);
                                                                                            this->phasor_15_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_15_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_15_ph_conv;
                                                                                    
                                                                                        if (this->phasor_15_ph_currentPhase < 0.)
                                                                                            this->phasor_15_ph_currentPhase = 1. + this->phasor_15_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_15_ph_currentPhase > 1.)
                                                                                            this->phasor_15_ph_currentPhase = this->phasor_15_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_15_ph_currentPhase;
                                                                                        this->phasor_15_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_15_ph_reset() {
                                                                                        this->phasor_15_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_15_ph_dspsetup() {
                                                                                        this->phasor_15_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_15_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_15_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_15_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_15_setupDone = true;
                                                                                        this->phasor_15_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_45_output_number = 0;
                                                                                        phasor_15_freq = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_15_sigbuf = nullptr;
                                                                                        phasor_15_lastLockedPhase = 0;
                                                                                        phasor_15_conv = 0;
                                                                                        phasor_15_ph_currentPhase = 0;
                                                                                        phasor_15_ph_conv = 0;
                                                                                        phasor_15_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_45_output_number;
                                                                                        list receive_45_output_list;
                                                                                        number phasor_15_freq;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_15_sigbuf;
                                                                                        number phasor_15_lastLockedPhase;
                                                                                        number phasor_15_conv;
                                                                                        number phasor_15_ph_currentPhase;
                                                                                        number phasor_15_ph_conv;
                                                                                        bool phasor_15_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4268 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4269;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4268()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4268()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4269* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4269 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number wrap(number x, number low, number high) {
                                                                                        number lo;
                                                                                        number hi;
                                                                                    
                                                                                        if (low == high)
                                                                                            return low;
                                                                                    
                                                                                        if (low > high) {
                                                                                            hi = low;
                                                                                            lo = high;
                                                                                        } else {
                                                                                            lo = low;
                                                                                            hi = high;
                                                                                        }
                                                                                    
                                                                                        number range = hi - lo;
                                                                                    
                                                                                        if (x >= lo && x < hi)
                                                                                            return x;
                                                                                    
                                                                                        if (range <= 0.000000001)
                                                                                            return lo;
                                                                                    
                                                                                        long numWraps = (long)(trunc((x - lo) / range));
                                                                                        numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                        number result = x - range * numWraps;
                                                                                    
                                                                                        if (result >= hi)
                                                                                            return result - range;
                                                                                        else
                                                                                            return result;
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_16_perform(this->phasor_16_freq, this->signals[0], n);
                                                                                        this->triangle_tilde_08_perform(this->signals[0], this->triangle_tilde_08_duty, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 1; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->phasor_16_sigbuf = resizeSignal(this->phasor_16_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_16_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_16_freq_set(number v) {
                                                                                        this->phasor_16_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_46_output_number_set(number v) {
                                                                                        this->receive_46_output_number = v;
                                                                                        this->phasor_16_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_16_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_16_ph_next(freq, -1);
                                                                                            this->phasor_16_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void triangle_tilde_08_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                        RNBO_UNUSED(duty);
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            number p1 = 0.5;
                                                                                            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                    
                                                                                            if (wrappedPhase < p1) {
                                                                                                out1[(Index)i] = wrappedPhase / p1;
                                                                                                continue;
                                                                                            } else {
                                                                                                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_16_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_16_ph_conv;
                                                                                    
                                                                                        if (this->phasor_16_ph_currentPhase < 0.)
                                                                                            this->phasor_16_ph_currentPhase = 1. + this->phasor_16_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_16_ph_currentPhase > 1.)
                                                                                            this->phasor_16_ph_currentPhase = this->phasor_16_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_16_ph_currentPhase;
                                                                                        this->phasor_16_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_16_ph_reset() {
                                                                                        this->phasor_16_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_16_ph_dspsetup() {
                                                                                        this->phasor_16_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_16_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_16_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_16_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_16_setupDone = true;
                                                                                        this->phasor_16_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        triangle_tilde_08_phase = 0;
                                                                                        triangle_tilde_08_duty = 0.5;
                                                                                        phasor_16_freq = 0;
                                                                                        receive_46_output_number = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_16_sigbuf = nullptr;
                                                                                        phasor_16_lastLockedPhase = 0;
                                                                                        phasor_16_conv = 0;
                                                                                        phasor_16_ph_currentPhase = 0;
                                                                                        phasor_16_ph_conv = 0;
                                                                                        phasor_16_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number triangle_tilde_08_phase;
                                                                                        number triangle_tilde_08_duty;
                                                                                        number phasor_16_freq;
                                                                                        number receive_46_output_number;
                                                                                        list receive_46_output_list;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[1];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_16_sigbuf;
                                                                                        number phasor_16_lastLockedPhase;
                                                                                        number phasor_16_conv;
                                                                                        number phasor_16_ph_currentPhase;
                                                                                        number phasor_16_ph_conv;
                                                                                        bool phasor_16_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4269()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4269()
                                                            {
                                                                delete this->p_38;
                                                                delete this->p_39;
                                                                delete this->p_40;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4274* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4274 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_38_perform(this->signals[0], n);
                                                                this->p_39_perform(this->signals[1], n);
                                                                this->p_40_perform(this->signals[2], n);
                                                            
                                                                this->selector_11_perform(
                                                                    this->selector_11_onoff,
                                                                    this->zeroBuffer,
                                                                    this->signals[0],
                                                                    this->signals[1],
                                                                    this->signals[2],
                                                                    out1,
                                                                    n
                                                                );
                                                            
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    Index i;
                                                            
                                                                    for (i = 0; i < 3; i++) {
                                                                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                    }
                                                            
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_38->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_39->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_40->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_38 = new RNBOSubpatcher_4266();
                                                                this->p_38->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_38->initialize();
                                                                this->p_38->setParameterOffset(this->getParameterOffset(this->p_38));
                                                                this->p_39 = new RNBOSubpatcher_4267();
                                                                this->p_39->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_39->initialize();
                                                                this->p_39->setParameterOffset(this->getParameterOffset(this->p_39));
                                                                this->p_40 = new RNBOSubpatcher_4268();
                                                                this->p_40->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_40->initialize();
                                                                this->p_40->setParameterOffset(this->getParameterOffset(this->p_40));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_38->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                this->p_39->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                this->p_40->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_38->processTempoEvent(time, tempo);
                                                                this->p_39->processTempoEvent(time, tempo);
                                                                this->p_40->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_38->processTransportEvent(time, state);
                                                                this->p_39->processTransportEvent(time, state);
                                                                this->p_40->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_38->processBeatTimeEvent(time, beattime);
                                                                this->p_39->processBeatTimeEvent(time, beattime);
                                                                this->p_40->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_38->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_39->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_40->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        this->p_38->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        this->p_39->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        this->p_40->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        return this->p_38->getParameterValue(index);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        return this->p_39->getParameterValue(index);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        return this->p_40->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_38->getNumParameters() + this->p_39->getNumParameters() + this->p_40->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        return this->p_38->getParameterName(index);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        return this->p_39->getParameterName(index);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        return this->p_40->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        return this->p_38->getParameterId(index);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        return this->p_39->getParameterId(index);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        return this->p_40->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_38->getNumParameters())
                                                                            this->p_38->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_38->getNumParameters();
                                                            
                                                                        if (index < this->p_39->getNumParameters())
                                                                            this->p_39->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_39->getNumParameters();
                                                            
                                                                        if (index < this->p_40->getNumParameters())
                                                                            this->p_40->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_38)
                                                                    return 0;
                                                            
                                                                if (subpatcher == this->p_39)
                                                                    return 0 + this->p_38->getNumParameters();
                                                            
                                                                if (subpatcher == this->p_40)
                                                                    return 0 + this->p_38->getNumParameters() + this->p_39->getNumParameters();
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        return this->p_38->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        return this->p_39->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        return this->p_40->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        return this->p_38->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        return this->p_39->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        return this->p_40->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_38->getNumParameters())
                                                                        return this->p_38->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_38->getNumParameters();
                                                            
                                                                    if (index < this->p_39->getNumParameters())
                                                                        return this->p_39->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_39->getNumParameters();
                                                            
                                                                    if (index < this->p_40->getNumParameters())
                                                                        return this->p_40->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_38->processNumMessage(tag, objectId, time, payload);
                                                                this->p_39->processNumMessage(tag, objectId, time, payload);
                                                                this->p_40->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_38->processListMessage(tag, objectId, time, payload);
                                                                this->p_39->processListMessage(tag, objectId, time, payload);
                                                                this->p_40->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_38->processBangMessage(tag, objectId, time);
                                                                this->p_39->processBangMessage(tag, objectId, time);
                                                                this->p_40->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_38->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                auto subpatchResult_1 = this->p_39->resolveTag(tag);
                                                            
                                                                if (subpatchResult_1)
                                                                    return subpatchResult_1;
                                                            
                                                                auto subpatchResult_2 = this->p_40->resolveTag(tag);
                                                            
                                                                if (subpatchResult_2)
                                                                    return subpatchResult_2;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_38->processDataViewUpdate(index, time);
                                                                this->p_39->processDataViewUpdate(index, time);
                                                                this->p_40->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_38->initializeObjects();
                                                                this->p_39->initializeObjects();
                                                                this->p_40->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_38->startup();
                                                                this->p_39->startup();
                                                                this->p_40->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_38->allocateDataRefs();
                                                                this->p_39->allocateDataRefs();
                                                                this->p_40->allocateDataRefs();
                                                            }
                                                            
                                                            void selector_11_onoff_set(number v) {
                                                                this->selector_11_onoff = v;
                                                            }
                                                            
                                                            void receive_47_output_number_set(number v) {
                                                                this->receive_47_output_number = v;
                                                                this->selector_11_onoff_set(v);
                                                            }
                                                            
                                                            void p_38_target_FMLFOfreq_number_set(number v) {
                                                                this->p_38->updateTime(this->_currentTime);
                                                                this->p_38->receive_44_output_number_set(v);
                                                            }
                                                            
                                                            void p_39_target_FMLFOfreq_number_set(number v) {
                                                                this->p_39->updateTime(this->_currentTime);
                                                                this->p_39->receive_45_output_number_set(v);
                                                            }
                                                            
                                                            void p_40_target_FMLFOfreq_number_set(number v) {
                                                                this->p_40->updateTime(this->_currentTime);
                                                                this->p_40->receive_46_output_number_set(v);
                                                            }
                                                            
                                                            void p_38_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: sin
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_38->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_39_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: phasor
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_39->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_40_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: triangle
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_40->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void selector_11_perform(
                                                                number onoff,
                                                                const SampleValue * in1,
                                                                const SampleValue * in2,
                                                                const SampleValue * in3,
                                                                const SampleValue * in4,
                                                                SampleValue * out,
                                                                Index n
                                                            ) {
                                                                Index i;
                                                            
                                                                for (i = 0; i < n; i++) {
                                                                    if (onoff >= 1 && onoff < 2)
                                                                        out[(Index)i] = in1[(Index)i];
                                                                    else if (onoff >= 2 && onoff < 3)
                                                                        out[(Index)i] = in2[(Index)i];
                                                                    else if (onoff >= 3 && onoff < 4)
                                                                        out[(Index)i] = in3[(Index)i];
                                                                    else if (onoff >= 4 && onoff < 5)
                                                                        out[(Index)i] = in4[(Index)i];
                                                                    else
                                                                        out[(Index)i] = 0;
                                                                }
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                receive_47_output_number = 0;
                                                                selector_11_onoff = 1;
                                                                p_38_target = 0;
                                                                p_39_target = 0;
                                                                p_40_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                signals[0] = nullptr;
                                                                signals[1] = nullptr;
                                                                signals[2] = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number receive_47_output_number;
                                                                list receive_47_output_list;
                                                                number selector_11_onoff;
                                                                number p_38_target;
                                                                number p_39_target;
                                                                number p_40_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                SampleValue * signals[3];
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4266* p_38;
                                                                RNBOSubpatcher_4267* p_39;
                                                                RNBOSubpatcher_4268* p_40;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4274()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4274()
                                        {
                                            delete this->p_41;
                                        }
                                        
                                        virtual RNBOSubpatcher_4276* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4276 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_41_perform(out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_41->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_41 = new RNBOSubpatcher_4269();
                                            this->p_41->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_41->initialize();
                                            this->p_41->setParameterOffset(this->getParameterOffset(this->p_41));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_41->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_41->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_41->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_41->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_41->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    this->p_41->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    return this->p_41->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_41->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    return this->p_41->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    return this->p_41->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_41->getNumParameters())
                                                        this->p_41->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_41)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    return this->p_41->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    return this->p_41->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_41->getNumParameters())
                                                    return this->p_41->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_41->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_41->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_41->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_41->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_41->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_41->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_41->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_41->allocateDataRefs();
                                        }
                                        
                                        void p_41_target_FMLFOsource_number_set(number v) {
                                            this->p_41->updateTime(this->_currentTime);
                                            this->p_41->receive_47_output_number_set(v);
                                        }
                                        
                                        void p_41_target_FMLFOfreq_number_set(number v) {
                                            this->p_41->updateTime(this->_currentTime);
                                            this->p_41->p_38_target_FMLFOfreq_number_set(v);
                                            this->p_41->updateTime(this->_currentTime);
                                            this->p_41->p_39_target_FMLFOfreq_number_set(v);
                                            this->p_41->updateTime(this->_currentTime);
                                            this->p_41->p_40_target_FMLFOfreq_number_set(v);
                                        }
                                        
                                        void p_41_perform(SampleValue * out1, Index n) {
                                            // subpatcher: generator
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_41->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            p_41_target = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number p_41_target;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4269* p_41;
                                        
                        };
                        
                        class RNBOSubpatcher_4275 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4276;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4273 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4275;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4270 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4273;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4270()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4270()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4273* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4273 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                    
                                                                                        this->cycle_tilde_10_perform(
                                                                                            this->cycle_tilde_10_frequency,
                                                                                            this->cycle_tilde_10_phase_offset,
                                                                                            out1,
                                                                                            this->dummyBuffer,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_10_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        if (index == 0) {
                                                                                            this->cycle_tilde_10_buffer = new Float64Buffer(
                                                                                                this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                            );
                                                                                    
                                                                                            this->cycle_tilde_10_bufferUpdated();
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    
                                                                                        this->cycle_tilde_10_buffer = new Float64Buffer(
                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                        );
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->cycle_tilde_10_buffer->requestSize(16384, 1);
                                                                                        this->cycle_tilde_10_buffer->setSampleRate(this->sr);
                                                                                        this->cycle_tilde_10_buffer = this->cycle_tilde_10_buffer->allocateIfNeeded();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_10_frequency_set(number v) {
                                                                                        this->cycle_tilde_10_frequency = v;
                                                                                    }
                                                                                    
                                                                                    void receive_48_output_number_set(number v) {
                                                                                        this->receive_48_output_number = v;
                                                                                        this->cycle_tilde_10_frequency_set(v);
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_10_perform(
                                                                                        number frequency,
                                                                                        number phase_offset,
                                                                                        SampleValue * out1,
                                                                                        SampleValue * out2,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(phase_offset);
                                                                                        auto __cycle_tilde_10_f2i = this->cycle_tilde_10_f2i;
                                                                                        auto __cycle_tilde_10_buffer = this->cycle_tilde_10_buffer;
                                                                                        auto __cycle_tilde_10_phasei = this->cycle_tilde_10_phasei;
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            {
                                                                                                uint32_t uint_phase;
                                                                                    
                                                                                                {
                                                                                                    {
                                                                                                        uint_phase = __cycle_tilde_10_phasei;
                                                                                                    }
                                                                                                }
                                                                                    
                                                                                                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                number y0 = __cycle_tilde_10_buffer[(Index)idx];
                                                                                                number y1 = __cycle_tilde_10_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                number y = y0 + frac * (y1 - y0);
                                                                                    
                                                                                                {
                                                                                                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_10_f2i));
                                                                                                    __cycle_tilde_10_phasei = uint32_add(__cycle_tilde_10_phasei, pincr);
                                                                                                }
                                                                                    
                                                                                                out1[(Index)i] = y;
                                                                                                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_10_phasei = __cycle_tilde_10_phasei;
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number cycle_tilde_10_ph_next(number freq, number reset) {
                                                                                        {
                                                                                            {
                                                                                                if (reset >= 0.)
                                                                                                    this->cycle_tilde_10_ph_currentPhase = reset;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        number pincr = freq * this->cycle_tilde_10_ph_conv;
                                                                                    
                                                                                        if (this->cycle_tilde_10_ph_currentPhase < 0.)
                                                                                            this->cycle_tilde_10_ph_currentPhase = 1. + this->cycle_tilde_10_ph_currentPhase;
                                                                                    
                                                                                        if (this->cycle_tilde_10_ph_currentPhase > 1.)
                                                                                            this->cycle_tilde_10_ph_currentPhase = this->cycle_tilde_10_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->cycle_tilde_10_ph_currentPhase;
                                                                                        this->cycle_tilde_10_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_10_ph_reset() {
                                                                                        this->cycle_tilde_10_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_10_ph_dspsetup() {
                                                                                        this->cycle_tilde_10_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_10_dspsetup(bool force) {
                                                                                        if ((bool)(this->cycle_tilde_10_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->cycle_tilde_10_phasei = 0;
                                                                                        this->cycle_tilde_10_f2i = (number)4294967296 / this->samplerate();
                                                                                        this->cycle_tilde_10_wrap = (long)(this->cycle_tilde_10_buffer->getSize()) - 1;
                                                                                        this->cycle_tilde_10_setupDone = true;
                                                                                        this->cycle_tilde_10_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_10_bufferUpdated() {
                                                                                        this->cycle_tilde_10_wrap = (long)(this->cycle_tilde_10_buffer->getSize()) - 1;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_48_output_number = 0;
                                                                                        cycle_tilde_10_frequency = 0;
                                                                                        cycle_tilde_10_phase_offset = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        cycle_tilde_10_wrap = 0;
                                                                                        cycle_tilde_10_ph_currentPhase = 0;
                                                                                        cycle_tilde_10_ph_conv = 0;
                                                                                        cycle_tilde_10_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_48_output_number;
                                                                                        list receive_48_output_list;
                                                                                        number cycle_tilde_10_frequency;
                                                                                        number cycle_tilde_10_phase_offset;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        Float64BufferRef cycle_tilde_10_buffer;
                                                                                        long cycle_tilde_10_wrap;
                                                                                        uint32_t cycle_tilde_10_phasei;
                                                                                        SampleValue cycle_tilde_10_f2i;
                                                                                        number cycle_tilde_10_ph_currentPhase;
                                                                                        number cycle_tilde_10_ph_conv;
                                                                                        bool cycle_tilde_10_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4271 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4273;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4271()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4271()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4273* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4273 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_17_perform(this->phasor_17_freq, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->phasor_17_sigbuf = resizeSignal(this->phasor_17_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_17_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_17_freq_set(number v) {
                                                                                        this->phasor_17_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_49_output_number_set(number v) {
                                                                                        this->receive_49_output_number = v;
                                                                                        this->phasor_17_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_17_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_17_ph_next(freq, -1);
                                                                                            this->phasor_17_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_17_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_17_ph_conv;
                                                                                    
                                                                                        if (this->phasor_17_ph_currentPhase < 0.)
                                                                                            this->phasor_17_ph_currentPhase = 1. + this->phasor_17_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_17_ph_currentPhase > 1.)
                                                                                            this->phasor_17_ph_currentPhase = this->phasor_17_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_17_ph_currentPhase;
                                                                                        this->phasor_17_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_17_ph_reset() {
                                                                                        this->phasor_17_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_17_ph_dspsetup() {
                                                                                        this->phasor_17_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_17_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_17_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_17_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_17_setupDone = true;
                                                                                        this->phasor_17_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_49_output_number = 0;
                                                                                        phasor_17_freq = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_17_sigbuf = nullptr;
                                                                                        phasor_17_lastLockedPhase = 0;
                                                                                        phasor_17_conv = 0;
                                                                                        phasor_17_ph_currentPhase = 0;
                                                                                        phasor_17_ph_conv = 0;
                                                                                        phasor_17_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_49_output_number;
                                                                                        list receive_49_output_list;
                                                                                        number phasor_17_freq;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_17_sigbuf;
                                                                                        number phasor_17_lastLockedPhase;
                                                                                        number phasor_17_conv;
                                                                                        number phasor_17_ph_currentPhase;
                                                                                        number phasor_17_ph_conv;
                                                                                        bool phasor_17_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4272 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4273;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4272()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4272()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4273* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4273 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number wrap(number x, number low, number high) {
                                                                                        number lo;
                                                                                        number hi;
                                                                                    
                                                                                        if (low == high)
                                                                                            return low;
                                                                                    
                                                                                        if (low > high) {
                                                                                            hi = low;
                                                                                            lo = high;
                                                                                        } else {
                                                                                            lo = low;
                                                                                            hi = high;
                                                                                        }
                                                                                    
                                                                                        number range = hi - lo;
                                                                                    
                                                                                        if (x >= lo && x < hi)
                                                                                            return x;
                                                                                    
                                                                                        if (range <= 0.000000001)
                                                                                            return lo;
                                                                                    
                                                                                        long numWraps = (long)(trunc((x - lo) / range));
                                                                                        numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                        number result = x - range * numWraps;
                                                                                    
                                                                                        if (result >= hi)
                                                                                            return result - range;
                                                                                        else
                                                                                            return result;
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_18_perform(this->phasor_18_freq, this->signals[0], n);
                                                                                        this->triangle_tilde_09_perform(this->signals[0], this->triangle_tilde_09_duty, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 1; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->phasor_18_sigbuf = resizeSignal(this->phasor_18_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_18_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_18_freq_set(number v) {
                                                                                        this->phasor_18_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_50_output_number_set(number v) {
                                                                                        this->receive_50_output_number = v;
                                                                                        this->phasor_18_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_18_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_18_ph_next(freq, -1);
                                                                                            this->phasor_18_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void triangle_tilde_09_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                        RNBO_UNUSED(duty);
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            number p1 = 0.5;
                                                                                            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                    
                                                                                            if (wrappedPhase < p1) {
                                                                                                out1[(Index)i] = wrappedPhase / p1;
                                                                                                continue;
                                                                                            } else {
                                                                                                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_18_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_18_ph_conv;
                                                                                    
                                                                                        if (this->phasor_18_ph_currentPhase < 0.)
                                                                                            this->phasor_18_ph_currentPhase = 1. + this->phasor_18_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_18_ph_currentPhase > 1.)
                                                                                            this->phasor_18_ph_currentPhase = this->phasor_18_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_18_ph_currentPhase;
                                                                                        this->phasor_18_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_18_ph_reset() {
                                                                                        this->phasor_18_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_18_ph_dspsetup() {
                                                                                        this->phasor_18_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_18_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_18_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_18_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_18_setupDone = true;
                                                                                        this->phasor_18_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        triangle_tilde_09_phase = 0;
                                                                                        triangle_tilde_09_duty = 0.5;
                                                                                        phasor_18_freq = 0;
                                                                                        receive_50_output_number = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_18_sigbuf = nullptr;
                                                                                        phasor_18_lastLockedPhase = 0;
                                                                                        phasor_18_conv = 0;
                                                                                        phasor_18_ph_currentPhase = 0;
                                                                                        phasor_18_ph_conv = 0;
                                                                                        phasor_18_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number triangle_tilde_09_phase;
                                                                                        number triangle_tilde_09_duty;
                                                                                        number phasor_18_freq;
                                                                                        number receive_50_output_number;
                                                                                        list receive_50_output_list;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[1];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_18_sigbuf;
                                                                                        number phasor_18_lastLockedPhase;
                                                                                        number phasor_18_conv;
                                                                                        number phasor_18_ph_currentPhase;
                                                                                        number phasor_18_ph_conv;
                                                                                        bool phasor_18_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4273()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4273()
                                                            {
                                                                delete this->p_42;
                                                                delete this->p_43;
                                                                delete this->p_44;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4275* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4275 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_42_perform(this->signals[0], n);
                                                                this->p_43_perform(this->signals[1], n);
                                                                this->p_44_perform(this->signals[2], n);
                                                            
                                                                this->selector_12_perform(
                                                                    this->selector_12_onoff,
                                                                    this->zeroBuffer,
                                                                    this->signals[0],
                                                                    this->signals[1],
                                                                    this->signals[2],
                                                                    out1,
                                                                    n
                                                                );
                                                            
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    Index i;
                                                            
                                                                    for (i = 0; i < 3; i++) {
                                                                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                    }
                                                            
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_42->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_43->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_44->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_42 = new RNBOSubpatcher_4270();
                                                                this->p_42->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_42->initialize();
                                                                this->p_42->setParameterOffset(this->getParameterOffset(this->p_42));
                                                                this->p_43 = new RNBOSubpatcher_4271();
                                                                this->p_43->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_43->initialize();
                                                                this->p_43->setParameterOffset(this->getParameterOffset(this->p_43));
                                                                this->p_44 = new RNBOSubpatcher_4272();
                                                                this->p_44->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_44->initialize();
                                                                this->p_44->setParameterOffset(this->getParameterOffset(this->p_44));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_42->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                this->p_43->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                this->p_44->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_42->processTempoEvent(time, tempo);
                                                                this->p_43->processTempoEvent(time, tempo);
                                                                this->p_44->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_42->processTransportEvent(time, state);
                                                                this->p_43->processTransportEvent(time, state);
                                                                this->p_44->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_42->processBeatTimeEvent(time, beattime);
                                                                this->p_43->processBeatTimeEvent(time, beattime);
                                                                this->p_44->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_42->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_43->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_44->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        this->p_42->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        this->p_43->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        this->p_44->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        return this->p_42->getParameterValue(index);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        return this->p_43->getParameterValue(index);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        return this->p_44->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_42->getNumParameters() + this->p_43->getNumParameters() + this->p_44->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        return this->p_42->getParameterName(index);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        return this->p_43->getParameterName(index);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        return this->p_44->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        return this->p_42->getParameterId(index);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        return this->p_43->getParameterId(index);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        return this->p_44->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_42->getNumParameters())
                                                                            this->p_42->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_42->getNumParameters();
                                                            
                                                                        if (index < this->p_43->getNumParameters())
                                                                            this->p_43->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_43->getNumParameters();
                                                            
                                                                        if (index < this->p_44->getNumParameters())
                                                                            this->p_44->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_42)
                                                                    return 0;
                                                            
                                                                if (subpatcher == this->p_43)
                                                                    return 0 + this->p_42->getNumParameters();
                                                            
                                                                if (subpatcher == this->p_44)
                                                                    return 0 + this->p_42->getNumParameters() + this->p_43->getNumParameters();
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        return this->p_42->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        return this->p_43->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        return this->p_44->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        return this->p_42->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        return this->p_43->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        return this->p_44->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_42->getNumParameters())
                                                                        return this->p_42->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_42->getNumParameters();
                                                            
                                                                    if (index < this->p_43->getNumParameters())
                                                                        return this->p_43->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_43->getNumParameters();
                                                            
                                                                    if (index < this->p_44->getNumParameters())
                                                                        return this->p_44->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_42->processNumMessage(tag, objectId, time, payload);
                                                                this->p_43->processNumMessage(tag, objectId, time, payload);
                                                                this->p_44->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_42->processListMessage(tag, objectId, time, payload);
                                                                this->p_43->processListMessage(tag, objectId, time, payload);
                                                                this->p_44->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_42->processBangMessage(tag, objectId, time);
                                                                this->p_43->processBangMessage(tag, objectId, time);
                                                                this->p_44->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_42->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                auto subpatchResult_1 = this->p_43->resolveTag(tag);
                                                            
                                                                if (subpatchResult_1)
                                                                    return subpatchResult_1;
                                                            
                                                                auto subpatchResult_2 = this->p_44->resolveTag(tag);
                                                            
                                                                if (subpatchResult_2)
                                                                    return subpatchResult_2;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_42->processDataViewUpdate(index, time);
                                                                this->p_43->processDataViewUpdate(index, time);
                                                                this->p_44->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_42->initializeObjects();
                                                                this->p_43->initializeObjects();
                                                                this->p_44->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_42->startup();
                                                                this->p_43->startup();
                                                                this->p_44->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_42->allocateDataRefs();
                                                                this->p_43->allocateDataRefs();
                                                                this->p_44->allocateDataRefs();
                                                            }
                                                            
                                                            void selector_12_onoff_set(number v) {
                                                                this->selector_12_onoff = v;
                                                            }
                                                            
                                                            void receive_51_output_number_set(number v) {
                                                                this->receive_51_output_number = v;
                                                                this->selector_12_onoff_set(v);
                                                            }
                                                            
                                                            void p_42_target_FMLFO2freq_number_set(number v) {
                                                                this->p_42->updateTime(this->_currentTime);
                                                                this->p_42->receive_48_output_number_set(v);
                                                            }
                                                            
                                                            void p_43_target_FMLFO2freq_number_set(number v) {
                                                                this->p_43->updateTime(this->_currentTime);
                                                                this->p_43->receive_49_output_number_set(v);
                                                            }
                                                            
                                                            void p_44_target_FMLFO2freq_number_set(number v) {
                                                                this->p_44->updateTime(this->_currentTime);
                                                                this->p_44->receive_50_output_number_set(v);
                                                            }
                                                            
                                                            void p_42_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: sin
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_42->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_43_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: phasor
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_43->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_44_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: triangle
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_44->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void selector_12_perform(
                                                                number onoff,
                                                                const SampleValue * in1,
                                                                const SampleValue * in2,
                                                                const SampleValue * in3,
                                                                const SampleValue * in4,
                                                                SampleValue * out,
                                                                Index n
                                                            ) {
                                                                Index i;
                                                            
                                                                for (i = 0; i < n; i++) {
                                                                    if (onoff >= 1 && onoff < 2)
                                                                        out[(Index)i] = in1[(Index)i];
                                                                    else if (onoff >= 2 && onoff < 3)
                                                                        out[(Index)i] = in2[(Index)i];
                                                                    else if (onoff >= 3 && onoff < 4)
                                                                        out[(Index)i] = in3[(Index)i];
                                                                    else if (onoff >= 4 && onoff < 5)
                                                                        out[(Index)i] = in4[(Index)i];
                                                                    else
                                                                        out[(Index)i] = 0;
                                                                }
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                receive_51_output_number = 0;
                                                                selector_12_onoff = 1;
                                                                p_42_target = 0;
                                                                p_43_target = 0;
                                                                p_44_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                signals[0] = nullptr;
                                                                signals[1] = nullptr;
                                                                signals[2] = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number receive_51_output_number;
                                                                list receive_51_output_list;
                                                                number selector_12_onoff;
                                                                number p_42_target;
                                                                number p_43_target;
                                                                number p_44_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                SampleValue * signals[3];
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4270* p_42;
                                                                RNBOSubpatcher_4271* p_43;
                                                                RNBOSubpatcher_4272* p_44;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4275()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4275()
                                        {
                                            delete this->p_45;
                                        }
                                        
                                        virtual RNBOSubpatcher_4276* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4276 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_45_perform(out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_45->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_45 = new RNBOSubpatcher_4273();
                                            this->p_45->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_45->initialize();
                                            this->p_45->setParameterOffset(this->getParameterOffset(this->p_45));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_45->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_45->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_45->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_45->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_45->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    this->p_45->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    return this->p_45->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_45->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    return this->p_45->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    return this->p_45->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_45->getNumParameters())
                                                        this->p_45->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_45)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    return this->p_45->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    return this->p_45->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_45->getNumParameters())
                                                    return this->p_45->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_45->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_45->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_45->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_45->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_45->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_45->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_45->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_45->allocateDataRefs();
                                        }
                                        
                                        void p_45_target_FMLFO2source_number_set(number v) {
                                            this->p_45->updateTime(this->_currentTime);
                                            this->p_45->receive_51_output_number_set(v);
                                        }
                                        
                                        void p_45_target_FMLFO2freq_number_set(number v) {
                                            this->p_45->updateTime(this->_currentTime);
                                            this->p_45->p_42_target_FMLFO2freq_number_set(v);
                                            this->p_45->updateTime(this->_currentTime);
                                            this->p_45->p_43_target_FMLFO2freq_number_set(v);
                                            this->p_45->updateTime(this->_currentTime);
                                            this->p_45->p_44_target_FMLFO2freq_number_set(v);
                                        }
                                        
                                        void p_45_perform(SampleValue * out1, Index n) {
                                            // subpatcher: generator
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_45->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            p_45_target = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number p_45_target;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4273* p_45;
                                        
                        };
                        
                        RNBOSubpatcher_4276()
                        {
                        }
                        
                        ~RNBOSubpatcher_4276()
                        {
                            delete this->p_46;
                            delete this->p_47;
                        }
                        
                        virtual RNBOSubpatcher_4289* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4289 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->signalgate_05_perform(this->signalgate_05_onoff, this->zeroBuffer, this->signals[0], n);
                            this->p_46_perform(this->signals[1], n);
                            this->dspexpr_16_perform(this->signals[1], this->dspexpr_16_in2, this->signals[2], n);
                            this->p_47_perform(this->signals[1], n);
                            this->dspexpr_18_perform(this->signals[1], this->dspexpr_18_in2, this->signals[3], n);
                            this->dspexpr_17_perform(this->signals[2], this->signals[3], this->signals[1], n);
                        
                            this->selector_13_perform(
                                this->selector_13_onoff,
                                this->signals[0],
                                this->signals[1],
                                this->signals[3],
                                n
                            );
                        
                            this->dspexpr_15_perform(this->dspexpr_15_in1, this->signals[3], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                            this->p_46->prepareToProcess(sampleRate, maxBlockSize, force);
                            this->p_47->prepareToProcess(sampleRate, maxBlockSize, force);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {
                            this->p_46 = new RNBOSubpatcher_4274();
                            this->p_46->setEngineAndPatcher(this->getEngine(), this);
                            this->p_46->initialize();
                            this->p_46->setParameterOffset(this->getParameterOffset(this->p_46));
                            this->p_47 = new RNBOSubpatcher_4275();
                            this->p_47->setEngineAndPatcher(this->getEngine(), this);
                            this->p_47->initialize();
                            this->p_47->setParameterOffset(this->getParameterOffset(this->p_47));
                        }
                        
                        void getPreset(PatcherStateInterface& preset) {
                            this->p_46->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO[1]"));
                            this->p_47->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO"));
                        }
                        
                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                            this->updateTime(time);
                            this->p_46->processTempoEvent(time, tempo);
                            this->p_47->processTempoEvent(time, tempo);
                        }
                        
                        void processTransportEvent(MillisecondTime time, TransportState state) {
                            this->updateTime(time);
                            this->p_46->processTransportEvent(time, state);
                            this->p_47->processTransportEvent(time, state);
                        }
                        
                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                            this->updateTime(time);
                            this->p_46->processBeatTimeEvent(time, beattime);
                            this->p_47->processBeatTimeEvent(time, beattime);
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                            this->updateTime(time);
                            this->p_46->processTimeSignatureEvent(time, numerator, denominator);
                            this->p_47->processTimeSignatureEvent(time, numerator, denominator);
                        }
                        
                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                            RNBO_UNUSED(v);
                            this->updateTime(time);
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    this->p_46->setParameterValue(index, v, time);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    this->p_47->setParameterValue(index, v, time);
                        
                                break;
                                }
                            }
                        }
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    return this->p_46->getParameterValue(index);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    return this->p_47->getParameterValue(index);
                        
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0 + this->p_46->getNumParameters() + this->p_47->getNumParameters();
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    return this->p_46->getParameterName(index);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    return this->p_47->getParameterName(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    return this->p_46->getParameterId(index);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    return this->p_47->getParameterId(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                            {
                                switch (index) {
                                default:
                                    {
                                    index -= 0;
                        
                                    if (index < this->p_46->getNumParameters())
                                        this->p_46->getParameterInfo(index, info);
                        
                                    index -= this->p_46->getNumParameters();
                        
                                    if (index < this->p_47->getNumParameters())
                                        this->p_47->getParameterInfo(index, info);
                        
                                    break;
                                    }
                                }
                            }
                        }
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                            if (subpatcher == this->p_46)
                                return 0;
                        
                            if (subpatcher == this->p_47)
                                return 0 + this->p_46->getNumParameters();
                        
                            return 0;
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    return this->p_46->convertToNormalizedParameterValue(index, value);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    return this->p_47->convertToNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    return this->p_46->convertFromNormalizedParameterValue(index, value);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    return this->p_47->convertFromNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_46->getNumParameters())
                                    return this->p_46->constrainParameterValue(index, value);
                        
                                index -= this->p_46->getNumParameters();
                        
                                if (index < this->p_47->getNumParameters())
                                    return this->p_47->constrainParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_46->processNumMessage(tag, objectId, time, payload);
                            this->p_47->processNumMessage(tag, objectId, time, payload);
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_46->processListMessage(tag, objectId, time, payload);
                            this->p_47->processListMessage(tag, objectId, time, payload);
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_46->processBangMessage(tag, objectId, time);
                            this->p_47->processBangMessage(tag, objectId, time);
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            auto subpatchResult_0 = this->p_46->resolveTag(tag);
                        
                            if (subpatchResult_0)
                                return subpatchResult_0;
                        
                            auto subpatchResult_1 = this->p_47->resolveTag(tag);
                        
                            if (subpatchResult_1)
                                return subpatchResult_1;
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->p_46->processDataViewUpdate(index, time);
                            this->p_47->processDataViewUpdate(index, time);
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->p_46->initializeObjects();
                            this->p_47->initializeObjects();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->p_46->startup();
                            this->p_47->startup();
                        }
                        
                        void allocateDataRefs() {
                            this->p_46->allocateDataRefs();
                            this->p_47->allocateDataRefs();
                        }
                        
                        void p_46_target_FMLFOsource_number_set(number v) {
                            this->p_46->updateTime(this->_currentTime);
                            this->p_46->p_41_target_FMLFOsource_number_set(v);
                        }
                        
                        void dspexpr_16_in2_set(number v) {
                            this->dspexpr_16_in2 = v;
                        }
                        
                        void receive_55_output_number_set(number v) {
                            this->receive_55_output_number = v;
                            this->dspexpr_16_in2_set(v);
                        }
                        
                        void signalgate_05_onoff_set(number v) {
                            this->signalgate_05_onoff = v;
                        }
                        
                        void receive_54_output_number_set(number v) {
                            this->receive_54_output_number = v;
                            this->signalgate_05_onoff_set(v);
                        }
                        
                        void dspexpr_15_in1_set(number v) {
                            this->dspexpr_15_in1 = v;
                        }
                        
                        void receive_52_output_number_set(number v) {
                            this->receive_52_output_number = v;
                            this->dspexpr_15_in1_set(v);
                        }
                        
                        void selector_13_onoff_set(number v) {
                            this->selector_13_onoff = v;
                        }
                        
                        void expr_04_out1_set(number v) {
                            this->expr_04_out1 = v;
                            this->selector_13_onoff_set(this->expr_04_out1);
                        }
                        
                        void expr_04_in1_set(number in1) {
                            this->expr_04_in1 = in1;
                            this->expr_04_out1_set(this->expr_04_in1 + this->expr_04_in2);//#map:generator/phasor/freq/+_obj-15:1
                        }
                        
                        void receive_53_output_number_set(number v) {
                            this->receive_53_output_number = v;
                            this->expr_04_in1_set(v);
                        }
                        
                        void p_47_target_FMLFO2source_number_set(number v) {
                            this->p_47->updateTime(this->_currentTime);
                            this->p_47->p_45_target_FMLFO2source_number_set(v);
                        }
                        
                        void p_46_target_FMLFOfreq_number_set(number v) {
                            this->p_46->updateTime(this->_currentTime);
                            this->p_46->p_41_target_FMLFOfreq_number_set(v);
                        }
                        
                        void p_47_target_FMLFO2freq_number_set(number v) {
                            this->p_47->updateTime(this->_currentTime);
                            this->p_47->p_45_target_FMLFO2freq_number_set(v);
                        }
                        
                        void signalgate_05_perform(number onoff, const SampleValue * input, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (onoff == 1) {
                                    out1[(Index)i] = input[(Index)i];
                                } else {
                                    out1[(Index)i] = 0;
                                }
                            }
                        }
                        
                        void p_46_perform(SampleValue * out1, Index n) {
                            // subpatcher: FMLFO
                            SampleArray<1> outs = {out1};
                        
                            this->p_46->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void dspexpr_16_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void p_47_perform(SampleValue * out1, Index n) {
                            // subpatcher: FMLFO
                            SampleArray<1> outs = {out1};
                        
                            this->p_47->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void dspexpr_18_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_17_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void selector_13_perform(
                            number onoff,
                            const SampleValue * in1,
                            const SampleValue * in2,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (onoff >= 1 && onoff < 2)
                                    out[(Index)i] = in1[(Index)i];
                                else if (onoff >= 2 && onoff < 3)
                                    out[(Index)i] = in2[(Index)i];
                                else
                                    out[(Index)i] = 0;
                            }
                        }
                        
                        void dspexpr_15_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            receive_52_output_number = 0;
                            dspexpr_15_in1 = 0;
                            dspexpr_15_in2 = 0;
                            expr_04_in1 = 0;
                            expr_04_in2 = 1;
                            expr_04_out1 = 0;
                            receive_53_output_number = 0;
                            selector_13_onoff = 1;
                            signalgate_05_onoff = 0;
                            receive_54_output_number = 0;
                            dspexpr_16_in1 = 0;
                            dspexpr_16_in2 = 0;
                            dspexpr_17_in1 = 0;
                            dspexpr_17_in2 = 0;
                            p_46_target = 0;
                            p_47_target = 0;
                            dspexpr_18_in1 = 0;
                            dspexpr_18_in2 = 0;
                            receive_55_output_number = 0;
                            receive_56_output_number = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number receive_52_output_number;
                            list receive_52_output_list;
                            number dspexpr_15_in1;
                            number dspexpr_15_in2;
                            number expr_04_in1;
                            number expr_04_in2;
                            number expr_04_out1;
                            number receive_53_output_number;
                            list receive_53_output_list;
                            number selector_13_onoff;
                            number signalgate_05_onoff;
                            number receive_54_output_number;
                            list receive_54_output_list;
                            number dspexpr_16_in1;
                            number dspexpr_16_in2;
                            number dspexpr_17_in1;
                            number dspexpr_17_in2;
                            number p_46_target;
                            number p_47_target;
                            number dspexpr_18_in1;
                            number dspexpr_18_in2;
                            number receive_55_output_number;
                            list receive_55_output_list;
                            number receive_56_output_number;
                            list receive_56_output_list;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                            RNBOSubpatcher_4274* p_46;
                            RNBOSubpatcher_4275* p_47;
                        
            };
            
            RNBOSubpatcher_4289()
            {
            }
            
            ~RNBOSubpatcher_4289()
            {
                delete this->p_48;
            }
            
            virtual RNBOSubpatcher_4292* getPatcher() const {
                return static_cast<RNBOSubpatcher_4292 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->p_48_perform(this->signals[0], n);
                this->phasor_19_perform(this->signals[0], out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->phasor_19_sigbuf = resizeSignal(this->phasor_19_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->phasor_19_dspsetup(forceDSPSetup);
                this->p_48->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_48 = new RNBOSubpatcher_4276();
                this->p_48->setEngineAndPatcher(this->getEngine(), this);
                this->p_48->initialize();
                this->p_48->setParameterOffset(this->getParameterOffset(this->p_48));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_48->getPreset(getSubState(getSubState(preset, "__sps"), "freq"));
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->p_48->processTempoEvent(time, tempo);
            }
            
            void processTransportEvent(MillisecondTime time, TransportState state) {
                this->updateTime(time);
                this->p_48->processTransportEvent(time, state);
            }
            
            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                this->updateTime(time);
                this->p_48->processBeatTimeEvent(time, beattime);
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                this->updateTime(time);
                this->p_48->processTimeSignatureEvent(time, numerator, denominator);
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        this->p_48->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        return this->p_48->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_48->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        return this->p_48->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        return this->p_48->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_48->getNumParameters())
                            this->p_48->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_48)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        return this->p_48->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        return this->p_48->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_48->getNumParameters())
                        return this->p_48->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_48->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_48->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_48->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                auto subpatchResult_0 = this->p_48->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_48->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->p_48->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_48->startup();
            }
            
            void allocateDataRefs() {
                this->p_48->allocateDataRefs();
            }
            
            void p_48_target_FMLFOsource_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->p_46_target_FMLFOsource_number_set(v);
            }
            
            void p_48_target_FMLFODepth_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->receive_55_output_number_set(v);
            }
            
            void p_48_target_FM_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->receive_54_output_number_set(v);
            }
            
            void p_48_target_pitch_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->receive_52_output_number_set(v);
            }
            
            void p_48_target_FM2_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->receive_53_output_number_set(v);
            }
            
            void p_48_target_FMLFO2source_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->p_47_target_FMLFO2source_number_set(v);
            }
            
            void p_48_target_FMLFOfreq_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->p_46_target_FMLFOfreq_number_set(v);
            }
            
            void p_48_target_FMLFO2freq_number_set(number v) {
                this->p_48->updateTime(this->_currentTime);
                this->p_48->p_47_target_FMLFO2freq_number_set(v);
            }
            
            void p_48_perform(SampleValue * out1, Index n) {
                // subpatcher: freq
                SampleArray<1> outs = {out1};
            
                this->p_48->process(nullptr, 0, outs, 1, n);
            }
            
            void phasor_19_perform(const Sample * freq, SampleValue * out, Index n) {
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = this->phasor_19_ph_next(freq[(Index)i], -1);
                    this->phasor_19_sigbuf[(Index)i] = -1;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number phasor_19_ph_next(number freq, number reset) {
                RNBO_UNUSED(reset);
                number pincr = freq * this->phasor_19_ph_conv;
            
                if (this->phasor_19_ph_currentPhase < 0.)
                    this->phasor_19_ph_currentPhase = 1. + this->phasor_19_ph_currentPhase;
            
                if (this->phasor_19_ph_currentPhase > 1.)
                    this->phasor_19_ph_currentPhase = this->phasor_19_ph_currentPhase - 1.;
            
                number tmp = this->phasor_19_ph_currentPhase;
                this->phasor_19_ph_currentPhase += pincr;
                return tmp;
            }
            
            void phasor_19_ph_reset() {
                this->phasor_19_ph_currentPhase = 0;
            }
            
            void phasor_19_ph_dspsetup() {
                this->phasor_19_ph_conv = (number)1 / this->sr;
            }
            
            void phasor_19_dspsetup(bool force) {
                if ((bool)(this->phasor_19_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->phasor_19_conv = (number)1 / this->samplerate();
                this->phasor_19_setupDone = true;
                this->phasor_19_ph_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                p_48_target = 0;
                phasor_19_freq = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                phasor_19_sigbuf = nullptr;
                phasor_19_lastLockedPhase = 0;
                phasor_19_conv = 0;
                phasor_19_ph_currentPhase = 0;
                phasor_19_ph_conv = 0;
                phasor_19_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number p_48_target;
                number phasor_19_freq;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                signal phasor_19_sigbuf;
                number phasor_19_lastLockedPhase;
                number phasor_19_conv;
                number phasor_19_ph_currentPhase;
                number phasor_19_ph_conv;
                bool phasor_19_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_4276* p_48;
            
    };
    
    class RNBOSubpatcher_4290 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_4292;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_4287 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_4290;
                        friend class rnbomatic;
                        
                        public:
                        
                        class RNBOSubpatcher_4285 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4287;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4280 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4285;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4277 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4280;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4277()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4277()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4280* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4280 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                    
                                                                                        this->cycle_tilde_11_perform(
                                                                                            this->cycle_tilde_11_frequency,
                                                                                            this->cycle_tilde_11_phase_offset,
                                                                                            out1,
                                                                                            this->dummyBuffer,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_11_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        if (index == 0) {
                                                                                            this->cycle_tilde_11_buffer = new Float64Buffer(
                                                                                                this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                            );
                                                                                    
                                                                                            this->cycle_tilde_11_bufferUpdated();
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    
                                                                                        this->cycle_tilde_11_buffer = new Float64Buffer(
                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                        );
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->cycle_tilde_11_buffer->requestSize(16384, 1);
                                                                                        this->cycle_tilde_11_buffer->setSampleRate(this->sr);
                                                                                        this->cycle_tilde_11_buffer = this->cycle_tilde_11_buffer->allocateIfNeeded();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_11_frequency_set(number v) {
                                                                                        this->cycle_tilde_11_frequency = v;
                                                                                    }
                                                                                    
                                                                                    void receive_57_output_number_set(number v) {
                                                                                        this->receive_57_output_number = v;
                                                                                        this->cycle_tilde_11_frequency_set(v);
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_11_perform(
                                                                                        number frequency,
                                                                                        number phase_offset,
                                                                                        SampleValue * out1,
                                                                                        SampleValue * out2,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(phase_offset);
                                                                                        auto __cycle_tilde_11_f2i = this->cycle_tilde_11_f2i;
                                                                                        auto __cycle_tilde_11_buffer = this->cycle_tilde_11_buffer;
                                                                                        auto __cycle_tilde_11_phasei = this->cycle_tilde_11_phasei;
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            {
                                                                                                uint32_t uint_phase;
                                                                                    
                                                                                                {
                                                                                                    {
                                                                                                        uint_phase = __cycle_tilde_11_phasei;
                                                                                                    }
                                                                                                }
                                                                                    
                                                                                                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                number y0 = __cycle_tilde_11_buffer[(Index)idx];
                                                                                                number y1 = __cycle_tilde_11_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                number y = y0 + frac * (y1 - y0);
                                                                                    
                                                                                                {
                                                                                                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_11_f2i));
                                                                                                    __cycle_tilde_11_phasei = uint32_add(__cycle_tilde_11_phasei, pincr);
                                                                                                }
                                                                                    
                                                                                                out1[(Index)i] = y;
                                                                                                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_11_phasei = __cycle_tilde_11_phasei;
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number cycle_tilde_11_ph_next(number freq, number reset) {
                                                                                        {
                                                                                            {
                                                                                                if (reset >= 0.)
                                                                                                    this->cycle_tilde_11_ph_currentPhase = reset;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        number pincr = freq * this->cycle_tilde_11_ph_conv;
                                                                                    
                                                                                        if (this->cycle_tilde_11_ph_currentPhase < 0.)
                                                                                            this->cycle_tilde_11_ph_currentPhase = 1. + this->cycle_tilde_11_ph_currentPhase;
                                                                                    
                                                                                        if (this->cycle_tilde_11_ph_currentPhase > 1.)
                                                                                            this->cycle_tilde_11_ph_currentPhase = this->cycle_tilde_11_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->cycle_tilde_11_ph_currentPhase;
                                                                                        this->cycle_tilde_11_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_11_ph_reset() {
                                                                                        this->cycle_tilde_11_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_11_ph_dspsetup() {
                                                                                        this->cycle_tilde_11_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_11_dspsetup(bool force) {
                                                                                        if ((bool)(this->cycle_tilde_11_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->cycle_tilde_11_phasei = 0;
                                                                                        this->cycle_tilde_11_f2i = (number)4294967296 / this->samplerate();
                                                                                        this->cycle_tilde_11_wrap = (long)(this->cycle_tilde_11_buffer->getSize()) - 1;
                                                                                        this->cycle_tilde_11_setupDone = true;
                                                                                        this->cycle_tilde_11_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_11_bufferUpdated() {
                                                                                        this->cycle_tilde_11_wrap = (long)(this->cycle_tilde_11_buffer->getSize()) - 1;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_57_output_number = 0;
                                                                                        cycle_tilde_11_frequency = 0;
                                                                                        cycle_tilde_11_phase_offset = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        cycle_tilde_11_wrap = 0;
                                                                                        cycle_tilde_11_ph_currentPhase = 0;
                                                                                        cycle_tilde_11_ph_conv = 0;
                                                                                        cycle_tilde_11_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_57_output_number;
                                                                                        list receive_57_output_list;
                                                                                        number cycle_tilde_11_frequency;
                                                                                        number cycle_tilde_11_phase_offset;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        Float64BufferRef cycle_tilde_11_buffer;
                                                                                        long cycle_tilde_11_wrap;
                                                                                        uint32_t cycle_tilde_11_phasei;
                                                                                        SampleValue cycle_tilde_11_f2i;
                                                                                        number cycle_tilde_11_ph_currentPhase;
                                                                                        number cycle_tilde_11_ph_conv;
                                                                                        bool cycle_tilde_11_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4278 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4280;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4278()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4278()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4280* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4280 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_20_perform(this->phasor_20_freq, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->phasor_20_sigbuf = resizeSignal(this->phasor_20_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_20_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_20_freq_set(number v) {
                                                                                        this->phasor_20_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_58_output_number_set(number v) {
                                                                                        this->receive_58_output_number = v;
                                                                                        this->phasor_20_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_20_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_20_ph_next(freq, -1);
                                                                                            this->phasor_20_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_20_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_20_ph_conv;
                                                                                    
                                                                                        if (this->phasor_20_ph_currentPhase < 0.)
                                                                                            this->phasor_20_ph_currentPhase = 1. + this->phasor_20_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_20_ph_currentPhase > 1.)
                                                                                            this->phasor_20_ph_currentPhase = this->phasor_20_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_20_ph_currentPhase;
                                                                                        this->phasor_20_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_20_ph_reset() {
                                                                                        this->phasor_20_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_20_ph_dspsetup() {
                                                                                        this->phasor_20_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_20_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_20_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_20_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_20_setupDone = true;
                                                                                        this->phasor_20_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_58_output_number = 0;
                                                                                        phasor_20_freq = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_20_sigbuf = nullptr;
                                                                                        phasor_20_lastLockedPhase = 0;
                                                                                        phasor_20_conv = 0;
                                                                                        phasor_20_ph_currentPhase = 0;
                                                                                        phasor_20_ph_conv = 0;
                                                                                        phasor_20_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_58_output_number;
                                                                                        list receive_58_output_list;
                                                                                        number phasor_20_freq;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_20_sigbuf;
                                                                                        number phasor_20_lastLockedPhase;
                                                                                        number phasor_20_conv;
                                                                                        number phasor_20_ph_currentPhase;
                                                                                        number phasor_20_ph_conv;
                                                                                        bool phasor_20_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4279 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4280;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4279()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4279()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4280* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4280 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number wrap(number x, number low, number high) {
                                                                                        number lo;
                                                                                        number hi;
                                                                                    
                                                                                        if (low == high)
                                                                                            return low;
                                                                                    
                                                                                        if (low > high) {
                                                                                            hi = low;
                                                                                            lo = high;
                                                                                        } else {
                                                                                            lo = low;
                                                                                            hi = high;
                                                                                        }
                                                                                    
                                                                                        number range = hi - lo;
                                                                                    
                                                                                        if (x >= lo && x < hi)
                                                                                            return x;
                                                                                    
                                                                                        if (range <= 0.000000001)
                                                                                            return lo;
                                                                                    
                                                                                        long numWraps = (long)(trunc((x - lo) / range));
                                                                                        numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                        number result = x - range * numWraps;
                                                                                    
                                                                                        if (result >= hi)
                                                                                            return result - range;
                                                                                        else
                                                                                            return result;
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_21_perform(this->phasor_21_freq, this->signals[0], n);
                                                                                        this->triangle_tilde_10_perform(this->signals[0], this->triangle_tilde_10_duty, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 1; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->phasor_21_sigbuf = resizeSignal(this->phasor_21_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_21_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_21_freq_set(number v) {
                                                                                        this->phasor_21_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_59_output_number_set(number v) {
                                                                                        this->receive_59_output_number = v;
                                                                                        this->phasor_21_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_21_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_21_ph_next(freq, -1);
                                                                                            this->phasor_21_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void triangle_tilde_10_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                        RNBO_UNUSED(duty);
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            number p1 = 0.5;
                                                                                            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                    
                                                                                            if (wrappedPhase < p1) {
                                                                                                out1[(Index)i] = wrappedPhase / p1;
                                                                                                continue;
                                                                                            } else {
                                                                                                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_21_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_21_ph_conv;
                                                                                    
                                                                                        if (this->phasor_21_ph_currentPhase < 0.)
                                                                                            this->phasor_21_ph_currentPhase = 1. + this->phasor_21_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_21_ph_currentPhase > 1.)
                                                                                            this->phasor_21_ph_currentPhase = this->phasor_21_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_21_ph_currentPhase;
                                                                                        this->phasor_21_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_21_ph_reset() {
                                                                                        this->phasor_21_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_21_ph_dspsetup() {
                                                                                        this->phasor_21_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_21_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_21_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_21_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_21_setupDone = true;
                                                                                        this->phasor_21_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        triangle_tilde_10_phase = 0;
                                                                                        triangle_tilde_10_duty = 0.5;
                                                                                        phasor_21_freq = 0;
                                                                                        receive_59_output_number = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_21_sigbuf = nullptr;
                                                                                        phasor_21_lastLockedPhase = 0;
                                                                                        phasor_21_conv = 0;
                                                                                        phasor_21_ph_currentPhase = 0;
                                                                                        phasor_21_ph_conv = 0;
                                                                                        phasor_21_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number triangle_tilde_10_phase;
                                                                                        number triangle_tilde_10_duty;
                                                                                        number phasor_21_freq;
                                                                                        number receive_59_output_number;
                                                                                        list receive_59_output_list;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[1];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_21_sigbuf;
                                                                                        number phasor_21_lastLockedPhase;
                                                                                        number phasor_21_conv;
                                                                                        number phasor_21_ph_currentPhase;
                                                                                        number phasor_21_ph_conv;
                                                                                        bool phasor_21_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4280()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4280()
                                                            {
                                                                delete this->p_49;
                                                                delete this->p_50;
                                                                delete this->p_51;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4285* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4285 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_49_perform(this->signals[0], n);
                                                                this->p_50_perform(this->signals[1], n);
                                                                this->p_51_perform(this->signals[2], n);
                                                            
                                                                this->selector_14_perform(
                                                                    this->selector_14_onoff,
                                                                    this->zeroBuffer,
                                                                    this->signals[0],
                                                                    this->signals[1],
                                                                    this->signals[2],
                                                                    out1,
                                                                    n
                                                                );
                                                            
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    Index i;
                                                            
                                                                    for (i = 0; i < 3; i++) {
                                                                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                    }
                                                            
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_49->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_50->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_51->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_49 = new RNBOSubpatcher_4277();
                                                                this->p_49->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_49->initialize();
                                                                this->p_49->setParameterOffset(this->getParameterOffset(this->p_49));
                                                                this->p_50 = new RNBOSubpatcher_4278();
                                                                this->p_50->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_50->initialize();
                                                                this->p_50->setParameterOffset(this->getParameterOffset(this->p_50));
                                                                this->p_51 = new RNBOSubpatcher_4279();
                                                                this->p_51->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_51->initialize();
                                                                this->p_51->setParameterOffset(this->getParameterOffset(this->p_51));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_49->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                this->p_50->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                this->p_51->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_49->processTempoEvent(time, tempo);
                                                                this->p_50->processTempoEvent(time, tempo);
                                                                this->p_51->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_49->processTransportEvent(time, state);
                                                                this->p_50->processTransportEvent(time, state);
                                                                this->p_51->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_49->processBeatTimeEvent(time, beattime);
                                                                this->p_50->processBeatTimeEvent(time, beattime);
                                                                this->p_51->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_49->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_50->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_51->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        this->p_49->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        this->p_50->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        this->p_51->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        return this->p_49->getParameterValue(index);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        return this->p_50->getParameterValue(index);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        return this->p_51->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_49->getNumParameters() + this->p_50->getNumParameters() + this->p_51->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        return this->p_49->getParameterName(index);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        return this->p_50->getParameterName(index);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        return this->p_51->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        return this->p_49->getParameterId(index);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        return this->p_50->getParameterId(index);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        return this->p_51->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_49->getNumParameters())
                                                                            this->p_49->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_49->getNumParameters();
                                                            
                                                                        if (index < this->p_50->getNumParameters())
                                                                            this->p_50->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_50->getNumParameters();
                                                            
                                                                        if (index < this->p_51->getNumParameters())
                                                                            this->p_51->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_49)
                                                                    return 0;
                                                            
                                                                if (subpatcher == this->p_50)
                                                                    return 0 + this->p_49->getNumParameters();
                                                            
                                                                if (subpatcher == this->p_51)
                                                                    return 0 + this->p_49->getNumParameters() + this->p_50->getNumParameters();
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        return this->p_49->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        return this->p_50->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        return this->p_51->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        return this->p_49->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        return this->p_50->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        return this->p_51->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_49->getNumParameters())
                                                                        return this->p_49->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_49->getNumParameters();
                                                            
                                                                    if (index < this->p_50->getNumParameters())
                                                                        return this->p_50->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_50->getNumParameters();
                                                            
                                                                    if (index < this->p_51->getNumParameters())
                                                                        return this->p_51->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_49->processNumMessage(tag, objectId, time, payload);
                                                                this->p_50->processNumMessage(tag, objectId, time, payload);
                                                                this->p_51->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_49->processListMessage(tag, objectId, time, payload);
                                                                this->p_50->processListMessage(tag, objectId, time, payload);
                                                                this->p_51->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_49->processBangMessage(tag, objectId, time);
                                                                this->p_50->processBangMessage(tag, objectId, time);
                                                                this->p_51->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_49->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                auto subpatchResult_1 = this->p_50->resolveTag(tag);
                                                            
                                                                if (subpatchResult_1)
                                                                    return subpatchResult_1;
                                                            
                                                                auto subpatchResult_2 = this->p_51->resolveTag(tag);
                                                            
                                                                if (subpatchResult_2)
                                                                    return subpatchResult_2;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_49->processDataViewUpdate(index, time);
                                                                this->p_50->processDataViewUpdate(index, time);
                                                                this->p_51->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_49->initializeObjects();
                                                                this->p_50->initializeObjects();
                                                                this->p_51->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_49->startup();
                                                                this->p_50->startup();
                                                                this->p_51->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_49->allocateDataRefs();
                                                                this->p_50->allocateDataRefs();
                                                                this->p_51->allocateDataRefs();
                                                            }
                                                            
                                                            void selector_14_onoff_set(number v) {
                                                                this->selector_14_onoff = v;
                                                            }
                                                            
                                                            void receive_60_output_number_set(number v) {
                                                                this->receive_60_output_number = v;
                                                                this->selector_14_onoff_set(v);
                                                            }
                                                            
                                                            void p_49_target_FMLFOfreq_number_set(number v) {
                                                                this->p_49->updateTime(this->_currentTime);
                                                                this->p_49->receive_57_output_number_set(v);
                                                            }
                                                            
                                                            void p_50_target_FMLFOfreq_number_set(number v) {
                                                                this->p_50->updateTime(this->_currentTime);
                                                                this->p_50->receive_58_output_number_set(v);
                                                            }
                                                            
                                                            void p_51_target_FMLFOfreq_number_set(number v) {
                                                                this->p_51->updateTime(this->_currentTime);
                                                                this->p_51->receive_59_output_number_set(v);
                                                            }
                                                            
                                                            void p_49_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: sin
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_49->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_50_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: phasor
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_50->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_51_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: triangle
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_51->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void selector_14_perform(
                                                                number onoff,
                                                                const SampleValue * in1,
                                                                const SampleValue * in2,
                                                                const SampleValue * in3,
                                                                const SampleValue * in4,
                                                                SampleValue * out,
                                                                Index n
                                                            ) {
                                                                Index i;
                                                            
                                                                for (i = 0; i < n; i++) {
                                                                    if (onoff >= 1 && onoff < 2)
                                                                        out[(Index)i] = in1[(Index)i];
                                                                    else if (onoff >= 2 && onoff < 3)
                                                                        out[(Index)i] = in2[(Index)i];
                                                                    else if (onoff >= 3 && onoff < 4)
                                                                        out[(Index)i] = in3[(Index)i];
                                                                    else if (onoff >= 4 && onoff < 5)
                                                                        out[(Index)i] = in4[(Index)i];
                                                                    else
                                                                        out[(Index)i] = 0;
                                                                }
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                receive_60_output_number = 0;
                                                                selector_14_onoff = 1;
                                                                p_49_target = 0;
                                                                p_50_target = 0;
                                                                p_51_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                signals[0] = nullptr;
                                                                signals[1] = nullptr;
                                                                signals[2] = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number receive_60_output_number;
                                                                list receive_60_output_list;
                                                                number selector_14_onoff;
                                                                number p_49_target;
                                                                number p_50_target;
                                                                number p_51_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                SampleValue * signals[3];
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4277* p_49;
                                                                RNBOSubpatcher_4278* p_50;
                                                                RNBOSubpatcher_4279* p_51;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4285()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4285()
                                        {
                                            delete this->p_52;
                                        }
                                        
                                        virtual RNBOSubpatcher_4287* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4287 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_52_perform(out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_52->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_52 = new RNBOSubpatcher_4280();
                                            this->p_52->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_52->initialize();
                                            this->p_52->setParameterOffset(this->getParameterOffset(this->p_52));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_52->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_52->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_52->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_52->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_52->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    this->p_52->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    return this->p_52->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_52->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    return this->p_52->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    return this->p_52->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_52->getNumParameters())
                                                        this->p_52->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_52)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    return this->p_52->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    return this->p_52->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_52->getNumParameters())
                                                    return this->p_52->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_52->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_52->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_52->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_52->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_52->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_52->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_52->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_52->allocateDataRefs();
                                        }
                                        
                                        void p_52_target_FMLFOsource_number_set(number v) {
                                            this->p_52->updateTime(this->_currentTime);
                                            this->p_52->receive_60_output_number_set(v);
                                        }
                                        
                                        void p_52_target_FMLFOfreq_number_set(number v) {
                                            this->p_52->updateTime(this->_currentTime);
                                            this->p_52->p_49_target_FMLFOfreq_number_set(v);
                                            this->p_52->updateTime(this->_currentTime);
                                            this->p_52->p_50_target_FMLFOfreq_number_set(v);
                                            this->p_52->updateTime(this->_currentTime);
                                            this->p_52->p_51_target_FMLFOfreq_number_set(v);
                                        }
                                        
                                        void p_52_perform(SampleValue * out1, Index n) {
                                            // subpatcher: generator
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_52->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            p_52_target = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number p_52_target;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4280* p_52;
                                        
                        };
                        
                        class RNBOSubpatcher_4286 : public PatcherInterfaceImpl {
                                        
                                        friend class RNBOSubpatcher_4287;
                                        friend class rnbomatic;
                                        
                                        public:
                                        
                                        class RNBOSubpatcher_4284 : public PatcherInterfaceImpl {
                                                            
                                                            friend class RNBOSubpatcher_4286;
                                                            friend class rnbomatic;
                                                            
                                                            public:
                                                            
                                                            class RNBOSubpatcher_4281 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4284;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4281()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4281()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4284* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4284 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                    
                                                                                        this->cycle_tilde_12_perform(
                                                                                            this->cycle_tilde_12_frequency,
                                                                                            this->cycle_tilde_12_phase_offset,
                                                                                            out1,
                                                                                            this->dummyBuffer,
                                                                                            n
                                                                                        );
                                                                                    
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_12_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                                        this->updateTime(time);
                                                                                    
                                                                                        if (index == 0) {
                                                                                            this->cycle_tilde_12_buffer = new Float64Buffer(
                                                                                                this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                            );
                                                                                    
                                                                                            this->cycle_tilde_12_bufferUpdated();
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    
                                                                                        this->cycle_tilde_12_buffer = new Float64Buffer(
                                                                                            this->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->getPatcher()->RNBODefaultSinus
                                                                                        );
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {
                                                                                        this->cycle_tilde_12_buffer->requestSize(16384, 1);
                                                                                        this->cycle_tilde_12_buffer->setSampleRate(this->sr);
                                                                                        this->cycle_tilde_12_buffer = this->cycle_tilde_12_buffer->allocateIfNeeded();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_12_frequency_set(number v) {
                                                                                        this->cycle_tilde_12_frequency = v;
                                                                                    }
                                                                                    
                                                                                    void receive_61_output_number_set(number v) {
                                                                                        this->receive_61_output_number = v;
                                                                                        this->cycle_tilde_12_frequency_set(v);
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_12_perform(
                                                                                        number frequency,
                                                                                        number phase_offset,
                                                                                        SampleValue * out1,
                                                                                        SampleValue * out2,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(phase_offset);
                                                                                        auto __cycle_tilde_12_f2i = this->cycle_tilde_12_f2i;
                                                                                        auto __cycle_tilde_12_buffer = this->cycle_tilde_12_buffer;
                                                                                        auto __cycle_tilde_12_phasei = this->cycle_tilde_12_phasei;
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            {
                                                                                                uint32_t uint_phase;
                                                                                    
                                                                                                {
                                                                                                    {
                                                                                                        uint_phase = __cycle_tilde_12_phasei;
                                                                                                    }
                                                                                                }
                                                                                    
                                                                                                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                                                                                                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                                                                                                number y0 = __cycle_tilde_12_buffer[(Index)idx];
                                                                                                number y1 = __cycle_tilde_12_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                                                                                                number y = y0 + frac * (y1 - y0);
                                                                                    
                                                                                                {
                                                                                                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_12_f2i));
                                                                                                    __cycle_tilde_12_phasei = uint32_add(__cycle_tilde_12_phasei, pincr);
                                                                                                }
                                                                                    
                                                                                                out1[(Index)i] = y;
                                                                                                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        this->cycle_tilde_12_phasei = __cycle_tilde_12_phasei;
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number cycle_tilde_12_ph_next(number freq, number reset) {
                                                                                        {
                                                                                            {
                                                                                                if (reset >= 0.)
                                                                                                    this->cycle_tilde_12_ph_currentPhase = reset;
                                                                                            }
                                                                                        }
                                                                                    
                                                                                        number pincr = freq * this->cycle_tilde_12_ph_conv;
                                                                                    
                                                                                        if (this->cycle_tilde_12_ph_currentPhase < 0.)
                                                                                            this->cycle_tilde_12_ph_currentPhase = 1. + this->cycle_tilde_12_ph_currentPhase;
                                                                                    
                                                                                        if (this->cycle_tilde_12_ph_currentPhase > 1.)
                                                                                            this->cycle_tilde_12_ph_currentPhase = this->cycle_tilde_12_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->cycle_tilde_12_ph_currentPhase;
                                                                                        this->cycle_tilde_12_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_12_ph_reset() {
                                                                                        this->cycle_tilde_12_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_12_ph_dspsetup() {
                                                                                        this->cycle_tilde_12_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_12_dspsetup(bool force) {
                                                                                        if ((bool)(this->cycle_tilde_12_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->cycle_tilde_12_phasei = 0;
                                                                                        this->cycle_tilde_12_f2i = (number)4294967296 / this->samplerate();
                                                                                        this->cycle_tilde_12_wrap = (long)(this->cycle_tilde_12_buffer->getSize()) - 1;
                                                                                        this->cycle_tilde_12_setupDone = true;
                                                                                        this->cycle_tilde_12_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    void cycle_tilde_12_bufferUpdated() {
                                                                                        this->cycle_tilde_12_wrap = (long)(this->cycle_tilde_12_buffer->getSize()) - 1;
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_61_output_number = 0;
                                                                                        cycle_tilde_12_frequency = 0;
                                                                                        cycle_tilde_12_phase_offset = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        cycle_tilde_12_wrap = 0;
                                                                                        cycle_tilde_12_ph_currentPhase = 0;
                                                                                        cycle_tilde_12_ph_conv = 0;
                                                                                        cycle_tilde_12_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_61_output_number;
                                                                                        list receive_61_output_list;
                                                                                        number cycle_tilde_12_frequency;
                                                                                        number cycle_tilde_12_phase_offset;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        Float64BufferRef cycle_tilde_12_buffer;
                                                                                        long cycle_tilde_12_wrap;
                                                                                        uint32_t cycle_tilde_12_phasei;
                                                                                        SampleValue cycle_tilde_12_f2i;
                                                                                        number cycle_tilde_12_ph_currentPhase;
                                                                                        number cycle_tilde_12_ph_conv;
                                                                                        bool cycle_tilde_12_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4282 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4284;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4282()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4282()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4284* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4284 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_22_perform(this->phasor_22_freq, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            this->phasor_22_sigbuf = resizeSignal(this->phasor_22_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_22_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_22_freq_set(number v) {
                                                                                        this->phasor_22_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_62_output_number_set(number v) {
                                                                                        this->receive_62_output_number = v;
                                                                                        this->phasor_22_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_22_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_22_ph_next(freq, -1);
                                                                                            this->phasor_22_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_22_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_22_ph_conv;
                                                                                    
                                                                                        if (this->phasor_22_ph_currentPhase < 0.)
                                                                                            this->phasor_22_ph_currentPhase = 1. + this->phasor_22_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_22_ph_currentPhase > 1.)
                                                                                            this->phasor_22_ph_currentPhase = this->phasor_22_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_22_ph_currentPhase;
                                                                                        this->phasor_22_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_22_ph_reset() {
                                                                                        this->phasor_22_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_22_ph_dspsetup() {
                                                                                        this->phasor_22_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_22_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_22_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_22_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_22_setupDone = true;
                                                                                        this->phasor_22_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        receive_62_output_number = 0;
                                                                                        phasor_22_freq = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_22_sigbuf = nullptr;
                                                                                        phasor_22_lastLockedPhase = 0;
                                                                                        phasor_22_conv = 0;
                                                                                        phasor_22_ph_currentPhase = 0;
                                                                                        phasor_22_ph_conv = 0;
                                                                                        phasor_22_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number receive_62_output_number;
                                                                                        list receive_62_output_list;
                                                                                        number phasor_22_freq;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_22_sigbuf;
                                                                                        number phasor_22_lastLockedPhase;
                                                                                        number phasor_22_conv;
                                                                                        number phasor_22_ph_currentPhase;
                                                                                        number phasor_22_ph_conv;
                                                                                        bool phasor_22_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            class RNBOSubpatcher_4283 : public PatcherInterfaceImpl {
                                                                                    
                                                                                    friend class RNBOSubpatcher_4284;
                                                                                    friend class rnbomatic;
                                                                                    
                                                                                    public:
                                                                                    
                                                                                    RNBOSubpatcher_4283()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    ~RNBOSubpatcher_4283()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    virtual RNBOSubpatcher_4284* getPatcher() const {
                                                                                        return static_cast<RNBOSubpatcher_4284 *>(_parentPatcher);
                                                                                    }
                                                                                    
                                                                                    rnbomatic* getTopLevelPatcher() {
                                                                                        return this->getPatcher()->getTopLevelPatcher();
                                                                                    }
                                                                                    
                                                                                    void cancelClockEvents()
                                                                                    {
                                                                                    }
                                                                                    
                                                                                    number wrap(number x, number low, number high) {
                                                                                        number lo;
                                                                                        number hi;
                                                                                    
                                                                                        if (low == high)
                                                                                            return low;
                                                                                    
                                                                                        if (low > high) {
                                                                                            hi = low;
                                                                                            lo = high;
                                                                                        } else {
                                                                                            lo = low;
                                                                                            hi = high;
                                                                                        }
                                                                                    
                                                                                        number range = hi - lo;
                                                                                    
                                                                                        if (x >= lo && x < hi)
                                                                                            return x;
                                                                                    
                                                                                        if (range <= 0.000000001)
                                                                                            return lo;
                                                                                    
                                                                                        long numWraps = (long)(trunc((x - lo) / range));
                                                                                        numWraps = numWraps - ((x < lo ? 1 : 0));
                                                                                        number result = x - range * numWraps;
                                                                                    
                                                                                        if (result >= hi)
                                                                                            return result - range;
                                                                                        else
                                                                                            return result;
                                                                                    }
                                                                                    
                                                                                    number samplerate() {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    Index getNumMidiInputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                                                    
                                                                                    Index getNumMidiOutputPorts() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void process(
                                                                                        const SampleValue * const* inputs,
                                                                                        Index numInputs,
                                                                                        SampleValue * const* outputs,
                                                                                        Index numOutputs,
                                                                                        Index n
                                                                                    ) {
                                                                                        RNBO_UNUSED(numInputs);
                                                                                        RNBO_UNUSED(inputs);
                                                                                        this->vs = n;
                                                                                        this->updateTime(this->getEngine()->getCurrentTime());
                                                                                        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                                        this->phasor_23_perform(this->phasor_23_freq, this->signals[0], n);
                                                                                        this->triangle_tilde_11_perform(this->signals[0], this->triangle_tilde_11_duty, out1, n);
                                                                                        this->stackprotect_perform(n);
                                                                                        this->audioProcessSampleCount += this->vs;
                                                                                    }
                                                                                    
                                                                                    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                                        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                                            Index i;
                                                                                    
                                                                                            for (i = 0; i < 1; i++) {
                                                                                                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                                            }
                                                                                    
                                                                                            this->phasor_23_sigbuf = resizeSignal(this->phasor_23_sigbuf, this->maxvs, maxBlockSize);
                                                                                            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                                            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                                            this->didAllocateSignals = true;
                                                                                        }
                                                                                    
                                                                                        const bool sampleRateChanged = sampleRate != this->sr;
                                                                                        const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                                        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                                                    
                                                                                        if (sampleRateChanged || maxvsChanged) {
                                                                                            this->vs = maxBlockSize;
                                                                                            this->maxvs = maxBlockSize;
                                                                                            this->sr = sampleRate;
                                                                                            this->invsr = 1 / sampleRate;
                                                                                        }
                                                                                    
                                                                                        this->phasor_23_dspsetup(forceDSPSetup);
                                                                                    
                                                                                        if (sampleRateChanged)
                                                                                            this->onSampleRateChanged(sampleRate);
                                                                                    }
                                                                                    
                                                                                    void setProbingTarget(MessageTag id) {
                                                                                        switch (id) {
                                                                                        default:
                                                                                            {
                                                                                            this->setProbingIndex(-1);
                                                                                            break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void setProbingIndex(ProbingIndex ) {}
                                                                                    
                                                                                    Index getProbingChannels(MessageTag outletId) const {
                                                                                        RNBO_UNUSED(outletId);
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getIsMuted()  {
                                                                                        return this->isMuted;
                                                                                    }
                                                                                    
                                                                                    void setIsMuted(Index v)  {
                                                                                        this->isMuted = v;
                                                                                    }
                                                                                    
                                                                                    Index getPatcherSerial() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void getState(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void setState() {}
                                                                                    
                                                                                    void getPreset(PatcherStateInterface& ) {}
                                                                                    
                                                                                    void processTempoEvent(MillisecondTime , Tempo ) {}
                                                                                    
                                                                                    void processTransportEvent(MillisecondTime , TransportState ) {}
                                                                                    
                                                                                    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
                                                                                    
                                                                                    void onSampleRateChanged(double ) {}
                                                                                    
                                                                                    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
                                                                                    
                                                                                    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                                                                                    
                                                                                    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValue(index, value, time);
                                                                                    }
                                                                                    
                                                                                    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                                        this->setParameterValue(index, this->getParameterValue(index), time);
                                                                                    }
                                                                                    
                                                                                    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                                        this->setParameterValueNormalized(index, value, time);
                                                                                    }
                                                                                    
                                                                                    ParameterValue getParameterValue(ParameterIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return 0;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalInParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumSignalOutParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ParameterIndex getNumParameters() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return "bogus";
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                                                                                    
                                                                                    void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                                        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                                                    }
                                                                                    
                                                                                    void setParameterOffset(ParameterIndex offset) {
                                                                                        this->parameterOffset = offset;
                                                                                    }
                                                                                    
                                                                                    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                                        if (steps == 1) {
                                                                                            if (normalizedValue > 0) {
                                                                                                normalizedValue = 1.;
                                                                                            }
                                                                                        } else {
                                                                                            ParameterValue oneStep = (number)1. / (steps - 1);
                                                                                            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                                            normalizedValue = numberOfSteps * oneStep;
                                                                                        }
                                                                                    
                                                                                        return normalizedValue;
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                                                    
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return value;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void scheduleParamInit(ParameterIndex index, Index order) {
                                                                                        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                                                    }
                                                                                    
                                                                                    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                                                    
                                                                                    void processOutletEvent(
                                                                                        EngineLink* sender,
                                                                                        OutletIndex index,
                                                                                        ParameterValue value,
                                                                                        MillisecondTime time
                                                                                    ) {
                                                                                        this->updateTime(time);
                                                                                        this->processOutletAtCurrentTime(sender, index, value);
                                                                                    }
                                                                                    
                                                                                    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
                                                                                    
                                                                                    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
                                                                                    
                                                                                    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
                                                                                    
                                                                                    MessageTagInfo resolveTag(MessageTag tag) const {
                                                                                        switch (tag) {
                                                                                    
                                                                                        }
                                                                                    
                                                                                        return nullptr;
                                                                                    }
                                                                                    
                                                                                    DataRef* getDataRef(DataRefIndex index)  {
                                                                                        switch (index) {
                                                                                        default:
                                                                                            {
                                                                                            return nullptr;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    DataRefIndex getNumDataRefs() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    void fillDataRef(DataRefIndex , DataRef& ) {}
                                                                                    
                                                                                    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                                                                                    
                                                                                    void initialize() {
                                                                                        this->assign_defaults();
                                                                                        this->setState();
                                                                                    }
                                                                                    
                                                                                    protected:
                                                                                    
                                                                                    number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                                        return ms * sampleRate * 0.001;
                                                                                    }
                                                                                    
                                                                                    MillisecondTime sampsToMs(SampleIndex samps) {
                                                                                        return samps * (this->invsr * 1000);
                                                                                    }
                                                                                    
                                                                                    Index getMaxBlockSize() const {
                                                                                        return this->maxvs;
                                                                                    }
                                                                                    
                                                                                    number getSampleRate() const {
                                                                                        return this->sr;
                                                                                    }
                                                                                    
                                                                                    bool hasFixedVectorSize() const {
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    Index getNumInputChannels() const {
                                                                                        return 0;
                                                                                    }
                                                                                    
                                                                                    Index getNumOutputChannels() const {
                                                                                        return 1;
                                                                                    }
                                                                                    
                                                                                    void initializeObjects() {}
                                                                                    
                                                                                    void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                                        this->getEngine()->sendOutlet(this, index, value);
                                                                                    }
                                                                                    
                                                                                    void startup() {}
                                                                                    
                                                                                    void allocateDataRefs() {}
                                                                                    
                                                                                    void phasor_23_freq_set(number v) {
                                                                                        this->phasor_23_freq = v;
                                                                                    }
                                                                                    
                                                                                    void receive_63_output_number_set(number v) {
                                                                                        this->receive_63_output_number = v;
                                                                                        this->phasor_23_freq_set(v);
                                                                                    }
                                                                                    
                                                                                    void phasor_23_perform(number freq, SampleValue * out, Index n) {
                                                                                        for (Index i = 0; i < n; i++) {
                                                                                            out[(Index)i] = this->phasor_23_ph_next(freq, -1);
                                                                                            this->phasor_23_sigbuf[(Index)i] = -1;
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void triangle_tilde_11_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                                                                                        RNBO_UNUSED(duty);
                                                                                        Index i;
                                                                                    
                                                                                        for (i = 0; i < n; i++) {
                                                                                            number p1 = 0.5;
                                                                                            auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                                                                                            p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
                                                                                    
                                                                                            if (wrappedPhase < p1) {
                                                                                                out1[(Index)i] = wrappedPhase / p1;
                                                                                                continue;
                                                                                            } else {
                                                                                                out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    
                                                                                    void stackprotect_perform(Index n) {
                                                                                        RNBO_UNUSED(n);
                                                                                        auto __stackprotect_count = this->stackprotect_count;
                                                                                        __stackprotect_count = 0;
                                                                                        this->stackprotect_count = __stackprotect_count;
                                                                                    }
                                                                                    
                                                                                    number phasor_23_ph_next(number freq, number reset) {
                                                                                        RNBO_UNUSED(reset);
                                                                                        number pincr = freq * this->phasor_23_ph_conv;
                                                                                    
                                                                                        if (this->phasor_23_ph_currentPhase < 0.)
                                                                                            this->phasor_23_ph_currentPhase = 1. + this->phasor_23_ph_currentPhase;
                                                                                    
                                                                                        if (this->phasor_23_ph_currentPhase > 1.)
                                                                                            this->phasor_23_ph_currentPhase = this->phasor_23_ph_currentPhase - 1.;
                                                                                    
                                                                                        number tmp = this->phasor_23_ph_currentPhase;
                                                                                        this->phasor_23_ph_currentPhase += pincr;
                                                                                        return tmp;
                                                                                    }
                                                                                    
                                                                                    void phasor_23_ph_reset() {
                                                                                        this->phasor_23_ph_currentPhase = 0;
                                                                                    }
                                                                                    
                                                                                    void phasor_23_ph_dspsetup() {
                                                                                        this->phasor_23_ph_conv = (number)1 / this->sr;
                                                                                    }
                                                                                    
                                                                                    void phasor_23_dspsetup(bool force) {
                                                                                        if ((bool)(this->phasor_23_setupDone) && (bool)(!(bool)(force)))
                                                                                            return;
                                                                                    
                                                                                        this->phasor_23_conv = (number)1 / this->samplerate();
                                                                                        this->phasor_23_setupDone = true;
                                                                                        this->phasor_23_ph_dspsetup();
                                                                                    }
                                                                                    
                                                                                    bool stackprotect_check() {
                                                                                        this->stackprotect_count++;
                                                                                    
                                                                                        if (this->stackprotect_count > 128) {
                                                                                            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                                            return true;
                                                                                        }
                                                                                    
                                                                                        return false;
                                                                                    }
                                                                                    
                                                                                    void updateTime(MillisecondTime time) {
                                                                                        this->_currentTime = time;
                                                                                        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                                                    
                                                                                        if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                                            this->sampleOffsetIntoNextAudioBuffer = 0;
                                                                                    }
                                                                                    
                                                                                    void assign_defaults()
                                                                                    {
                                                                                        triangle_tilde_11_phase = 0;
                                                                                        triangle_tilde_11_duty = 0.5;
                                                                                        phasor_23_freq = 0;
                                                                                        receive_63_output_number = 0;
                                                                                        _currentTime = 0;
                                                                                        audioProcessSampleCount = 0;
                                                                                        sampleOffsetIntoNextAudioBuffer = 0;
                                                                                        zeroBuffer = nullptr;
                                                                                        dummyBuffer = nullptr;
                                                                                        signals[0] = nullptr;
                                                                                        didAllocateSignals = 0;
                                                                                        vs = 0;
                                                                                        maxvs = 0;
                                                                                        sr = 44100;
                                                                                        invsr = 0.00002267573696;
                                                                                        phasor_23_sigbuf = nullptr;
                                                                                        phasor_23_lastLockedPhase = 0;
                                                                                        phasor_23_conv = 0;
                                                                                        phasor_23_ph_currentPhase = 0;
                                                                                        phasor_23_ph_conv = 0;
                                                                                        phasor_23_setupDone = false;
                                                                                        stackprotect_count = 0;
                                                                                        _voiceIndex = 0;
                                                                                        _noteNumber = 0;
                                                                                        isMuted = 1;
                                                                                        parameterOffset = 0;
                                                                                    }
                                                                                    
                                                                                    // member variables
                                                                                    
                                                                                        number triangle_tilde_11_phase;
                                                                                        number triangle_tilde_11_duty;
                                                                                        number phasor_23_freq;
                                                                                        number receive_63_output_number;
                                                                                        list receive_63_output_list;
                                                                                        MillisecondTime _currentTime;
                                                                                        SampleIndex audioProcessSampleCount;
                                                                                        SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                                        signal zeroBuffer;
                                                                                        signal dummyBuffer;
                                                                                        SampleValue * signals[1];
                                                                                        bool didAllocateSignals;
                                                                                        Index vs;
                                                                                        Index maxvs;
                                                                                        number sr;
                                                                                        number invsr;
                                                                                        signal phasor_23_sigbuf;
                                                                                        number phasor_23_lastLockedPhase;
                                                                                        number phasor_23_conv;
                                                                                        number phasor_23_ph_currentPhase;
                                                                                        number phasor_23_ph_conv;
                                                                                        bool phasor_23_setupDone;
                                                                                        number stackprotect_count;
                                                                                        Index _voiceIndex;
                                                                                        Int _noteNumber;
                                                                                        Index isMuted;
                                                                                        ParameterIndex parameterOffset;
                                                                                    
                                                            };
                                                            
                                                            RNBOSubpatcher_4284()
                                                            {
                                                            }
                                                            
                                                            ~RNBOSubpatcher_4284()
                                                            {
                                                                delete this->p_53;
                                                                delete this->p_54;
                                                                delete this->p_55;
                                                            }
                                                            
                                                            virtual RNBOSubpatcher_4286* getPatcher() const {
                                                                return static_cast<RNBOSubpatcher_4286 *>(_parentPatcher);
                                                            }
                                                            
                                                            rnbomatic* getTopLevelPatcher() {
                                                                return this->getPatcher()->getTopLevelPatcher();
                                                            }
                                                            
                                                            void cancelClockEvents()
                                                            {
                                                            }
                                                            
                                                            Index getNumMidiInputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                                            
                                                            Index getNumMidiOutputPorts() const {
                                                                return 0;
                                                            }
                                                            
                                                            void process(
                                                                const SampleValue * const* inputs,
                                                                Index numInputs,
                                                                SampleValue * const* outputs,
                                                                Index numOutputs,
                                                                Index n
                                                            ) {
                                                                RNBO_UNUSED(numInputs);
                                                                RNBO_UNUSED(inputs);
                                                                this->vs = n;
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                                                this->p_53_perform(this->signals[0], n);
                                                                this->p_54_perform(this->signals[1], n);
                                                                this->p_55_perform(this->signals[2], n);
                                                            
                                                                this->selector_15_perform(
                                                                    this->selector_15_onoff,
                                                                    this->zeroBuffer,
                                                                    this->signals[0],
                                                                    this->signals[1],
                                                                    this->signals[2],
                                                                    out1,
                                                                    n
                                                                );
                                                            
                                                                this->stackprotect_perform(n);
                                                                this->audioProcessSampleCount += this->vs;
                                                            }
                                                            
                                                            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                                                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                                    Index i;
                                                            
                                                                    for (i = 0; i < 3; i++) {
                                                                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                                                    }
                                                            
                                                                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                                    this->didAllocateSignals = true;
                                                                }
                                                            
                                                                const bool sampleRateChanged = sampleRate != this->sr;
                                                                const bool maxvsChanged = maxBlockSize != this->maxvs;
                                                                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                                            
                                                                if (sampleRateChanged || maxvsChanged) {
                                                                    this->vs = maxBlockSize;
                                                                    this->maxvs = maxBlockSize;
                                                                    this->sr = sampleRate;
                                                                    this->invsr = 1 / sampleRate;
                                                                }
                                                            
                                                                RNBO_UNUSED(forceDSPSetup);
                                                                this->p_53->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_54->prepareToProcess(sampleRate, maxBlockSize, force);
                                                                this->p_55->prepareToProcess(sampleRate, maxBlockSize, force);
                                                            
                                                                if (sampleRateChanged)
                                                                    this->onSampleRateChanged(sampleRate);
                                                            }
                                                            
                                                            void setProbingTarget(MessageTag id) {
                                                                switch (id) {
                                                                default:
                                                                    {
                                                                    this->setProbingIndex(-1);
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void setProbingIndex(ProbingIndex ) {}
                                                            
                                                            Index getProbingChannels(MessageTag outletId) const {
                                                                RNBO_UNUSED(outletId);
                                                                return 0;
                                                            }
                                                            
                                                            Index getIsMuted()  {
                                                                return this->isMuted;
                                                            }
                                                            
                                                            void setIsMuted(Index v)  {
                                                                this->isMuted = v;
                                                            }
                                                            
                                                            Index getPatcherSerial() const {
                                                                return 0;
                                                            }
                                                            
                                                            void getState(PatcherStateInterface& ) {}
                                                            
                                                            void setState() {
                                                                this->p_53 = new RNBOSubpatcher_4281();
                                                                this->p_53->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_53->initialize();
                                                                this->p_53->setParameterOffset(this->getParameterOffset(this->p_53));
                                                                this->p_54 = new RNBOSubpatcher_4282();
                                                                this->p_54->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_54->initialize();
                                                                this->p_54->setParameterOffset(this->getParameterOffset(this->p_54));
                                                                this->p_55 = new RNBOSubpatcher_4283();
                                                                this->p_55->setEngineAndPatcher(this->getEngine(), this);
                                                                this->p_55->initialize();
                                                                this->p_55->setParameterOffset(this->getParameterOffset(this->p_55));
                                                            }
                                                            
                                                            void getPreset(PatcherStateInterface& preset) {
                                                                this->p_53->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
                                                                this->p_54->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
                                                                this->p_55->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
                                                            }
                                                            
                                                            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                                                this->updateTime(time);
                                                                this->p_53->processTempoEvent(time, tempo);
                                                                this->p_54->processTempoEvent(time, tempo);
                                                                this->p_55->processTempoEvent(time, tempo);
                                                            }
                                                            
                                                            void processTransportEvent(MillisecondTime time, TransportState state) {
                                                                this->updateTime(time);
                                                                this->p_53->processTransportEvent(time, state);
                                                                this->p_54->processTransportEvent(time, state);
                                                                this->p_55->processTransportEvent(time, state);
                                                            }
                                                            
                                                            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                                                this->updateTime(time);
                                                                this->p_53->processBeatTimeEvent(time, beattime);
                                                                this->p_54->processBeatTimeEvent(time, beattime);
                                                                this->p_55->processBeatTimeEvent(time, beattime);
                                                            }
                                                            
                                                            void onSampleRateChanged(double ) {}
                                                            
                                                            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                                                this->updateTime(time);
                                                                this->p_53->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_54->processTimeSignatureEvent(time, numerator, denominator);
                                                                this->p_55->processTimeSignatureEvent(time, numerator, denominator);
                                                            }
                                                            
                                                            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                                                RNBO_UNUSED(v);
                                                                this->updateTime(time);
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        this->p_53->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        this->p_54->setParameterValue(index, v, time);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        this->p_55->setParameterValue(index, v, time);
                                                            
                                                                    break;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValue(index, value, time);
                                                            }
                                                            
                                                            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                                                this->setParameterValue(index, this->getParameterValue(index), time);
                                                            }
                                                            
                                                            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                                                this->setParameterValueNormalized(index, value, time);
                                                            }
                                                            
                                                            ParameterValue getParameterValue(ParameterIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        return this->p_53->getParameterValue(index);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        return this->p_54->getParameterValue(index);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        return this->p_55->getParameterValue(index);
                                                            
                                                                    return 0;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterIndex getNumSignalInParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumSignalOutParameters() const {
                                                                return 0;
                                                            }
                                                            
                                                            ParameterIndex getNumParameters() const {
                                                                return 0 + this->p_53->getNumParameters() + this->p_54->getNumParameters() + this->p_55->getNumParameters();
                                                            }
                                                            
                                                            ConstCharPointer getParameterName(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        return this->p_53->getParameterName(index);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        return this->p_54->getParameterName(index);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        return this->p_55->getParameterName(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ConstCharPointer getParameterId(ParameterIndex index) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        return this->p_53->getParameterId(index);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        return this->p_54->getParameterId(index);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        return this->p_55->getParameterId(index);
                                                            
                                                                    return "bogus";
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                                                {
                                                                    switch (index) {
                                                                    default:
                                                                        {
                                                                        index -= 0;
                                                            
                                                                        if (index < this->p_53->getNumParameters())
                                                                            this->p_53->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_53->getNumParameters();
                                                            
                                                                        if (index < this->p_54->getNumParameters())
                                                                            this->p_54->getParameterInfo(index, info);
                                                            
                                                                        index -= this->p_54->getNumParameters();
                                                            
                                                                        if (index < this->p_55->getNumParameters())
                                                                            this->p_55->getParameterInfo(index, info);
                                                            
                                                                        break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void sendParameter(ParameterIndex index, bool ignoreValue) {
                                                                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                                            }
                                                            
                                                            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                                                if (subpatcher == this->p_53)
                                                                    return 0;
                                                            
                                                                if (subpatcher == this->p_54)
                                                                    return 0 + this->p_53->getNumParameters();
                                                            
                                                                if (subpatcher == this->p_55)
                                                                    return 0 + this->p_53->getNumParameters() + this->p_54->getNumParameters();
                                                            
                                                                return 0;
                                                            }
                                                            
                                                            void setParameterOffset(ParameterIndex offset) {
                                                                this->parameterOffset = offset;
                                                            }
                                                            
                                                            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                                                if (steps == 1) {
                                                                    if (normalizedValue > 0) {
                                                                        normalizedValue = 1.;
                                                                    }
                                                                } else {
                                                                    ParameterValue oneStep = (number)1. / (steps - 1);
                                                                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                                    normalizedValue = numberOfSteps * oneStep;
                                                                }
                                                            
                                                                return normalizedValue;
                                                            }
                                                            
                                                            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        return this->p_53->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        return this->p_54->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        return this->p_55->convertToNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                                            
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        return this->p_53->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        return this->p_54->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        return this->p_55->convertFromNormalizedParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    index -= 0;
                                                            
                                                                    if (index < this->p_53->getNumParameters())
                                                                        return this->p_53->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_53->getNumParameters();
                                                            
                                                                    if (index < this->p_54->getNumParameters())
                                                                        return this->p_54->constrainParameterValue(index, value);
                                                            
                                                                    index -= this->p_54->getNumParameters();
                                                            
                                                                    if (index < this->p_55->getNumParameters())
                                                                        return this->p_55->constrainParameterValue(index, value);
                                                            
                                                                    return value;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            void scheduleParamInit(ParameterIndex index, Index order) {
                                                                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                                            }
                                                            
                                                            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                                            
                                                            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                                            
                                                            void processOutletEvent(
                                                                EngineLink* sender,
                                                                OutletIndex index,
                                                                ParameterValue value,
                                                                MillisecondTime time
                                                            ) {
                                                                this->updateTime(time);
                                                                this->processOutletAtCurrentTime(sender, index, value);
                                                            }
                                                            
                                                            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_53->processNumMessage(tag, objectId, time, payload);
                                                                this->p_54->processNumMessage(tag, objectId, time, payload);
                                                                this->p_55->processNumMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processListMessage(
                                                                MessageTag tag,
                                                                MessageTag objectId,
                                                                MillisecondTime time,
                                                                const list& payload
                                                            ) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_53->processListMessage(tag, objectId, time, payload);
                                                                this->p_54->processListMessage(tag, objectId, time, payload);
                                                                this->p_55->processListMessage(tag, objectId, time, payload);
                                                            }
                                                            
                                                            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                                                RNBO_UNUSED(objectId);
                                                                this->updateTime(time);
                                                                this->p_53->processBangMessage(tag, objectId, time);
                                                                this->p_54->processBangMessage(tag, objectId, time);
                                                                this->p_55->processBangMessage(tag, objectId, time);
                                                            }
                                                            
                                                            MessageTagInfo resolveTag(MessageTag tag) const {
                                                                switch (tag) {
                                                            
                                                                }
                                                            
                                                                auto subpatchResult_0 = this->p_53->resolveTag(tag);
                                                            
                                                                if (subpatchResult_0)
                                                                    return subpatchResult_0;
                                                            
                                                                auto subpatchResult_1 = this->p_54->resolveTag(tag);
                                                            
                                                                if (subpatchResult_1)
                                                                    return subpatchResult_1;
                                                            
                                                                auto subpatchResult_2 = this->p_55->resolveTag(tag);
                                                            
                                                                if (subpatchResult_2)
                                                                    return subpatchResult_2;
                                                            
                                                                return nullptr;
                                                            }
                                                            
                                                            DataRef* getDataRef(DataRefIndex index)  {
                                                                switch (index) {
                                                                default:
                                                                    {
                                                                    return nullptr;
                                                                    }
                                                                }
                                                            }
                                                            
                                                            DataRefIndex getNumDataRefs() const {
                                                                return 0;
                                                            }
                                                            
                                                            void fillDataRef(DataRefIndex , DataRef& ) {}
                                                            
                                                            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                                                this->p_53->processDataViewUpdate(index, time);
                                                                this->p_54->processDataViewUpdate(index, time);
                                                                this->p_55->processDataViewUpdate(index, time);
                                                            }
                                                            
                                                            void initialize() {
                                                                this->assign_defaults();
                                                                this->setState();
                                                            }
                                                            
                                                            protected:
                                                            
                                                            number msToSamps(MillisecondTime ms, number sampleRate) {
                                                                return ms * sampleRate * 0.001;
                                                            }
                                                            
                                                            MillisecondTime sampsToMs(SampleIndex samps) {
                                                                return samps * (this->invsr * 1000);
                                                            }
                                                            
                                                            Index getMaxBlockSize() const {
                                                                return this->maxvs;
                                                            }
                                                            
                                                            number getSampleRate() const {
                                                                return this->sr;
                                                            }
                                                            
                                                            bool hasFixedVectorSize() const {
                                                                return false;
                                                            }
                                                            
                                                            Index getNumInputChannels() const {
                                                                return 0;
                                                            }
                                                            
                                                            Index getNumOutputChannels() const {
                                                                return 1;
                                                            }
                                                            
                                                            void initializeObjects() {
                                                                this->p_53->initializeObjects();
                                                                this->p_54->initializeObjects();
                                                                this->p_55->initializeObjects();
                                                            }
                                                            
                                                            void sendOutlet(OutletIndex index, ParameterValue value) {
                                                                this->getEngine()->sendOutlet(this, index, value);
                                                            }
                                                            
                                                            void startup() {
                                                                this->updateTime(this->getEngine()->getCurrentTime());
                                                                this->p_53->startup();
                                                                this->p_54->startup();
                                                                this->p_55->startup();
                                                            }
                                                            
                                                            void allocateDataRefs() {
                                                                this->p_53->allocateDataRefs();
                                                                this->p_54->allocateDataRefs();
                                                                this->p_55->allocateDataRefs();
                                                            }
                                                            
                                                            void selector_15_onoff_set(number v) {
                                                                this->selector_15_onoff = v;
                                                            }
                                                            
                                                            void receive_64_output_number_set(number v) {
                                                                this->receive_64_output_number = v;
                                                                this->selector_15_onoff_set(v);
                                                            }
                                                            
                                                            void p_53_target_FMLFO2freq_number_set(number v) {
                                                                this->p_53->updateTime(this->_currentTime);
                                                                this->p_53->receive_61_output_number_set(v);
                                                            }
                                                            
                                                            void p_54_target_FMLFO2freq_number_set(number v) {
                                                                this->p_54->updateTime(this->_currentTime);
                                                                this->p_54->receive_62_output_number_set(v);
                                                            }
                                                            
                                                            void p_55_target_FMLFO2freq_number_set(number v) {
                                                                this->p_55->updateTime(this->_currentTime);
                                                                this->p_55->receive_63_output_number_set(v);
                                                            }
                                                            
                                                            void p_53_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: sin
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_53->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_54_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: phasor
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_54->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void p_55_perform(SampleValue * out1, Index n) {
                                                                // subpatcher: triangle
                                                                SampleArray<1> outs = {out1};
                                                            
                                                                this->p_55->process(nullptr, 0, outs, 1, n);
                                                            }
                                                            
                                                            void selector_15_perform(
                                                                number onoff,
                                                                const SampleValue * in1,
                                                                const SampleValue * in2,
                                                                const SampleValue * in3,
                                                                const SampleValue * in4,
                                                                SampleValue * out,
                                                                Index n
                                                            ) {
                                                                Index i;
                                                            
                                                                for (i = 0; i < n; i++) {
                                                                    if (onoff >= 1 && onoff < 2)
                                                                        out[(Index)i] = in1[(Index)i];
                                                                    else if (onoff >= 2 && onoff < 3)
                                                                        out[(Index)i] = in2[(Index)i];
                                                                    else if (onoff >= 3 && onoff < 4)
                                                                        out[(Index)i] = in3[(Index)i];
                                                                    else if (onoff >= 4 && onoff < 5)
                                                                        out[(Index)i] = in4[(Index)i];
                                                                    else
                                                                        out[(Index)i] = 0;
                                                                }
                                                            }
                                                            
                                                            void stackprotect_perform(Index n) {
                                                                RNBO_UNUSED(n);
                                                                auto __stackprotect_count = this->stackprotect_count;
                                                                __stackprotect_count = 0;
                                                                this->stackprotect_count = __stackprotect_count;
                                                            }
                                                            
                                                            bool stackprotect_check() {
                                                                this->stackprotect_count++;
                                                            
                                                                if (this->stackprotect_count > 128) {
                                                                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                                    return true;
                                                                }
                                                            
                                                                return false;
                                                            }
                                                            
                                                            void updateTime(MillisecondTime time) {
                                                                this->_currentTime = time;
                                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                                            
                                                                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                                    this->sampleOffsetIntoNextAudioBuffer = 0;
                                                            }
                                                            
                                                            void assign_defaults()
                                                            {
                                                                receive_64_output_number = 0;
                                                                selector_15_onoff = 1;
                                                                p_53_target = 0;
                                                                p_54_target = 0;
                                                                p_55_target = 0;
                                                                _currentTime = 0;
                                                                audioProcessSampleCount = 0;
                                                                sampleOffsetIntoNextAudioBuffer = 0;
                                                                zeroBuffer = nullptr;
                                                                dummyBuffer = nullptr;
                                                                signals[0] = nullptr;
                                                                signals[1] = nullptr;
                                                                signals[2] = nullptr;
                                                                didAllocateSignals = 0;
                                                                vs = 0;
                                                                maxvs = 0;
                                                                sr = 44100;
                                                                invsr = 0.00002267573696;
                                                                stackprotect_count = 0;
                                                                _voiceIndex = 0;
                                                                _noteNumber = 0;
                                                                isMuted = 1;
                                                                parameterOffset = 0;
                                                            }
                                                            
                                                            // member variables
                                                            
                                                                number receive_64_output_number;
                                                                list receive_64_output_list;
                                                                number selector_15_onoff;
                                                                number p_53_target;
                                                                number p_54_target;
                                                                number p_55_target;
                                                                MillisecondTime _currentTime;
                                                                SampleIndex audioProcessSampleCount;
                                                                SampleIndex sampleOffsetIntoNextAudioBuffer;
                                                                signal zeroBuffer;
                                                                signal dummyBuffer;
                                                                SampleValue * signals[3];
                                                                bool didAllocateSignals;
                                                                Index vs;
                                                                Index maxvs;
                                                                number sr;
                                                                number invsr;
                                                                number stackprotect_count;
                                                                Index _voiceIndex;
                                                                Int _noteNumber;
                                                                Index isMuted;
                                                                ParameterIndex parameterOffset;
                                                                RNBOSubpatcher_4281* p_53;
                                                                RNBOSubpatcher_4282* p_54;
                                                                RNBOSubpatcher_4283* p_55;
                                                            
                                        };
                                        
                                        RNBOSubpatcher_4286()
                                        {
                                        }
                                        
                                        ~RNBOSubpatcher_4286()
                                        {
                                            delete this->p_56;
                                        }
                                        
                                        virtual RNBOSubpatcher_4287* getPatcher() const {
                                            return static_cast<RNBOSubpatcher_4287 *>(_parentPatcher);
                                        }
                                        
                                        rnbomatic* getTopLevelPatcher() {
                                            return this->getPatcher()->getTopLevelPatcher();
                                        }
                                        
                                        void cancelClockEvents()
                                        {
                                        }
                                        
                                        Index getNumMidiInputPorts() const {
                                            return 0;
                                        }
                                        
                                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                                        
                                        Index getNumMidiOutputPorts() const {
                                            return 0;
                                        }
                                        
                                        void process(
                                            const SampleValue * const* inputs,
                                            Index numInputs,
                                            SampleValue * const* outputs,
                                            Index numOutputs,
                                            Index n
                                        ) {
                                            RNBO_UNUSED(numInputs);
                                            RNBO_UNUSED(inputs);
                                            this->vs = n;
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                                            this->p_56_perform(out1, n);
                                            this->stackprotect_perform(n);
                                            this->audioProcessSampleCount += this->vs;
                                        }
                                        
                                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                                this->didAllocateSignals = true;
                                            }
                                        
                                            const bool sampleRateChanged = sampleRate != this->sr;
                                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                                        
                                            if (sampleRateChanged || maxvsChanged) {
                                                this->vs = maxBlockSize;
                                                this->maxvs = maxBlockSize;
                                                this->sr = sampleRate;
                                                this->invsr = 1 / sampleRate;
                                            }
                                        
                                            RNBO_UNUSED(forceDSPSetup);
                                            this->p_56->prepareToProcess(sampleRate, maxBlockSize, force);
                                        
                                            if (sampleRateChanged)
                                                this->onSampleRateChanged(sampleRate);
                                        }
                                        
                                        void setProbingTarget(MessageTag id) {
                                            switch (id) {
                                            default:
                                                {
                                                this->setProbingIndex(-1);
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void setProbingIndex(ProbingIndex ) {}
                                        
                                        Index getProbingChannels(MessageTag outletId) const {
                                            RNBO_UNUSED(outletId);
                                            return 0;
                                        }
                                        
                                        Index getIsMuted()  {
                                            return this->isMuted;
                                        }
                                        
                                        void setIsMuted(Index v)  {
                                            this->isMuted = v;
                                        }
                                        
                                        Index getPatcherSerial() const {
                                            return 0;
                                        }
                                        
                                        void getState(PatcherStateInterface& ) {}
                                        
                                        void setState() {
                                            this->p_56 = new RNBOSubpatcher_4284();
                                            this->p_56->setEngineAndPatcher(this->getEngine(), this);
                                            this->p_56->initialize();
                                            this->p_56->setParameterOffset(this->getParameterOffset(this->p_56));
                                        }
                                        
                                        void getPreset(PatcherStateInterface& preset) {
                                            this->p_56->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
                                        }
                                        
                                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                                            this->updateTime(time);
                                            this->p_56->processTempoEvent(time, tempo);
                                        }
                                        
                                        void processTransportEvent(MillisecondTime time, TransportState state) {
                                            this->updateTime(time);
                                            this->p_56->processTransportEvent(time, state);
                                        }
                                        
                                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                                            this->updateTime(time);
                                            this->p_56->processBeatTimeEvent(time, beattime);
                                        }
                                        
                                        void onSampleRateChanged(double ) {}
                                        
                                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                                            this->updateTime(time);
                                            this->p_56->processTimeSignatureEvent(time, numerator, denominator);
                                        }
                                        
                                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                                            RNBO_UNUSED(v);
                                            this->updateTime(time);
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    this->p_56->setParameterValue(index, v, time);
                                        
                                                break;
                                                }
                                            }
                                        }
                                        
                                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValue(index, value, time);
                                        }
                                        
                                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                                            this->setParameterValue(index, this->getParameterValue(index), time);
                                        }
                                        
                                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                                            this->setParameterValueNormalized(index, value, time);
                                        }
                                        
                                        ParameterValue getParameterValue(ParameterIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    return this->p_56->getParameterValue(index);
                                        
                                                return 0;
                                                }
                                            }
                                        }
                                        
                                        ParameterIndex getNumSignalInParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumSignalOutParameters() const {
                                            return 0;
                                        }
                                        
                                        ParameterIndex getNumParameters() const {
                                            return 0 + this->p_56->getNumParameters();
                                        }
                                        
                                        ConstCharPointer getParameterName(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    return this->p_56->getParameterName(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        ConstCharPointer getParameterId(ParameterIndex index) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    return this->p_56->getParameterId(index);
                                        
                                                return "bogus";
                                                }
                                            }
                                        }
                                        
                                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                                            {
                                                switch (index) {
                                                default:
                                                    {
                                                    index -= 0;
                                        
                                                    if (index < this->p_56->getNumParameters())
                                                        this->p_56->getParameterInfo(index, info);
                                        
                                                    break;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                                        }
                                        
                                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                                            if (subpatcher == this->p_56)
                                                return 0;
                                        
                                            return 0;
                                        }
                                        
                                        void setParameterOffset(ParameterIndex offset) {
                                            this->parameterOffset = offset;
                                        }
                                        
                                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                                            if (steps == 1) {
                                                if (normalizedValue > 0) {
                                                    normalizedValue = 1.;
                                                }
                                            } else {
                                                ParameterValue oneStep = (number)1. / (steps - 1);
                                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                                normalizedValue = numberOfSteps * oneStep;
                                            }
                                        
                                            return normalizedValue;
                                        }
                                        
                                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    return this->p_56->convertToNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                                        
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    return this->p_56->convertFromNormalizedParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                                            switch (index) {
                                            default:
                                                {
                                                index -= 0;
                                        
                                                if (index < this->p_56->getNumParameters())
                                                    return this->p_56->constrainParameterValue(index, value);
                                        
                                                return value;
                                                }
                                            }
                                        }
                                        
                                        void scheduleParamInit(ParameterIndex index, Index order) {
                                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                                        }
                                        
                                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                                        
                                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                                        
                                        void processOutletEvent(
                                            EngineLink* sender,
                                            OutletIndex index,
                                            ParameterValue value,
                                            MillisecondTime time
                                        ) {
                                            this->updateTime(time);
                                            this->processOutletAtCurrentTime(sender, index, value);
                                        }
                                        
                                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_56->processNumMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processListMessage(
                                            MessageTag tag,
                                            MessageTag objectId,
                                            MillisecondTime time,
                                            const list& payload
                                        ) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_56->processListMessage(tag, objectId, time, payload);
                                        }
                                        
                                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                                            RNBO_UNUSED(objectId);
                                            this->updateTime(time);
                                            this->p_56->processBangMessage(tag, objectId, time);
                                        }
                                        
                                        MessageTagInfo resolveTag(MessageTag tag) const {
                                            switch (tag) {
                                        
                                            }
                                        
                                            auto subpatchResult_0 = this->p_56->resolveTag(tag);
                                        
                                            if (subpatchResult_0)
                                                return subpatchResult_0;
                                        
                                            return nullptr;
                                        }
                                        
                                        DataRef* getDataRef(DataRefIndex index)  {
                                            switch (index) {
                                            default:
                                                {
                                                return nullptr;
                                                }
                                            }
                                        }
                                        
                                        DataRefIndex getNumDataRefs() const {
                                            return 0;
                                        }
                                        
                                        void fillDataRef(DataRefIndex , DataRef& ) {}
                                        
                                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                                            this->p_56->processDataViewUpdate(index, time);
                                        }
                                        
                                        void initialize() {
                                            this->assign_defaults();
                                            this->setState();
                                        }
                                        
                                        protected:
                                        
                                        number msToSamps(MillisecondTime ms, number sampleRate) {
                                            return ms * sampleRate * 0.001;
                                        }
                                        
                                        MillisecondTime sampsToMs(SampleIndex samps) {
                                            return samps * (this->invsr * 1000);
                                        }
                                        
                                        Index getMaxBlockSize() const {
                                            return this->maxvs;
                                        }
                                        
                                        number getSampleRate() const {
                                            return this->sr;
                                        }
                                        
                                        bool hasFixedVectorSize() const {
                                            return false;
                                        }
                                        
                                        Index getNumInputChannels() const {
                                            return 0;
                                        }
                                        
                                        Index getNumOutputChannels() const {
                                            return 1;
                                        }
                                        
                                        void initializeObjects() {
                                            this->p_56->initializeObjects();
                                        }
                                        
                                        void sendOutlet(OutletIndex index, ParameterValue value) {
                                            this->getEngine()->sendOutlet(this, index, value);
                                        }
                                        
                                        void startup() {
                                            this->updateTime(this->getEngine()->getCurrentTime());
                                            this->p_56->startup();
                                        }
                                        
                                        void allocateDataRefs() {
                                            this->p_56->allocateDataRefs();
                                        }
                                        
                                        void p_56_target_FMLFO2source_number_set(number v) {
                                            this->p_56->updateTime(this->_currentTime);
                                            this->p_56->receive_64_output_number_set(v);
                                        }
                                        
                                        void p_56_target_FMLFO2freq_number_set(number v) {
                                            this->p_56->updateTime(this->_currentTime);
                                            this->p_56->p_53_target_FMLFO2freq_number_set(v);
                                            this->p_56->updateTime(this->_currentTime);
                                            this->p_56->p_54_target_FMLFO2freq_number_set(v);
                                            this->p_56->updateTime(this->_currentTime);
                                            this->p_56->p_55_target_FMLFO2freq_number_set(v);
                                        }
                                        
                                        void p_56_perform(SampleValue * out1, Index n) {
                                            // subpatcher: generator
                                            SampleArray<1> outs = {out1};
                                        
                                            this->p_56->process(nullptr, 0, outs, 1, n);
                                        }
                                        
                                        void stackprotect_perform(Index n) {
                                            RNBO_UNUSED(n);
                                            auto __stackprotect_count = this->stackprotect_count;
                                            __stackprotect_count = 0;
                                            this->stackprotect_count = __stackprotect_count;
                                        }
                                        
                                        bool stackprotect_check() {
                                            this->stackprotect_count++;
                                        
                                            if (this->stackprotect_count > 128) {
                                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                                return true;
                                            }
                                        
                                            return false;
                                        }
                                        
                                        void updateTime(MillisecondTime time) {
                                            this->_currentTime = time;
                                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                                        
                                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                                this->sampleOffsetIntoNextAudioBuffer = 0;
                                        }
                                        
                                        void assign_defaults()
                                        {
                                            p_56_target = 0;
                                            _currentTime = 0;
                                            audioProcessSampleCount = 0;
                                            sampleOffsetIntoNextAudioBuffer = 0;
                                            zeroBuffer = nullptr;
                                            dummyBuffer = nullptr;
                                            didAllocateSignals = 0;
                                            vs = 0;
                                            maxvs = 0;
                                            sr = 44100;
                                            invsr = 0.00002267573696;
                                            stackprotect_count = 0;
                                            _voiceIndex = 0;
                                            _noteNumber = 0;
                                            isMuted = 1;
                                            parameterOffset = 0;
                                        }
                                        
                                        // member variables
                                        
                                            number p_56_target;
                                            MillisecondTime _currentTime;
                                            SampleIndex audioProcessSampleCount;
                                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                                            signal zeroBuffer;
                                            signal dummyBuffer;
                                            bool didAllocateSignals;
                                            Index vs;
                                            Index maxvs;
                                            number sr;
                                            number invsr;
                                            number stackprotect_count;
                                            Index _voiceIndex;
                                            Int _noteNumber;
                                            Index isMuted;
                                            ParameterIndex parameterOffset;
                                            RNBOSubpatcher_4284* p_56;
                                        
                        };
                        
                        RNBOSubpatcher_4287()
                        {
                        }
                        
                        ~RNBOSubpatcher_4287()
                        {
                            delete this->p_57;
                            delete this->p_58;
                        }
                        
                        virtual RNBOSubpatcher_4290* getPatcher() const {
                            return static_cast<RNBOSubpatcher_4290 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                            this->signalgate_06_perform(this->signalgate_06_onoff, this->zeroBuffer, this->signals[0], n);
                            this->p_57_perform(this->signals[1], n);
                            this->dspexpr_20_perform(this->signals[1], this->dspexpr_20_in2, this->signals[2], n);
                            this->p_58_perform(this->signals[1], n);
                            this->dspexpr_22_perform(this->signals[1], this->dspexpr_22_in2, this->signals[3], n);
                            this->dspexpr_21_perform(this->signals[2], this->signals[3], this->signals[1], n);
                        
                            this->selector_16_perform(
                                this->selector_16_onoff,
                                this->signals[0],
                                this->signals[1],
                                this->signals[3],
                                n
                            );
                        
                            this->dspexpr_19_perform(this->dspexpr_19_in1, this->signals[3], out1, n);
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                Index i;
                        
                                for (i = 0; i < 4; i++) {
                                    this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                                }
                        
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                            this->p_57->prepareToProcess(sampleRate, maxBlockSize, force);
                            this->p_58->prepareToProcess(sampleRate, maxBlockSize, force);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {
                            this->p_57 = new RNBOSubpatcher_4285();
                            this->p_57->setEngineAndPatcher(this->getEngine(), this);
                            this->p_57->initialize();
                            this->p_57->setParameterOffset(this->getParameterOffset(this->p_57));
                            this->p_58 = new RNBOSubpatcher_4286();
                            this->p_58->setEngineAndPatcher(this->getEngine(), this);
                            this->p_58->initialize();
                            this->p_58->setParameterOffset(this->getParameterOffset(this->p_58));
                        }
                        
                        void getPreset(PatcherStateInterface& preset) {
                            this->p_57->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO[1]"));
                            this->p_58->getPreset(getSubState(getSubState(preset, "__sps"), "FMLFO"));
                        }
                        
                        void processTempoEvent(MillisecondTime time, Tempo tempo) {
                            this->updateTime(time);
                            this->p_57->processTempoEvent(time, tempo);
                            this->p_58->processTempoEvent(time, tempo);
                        }
                        
                        void processTransportEvent(MillisecondTime time, TransportState state) {
                            this->updateTime(time);
                            this->p_57->processTransportEvent(time, state);
                            this->p_58->processTransportEvent(time, state);
                        }
                        
                        void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                            this->updateTime(time);
                            this->p_57->processBeatTimeEvent(time, beattime);
                            this->p_58->processBeatTimeEvent(time, beattime);
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                            this->updateTime(time);
                            this->p_57->processTimeSignatureEvent(time, numerator, denominator);
                            this->p_58->processTimeSignatureEvent(time, numerator, denominator);
                        }
                        
                        void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                            RNBO_UNUSED(v);
                            this->updateTime(time);
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    this->p_57->setParameterValue(index, v, time);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    this->p_58->setParameterValue(index, v, time);
                        
                                break;
                                }
                            }
                        }
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    return this->p_57->getParameterValue(index);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    return this->p_58->getParameterValue(index);
                        
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0 + this->p_57->getNumParameters() + this->p_58->getNumParameters();
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    return this->p_57->getParameterName(index);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    return this->p_58->getParameterName(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    return this->p_57->getParameterId(index);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    return this->p_58->getParameterId(index);
                        
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                            {
                                switch (index) {
                                default:
                                    {
                                    index -= 0;
                        
                                    if (index < this->p_57->getNumParameters())
                                        this->p_57->getParameterInfo(index, info);
                        
                                    index -= this->p_57->getNumParameters();
                        
                                    if (index < this->p_58->getNumParameters())
                                        this->p_58->getParameterInfo(index, info);
                        
                                    break;
                                    }
                                }
                            }
                        }
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                            if (subpatcher == this->p_57)
                                return 0;
                        
                            if (subpatcher == this->p_58)
                                return 0 + this->p_57->getNumParameters();
                        
                            return 0;
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    return this->p_57->convertToNormalizedParameterValue(index, value);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    return this->p_58->convertToNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    return this->p_57->convertFromNormalizedParameterValue(index, value);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    return this->p_58->convertFromNormalizedParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                index -= 0;
                        
                                if (index < this->p_57->getNumParameters())
                                    return this->p_57->constrainParameterValue(index, value);
                        
                                index -= this->p_57->getNumParameters();
                        
                                if (index < this->p_58->getNumParameters())
                                    return this->p_58->constrainParameterValue(index, value);
                        
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_57->processNumMessage(tag, objectId, time, payload);
                            this->p_58->processNumMessage(tag, objectId, time, payload);
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_57->processListMessage(tag, objectId, time, payload);
                            this->p_58->processListMessage(tag, objectId, time, payload);
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            RNBO_UNUSED(objectId);
                            this->updateTime(time);
                            this->p_57->processBangMessage(tag, objectId, time);
                            this->p_58->processBangMessage(tag, objectId, time);
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                        
                            }
                        
                            auto subpatchResult_0 = this->p_57->resolveTag(tag);
                        
                            if (subpatchResult_0)
                                return subpatchResult_0;
                        
                            auto subpatchResult_1 = this->p_58->resolveTag(tag);
                        
                            if (subpatchResult_1)
                                return subpatchResult_1;
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->p_57->processDataViewUpdate(index, time);
                            this->p_58->processDataViewUpdate(index, time);
                        }
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 1;
                        }
                        
                        void initializeObjects() {
                            this->p_57->initializeObjects();
                            this->p_58->initializeObjects();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->p_57->startup();
                            this->p_58->startup();
                        }
                        
                        void allocateDataRefs() {
                            this->p_57->allocateDataRefs();
                            this->p_58->allocateDataRefs();
                        }
                        
                        void p_57_target_FMLFOsource_number_set(number v) {
                            this->p_57->updateTime(this->_currentTime);
                            this->p_57->p_52_target_FMLFOsource_number_set(v);
                        }
                        
                        void dspexpr_20_in2_set(number v) {
                            this->dspexpr_20_in2 = v;
                        }
                        
                        void receive_68_output_number_set(number v) {
                            this->receive_68_output_number = v;
                            this->dspexpr_20_in2_set(v);
                        }
                        
                        void signalgate_06_onoff_set(number v) {
                            this->signalgate_06_onoff = v;
                        }
                        
                        void receive_67_output_number_set(number v) {
                            this->receive_67_output_number = v;
                            this->signalgate_06_onoff_set(v);
                        }
                        
                        void dspexpr_19_in1_set(number v) {
                            this->dspexpr_19_in1 = v;
                        }
                        
                        void receive_65_output_number_set(number v) {
                            this->receive_65_output_number = v;
                            this->dspexpr_19_in1_set(v);
                        }
                        
                        void selector_16_onoff_set(number v) {
                            this->selector_16_onoff = v;
                        }
                        
                        void expr_05_out1_set(number v) {
                            this->expr_05_out1 = v;
                            this->selector_16_onoff_set(this->expr_05_out1);
                        }
                        
                        void expr_05_in1_set(number in1) {
                            this->expr_05_in1 = in1;
                            this->expr_05_out1_set(this->expr_05_in1 + this->expr_05_in2);//#map:generator/triangle/freq/+_obj-15:1
                        }
                        
                        void receive_66_output_number_set(number v) {
                            this->receive_66_output_number = v;
                            this->expr_05_in1_set(v);
                        }
                        
                        void p_58_target_FMLFO2source_number_set(number v) {
                            this->p_58->updateTime(this->_currentTime);
                            this->p_58->p_56_target_FMLFO2source_number_set(v);
                        }
                        
                        void p_57_target_FMLFOfreq_number_set(number v) {
                            this->p_57->updateTime(this->_currentTime);
                            this->p_57->p_52_target_FMLFOfreq_number_set(v);
                        }
                        
                        void p_58_target_FMLFO2freq_number_set(number v) {
                            this->p_58->updateTime(this->_currentTime);
                            this->p_58->p_56_target_FMLFO2freq_number_set(v);
                        }
                        
                        void signalgate_06_perform(number onoff, const SampleValue * input, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (onoff == 1) {
                                    out1[(Index)i] = input[(Index)i];
                                } else {
                                    out1[(Index)i] = 0;
                                }
                            }
                        }
                        
                        void p_57_perform(SampleValue * out1, Index n) {
                            // subpatcher: FMLFO
                            SampleArray<1> outs = {out1};
                        
                            this->p_57->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void dspexpr_20_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void p_58_perform(SampleValue * out1, Index n) {
                            // subpatcher: FMLFO
                            SampleArray<1> outs = {out1};
                        
                            this->p_58->process(nullptr, 0, outs, 1, n);
                        }
                        
                        void dspexpr_22_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
                            }
                        }
                        
                        void dspexpr_21_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void selector_16_perform(
                            number onoff,
                            const SampleValue * in1,
                            const SampleValue * in2,
                            SampleValue * out,
                            Index n
                        ) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                if (onoff >= 1 && onoff < 2)
                                    out[(Index)i] = in1[(Index)i];
                                else if (onoff >= 2 && onoff < 3)
                                    out[(Index)i] = in2[(Index)i];
                                else
                                    out[(Index)i] = 0;
                            }
                        }
                        
                        void dspexpr_19_perform(number in1, const Sample * in2, SampleValue * out1, Index n) {
                            Index i;
                        
                            for (i = 0; i < n; i++) {
                                out1[(Index)i] = in1 + in2[(Index)i];//#map:_###_obj_###_:1
                            }
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            receive_65_output_number = 0;
                            dspexpr_19_in1 = 0;
                            dspexpr_19_in2 = 0;
                            expr_05_in1 = 0;
                            expr_05_in2 = 1;
                            expr_05_out1 = 0;
                            receive_66_output_number = 0;
                            selector_16_onoff = 1;
                            signalgate_06_onoff = 0;
                            receive_67_output_number = 0;
                            dspexpr_20_in1 = 0;
                            dspexpr_20_in2 = 0;
                            dspexpr_21_in1 = 0;
                            dspexpr_21_in2 = 0;
                            p_57_target = 0;
                            p_58_target = 0;
                            dspexpr_22_in1 = 0;
                            dspexpr_22_in2 = 0;
                            receive_68_output_number = 0;
                            receive_69_output_number = 0;
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            signals[0] = nullptr;
                            signals[1] = nullptr;
                            signals[2] = nullptr;
                            signals[3] = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number receive_65_output_number;
                            list receive_65_output_list;
                            number dspexpr_19_in1;
                            number dspexpr_19_in2;
                            number expr_05_in1;
                            number expr_05_in2;
                            number expr_05_out1;
                            number receive_66_output_number;
                            list receive_66_output_list;
                            number selector_16_onoff;
                            number signalgate_06_onoff;
                            number receive_67_output_number;
                            list receive_67_output_list;
                            number dspexpr_20_in1;
                            number dspexpr_20_in2;
                            number dspexpr_21_in1;
                            number dspexpr_21_in2;
                            number p_57_target;
                            number p_58_target;
                            number dspexpr_22_in1;
                            number dspexpr_22_in2;
                            number receive_68_output_number;
                            list receive_68_output_list;
                            number receive_69_output_number;
                            list receive_69_output_list;
                            MillisecondTime _currentTime;
                            SampleIndex audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            SampleValue * signals[4];
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                            RNBOSubpatcher_4285* p_57;
                            RNBOSubpatcher_4286* p_58;
                        
            };
            
            RNBOSubpatcher_4290()
            {
            }
            
            ~RNBOSubpatcher_4290()
            {
                delete this->p_59;
            }
            
            virtual RNBOSubpatcher_4292* getPatcher() const {
                return static_cast<RNBOSubpatcher_4292 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            number samplerate() {
                return this->sr;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                this->p_59_perform(this->signals[0], n);
                this->phasor_24_perform(this->signals[0], this->signals[1], n);
                this->triangle_tilde_12_perform(this->signals[1], this->triangle_tilde_12_duty, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 2; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->phasor_24_sigbuf = resizeSignal(this->phasor_24_sigbuf, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->phasor_24_dspsetup(forceDSPSetup);
                this->p_59->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_59 = new RNBOSubpatcher_4287();
                this->p_59->setEngineAndPatcher(this->getEngine(), this);
                this->p_59->initialize();
                this->p_59->setParameterOffset(this->getParameterOffset(this->p_59));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_59->getPreset(getSubState(getSubState(preset, "__sps"), "freq"));
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->p_59->processTempoEvent(time, tempo);
            }
            
            void processTransportEvent(MillisecondTime time, TransportState state) {
                this->updateTime(time);
                this->p_59->processTransportEvent(time, state);
            }
            
            void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
                this->updateTime(time);
                this->p_59->processBeatTimeEvent(time, beattime);
            }
            
            void onSampleRateChanged(double ) {}
            
            void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
                this->updateTime(time);
                this->p_59->processTimeSignatureEvent(time, numerator, denominator);
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        this->p_59->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        return this->p_59->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_59->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        return this->p_59->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        return this->p_59->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_59->getNumParameters())
                            this->p_59->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_59)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        return this->p_59->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        return this->p_59->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_59->getNumParameters())
                        return this->p_59->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_59->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_59->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                RNBO_UNUSED(objectId);
                this->updateTime(time);
                this->p_59->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                auto subpatchResult_0 = this->p_59->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->p_59->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->p_59->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_59->startup();
            }
            
            void allocateDataRefs() {
                this->p_59->allocateDataRefs();
            }
            
            void p_59_target_FMLFOsource_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->p_57_target_FMLFOsource_number_set(v);
            }
            
            void p_59_target_FMLFODepth_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->receive_68_output_number_set(v);
            }
            
            void p_59_target_FM_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->receive_67_output_number_set(v);
            }
            
            void p_59_target_pitch_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->receive_65_output_number_set(v);
            }
            
            void p_59_target_FM2_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->receive_66_output_number_set(v);
            }
            
            void p_59_target_FMLFO2source_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->p_58_target_FMLFO2source_number_set(v);
            }
            
            void p_59_target_FMLFOfreq_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->p_57_target_FMLFOfreq_number_set(v);
            }
            
            void p_59_target_FMLFO2freq_number_set(number v) {
                this->p_59->updateTime(this->_currentTime);
                this->p_59->p_58_target_FMLFO2freq_number_set(v);
            }
            
            void p_59_perform(SampleValue * out1, Index n) {
                // subpatcher: freq
                SampleArray<1> outs = {out1};
            
                this->p_59->process(nullptr, 0, outs, 1, n);
            }
            
            void phasor_24_perform(const Sample * freq, SampleValue * out, Index n) {
                for (Index i = 0; i < n; i++) {
                    out[(Index)i] = this->phasor_24_ph_next(freq[(Index)i], -1);
                    this->phasor_24_sigbuf[(Index)i] = -1;
                }
            }
            
            void triangle_tilde_12_perform(const Sample * phase, number duty, SampleValue * out1, Index n) {
                RNBO_UNUSED(duty);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number p1 = 0.5;
                    auto wrappedPhase = this->wrap(phase[(Index)i], 0., 1.);
                    p1 = (p1 > 1. ? 1. : (p1 < 0. ? 0. : p1));
            
                    if (wrappedPhase < p1) {
                        out1[(Index)i] = wrappedPhase / p1;
                        continue;
                    } else {
                        out1[(Index)i] = (p1 == 1. ? wrappedPhase : 1. - (wrappedPhase - p1) / (1. - p1));
                        continue;
                    }
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number phasor_24_ph_next(number freq, number reset) {
                RNBO_UNUSED(reset);
                number pincr = freq * this->phasor_24_ph_conv;
            
                if (this->phasor_24_ph_currentPhase < 0.)
                    this->phasor_24_ph_currentPhase = 1. + this->phasor_24_ph_currentPhase;
            
                if (this->phasor_24_ph_currentPhase > 1.)
                    this->phasor_24_ph_currentPhase = this->phasor_24_ph_currentPhase - 1.;
            
                number tmp = this->phasor_24_ph_currentPhase;
                this->phasor_24_ph_currentPhase += pincr;
                return tmp;
            }
            
            void phasor_24_ph_reset() {
                this->phasor_24_ph_currentPhase = 0;
            }
            
            void phasor_24_ph_dspsetup() {
                this->phasor_24_ph_conv = (number)1 / this->sr;
            }
            
            void phasor_24_dspsetup(bool force) {
                if ((bool)(this->phasor_24_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->phasor_24_conv = (number)1 / this->samplerate();
                this->phasor_24_setupDone = true;
                this->phasor_24_ph_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                triangle_tilde_12_phase = 0;
                triangle_tilde_12_duty = 0.5;
                phasor_24_freq = 0;
                p_59_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                phasor_24_sigbuf = nullptr;
                phasor_24_lastLockedPhase = 0;
                phasor_24_conv = 0;
                phasor_24_ph_currentPhase = 0;
                phasor_24_ph_conv = 0;
                phasor_24_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number triangle_tilde_12_phase;
                number triangle_tilde_12_duty;
                number phasor_24_freq;
                number p_59_target;
                MillisecondTime _currentTime;
                SampleIndex audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[2];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                signal phasor_24_sigbuf;
                number phasor_24_lastLockedPhase;
                number phasor_24_conv;
                number phasor_24_ph_currentPhase;
                number phasor_24_ph_conv;
                bool phasor_24_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_4287* p_59;
            
    };
    
    RNBOSubpatcher_4292()
    {
    }
    
    ~RNBOSubpatcher_4292()
    {
        delete this->p_60;
        delete this->p_61;
        delete this->p_62;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->p_60_perform(this->signals[0], n);
        this->p_61_perform(this->signals[1], n);
        this->p_62_perform(this->signals[2], n);
    
        this->selector_17_perform(
            this->selector_17_onoff,
            this->zeroBuffer,
            this->signals[0],
            this->signals[1],
            this->signals[2],
            out1,
            n
        );
    
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 3; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_60->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_61->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_62->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_60 = new RNBOSubpatcher_4288();
        this->p_60->setEngineAndPatcher(this->getEngine(), this);
        this->p_60->initialize();
        this->p_60->setParameterOffset(this->getParameterOffset(this->p_60));
        this->p_61 = new RNBOSubpatcher_4289();
        this->p_61->setEngineAndPatcher(this->getEngine(), this);
        this->p_61->initialize();
        this->p_61->setParameterOffset(this->getParameterOffset(this->p_61));
        this->p_62 = new RNBOSubpatcher_4290();
        this->p_62->setEngineAndPatcher(this->getEngine(), this);
        this->p_62->initialize();
        this->p_62->setParameterOffset(this->getParameterOffset(this->p_62));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_60->getPreset(getSubState(getSubState(preset, "__sps"), "sin"));
        this->p_61->getPreset(getSubState(getSubState(preset, "__sps"), "phasor"));
        this->p_62->getPreset(getSubState(getSubState(preset, "__sps"), "triangle"));
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_60->processTempoEvent(time, tempo);
        this->p_61->processTempoEvent(time, tempo);
        this->p_62->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_60->processTransportEvent(time, state);
        this->p_61->processTransportEvent(time, state);
        this->p_62->processTransportEvent(time, state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_60->processBeatTimeEvent(time, beattime);
        this->p_61->processBeatTimeEvent(time, beattime);
        this->p_62->processBeatTimeEvent(time, beattime);
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_60->processTimeSignatureEvent(time, numerator, denominator);
        this->p_61->processTimeSignatureEvent(time, numerator, denominator);
        this->p_62->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                this->p_60->setParameterValue(index, v, time);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                this->p_61->setParameterValue(index, v, time);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                this->p_62->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                return this->p_60->getParameterValue(index);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                return this->p_61->getParameterValue(index);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                return this->p_62->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_60->getNumParameters() + this->p_61->getNumParameters() + this->p_62->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                return this->p_60->getParameterName(index);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                return this->p_61->getParameterName(index);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                return this->p_62->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                return this->p_60->getParameterId(index);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                return this->p_61->getParameterId(index);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                return this->p_62->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_60->getNumParameters())
                    this->p_60->getParameterInfo(index, info);
    
                index -= this->p_60->getNumParameters();
    
                if (index < this->p_61->getNumParameters())
                    this->p_61->getParameterInfo(index, info);
    
                index -= this->p_61->getNumParameters();
    
                if (index < this->p_62->getNumParameters())
                    this->p_62->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_60)
            return 0;
    
        if (subpatcher == this->p_61)
            return 0 + this->p_60->getNumParameters();
    
        if (subpatcher == this->p_62)
            return 0 + this->p_60->getNumParameters() + this->p_61->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                return this->p_60->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                return this->p_61->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                return this->p_62->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                return this->p_60->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                return this->p_61->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                return this->p_62->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_60->getNumParameters())
                return this->p_60->constrainParameterValue(index, value);
    
            index -= this->p_60->getNumParameters();
    
            if (index < this->p_61->getNumParameters())
                return this->p_61->constrainParameterValue(index, value);
    
            index -= this->p_61->getNumParameters();
    
            if (index < this->p_62->getNumParameters())
                return this->p_62->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_60->processNumMessage(tag, objectId, time, payload);
        this->p_61->processNumMessage(tag, objectId, time, payload);
        this->p_62->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_60->processListMessage(tag, objectId, time, payload);
        this->p_61->processListMessage(tag, objectId, time, payload);
        this->p_62->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        RNBO_UNUSED(objectId);
        this->updateTime(time);
        this->p_60->processBangMessage(tag, objectId, time);
        this->p_61->processBangMessage(tag, objectId, time);
        this->p_62->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        auto subpatchResult_0 = this->p_60->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_61->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_62->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->p_60->processDataViewUpdate(index, time);
        this->p_61->processDataViewUpdate(index, time);
        this->p_62->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->p_60->initializeObjects();
        this->p_61->initializeObjects();
        this->p_62->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_60->startup();
        this->p_61->startup();
        this->p_62->startup();
    }
    
    void allocateDataRefs() {
        this->p_60->allocateDataRefs();
        this->p_61->allocateDataRefs();
        this->p_62->allocateDataRefs();
    }
    
    void selector_17_onoff_set(number v) {
        this->selector_17_onoff = v;
    }
    
    void receive_70_output_number_set(number v) {
        this->receive_70_output_number = v;
        this->selector_17_onoff_set(v);
    }
    
    void p_60_target_FMLFOsource_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FMLFOsource_number_set(v);
    }
    
    void p_61_target_FMLFOsource_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FMLFOsource_number_set(v);
    }
    
    void p_62_target_FMLFOsource_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FMLFOsource_number_set(v);
    }
    
    void p_60_target_FMLFODepth_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FMLFODepth_number_set(v);
    }
    
    void p_61_target_FMLFODepth_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FMLFODepth_number_set(v);
    }
    
    void p_62_target_FMLFODepth_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FMLFODepth_number_set(v);
    }
    
    void p_60_target_FM_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FM_number_set(v);
    }
    
    void p_61_target_FM_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FM_number_set(v);
    }
    
    void p_62_target_FM_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FM_number_set(v);
    }
    
    void p_60_target_pitch_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_pitch_number_set(v);
    }
    
    void p_61_target_pitch_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_pitch_number_set(v);
    }
    
    void p_62_target_pitch_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_pitch_number_set(v);
    }
    
    void p_60_target_FM2_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FM2_number_set(v);
    }
    
    void p_61_target_FM2_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FM2_number_set(v);
    }
    
    void p_62_target_FM2_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FM2_number_set(v);
    }
    
    void p_60_target_FMLFO2source_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FMLFO2source_number_set(v);
    }
    
    void p_61_target_FMLFO2source_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FMLFO2source_number_set(v);
    }
    
    void p_62_target_FMLFO2source_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FMLFO2source_number_set(v);
    }
    
    void p_60_target_FMLFOfreq_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FMLFOfreq_number_set(v);
    }
    
    void p_61_target_FMLFOfreq_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FMLFOfreq_number_set(v);
    }
    
    void p_62_target_FMLFOfreq_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FMLFOfreq_number_set(v);
    }
    
    void p_60_target_FMLFO2freq_number_set(number v) {
        this->p_60->updateTime(this->_currentTime);
        this->p_60->p_37_target_FMLFO2freq_number_set(v);
    }
    
    void p_61_target_FMLFO2freq_number_set(number v) {
        this->p_61->updateTime(this->_currentTime);
        this->p_61->p_48_target_FMLFO2freq_number_set(v);
    }
    
    void p_62_target_FMLFO2freq_number_set(number v) {
        this->p_62->updateTime(this->_currentTime);
        this->p_62->p_59_target_FMLFO2freq_number_set(v);
    }
    
    void p_60_perform(SampleValue * out1, Index n) {
        // subpatcher: sin
        SampleArray<1> outs = {out1};
    
        this->p_60->process(nullptr, 0, outs, 1, n);
    }
    
    void p_61_perform(SampleValue * out1, Index n) {
        // subpatcher: phasor
        SampleArray<1> outs = {out1};
    
        this->p_61->process(nullptr, 0, outs, 1, n);
    }
    
    void p_62_perform(SampleValue * out1, Index n) {
        // subpatcher: triangle
        SampleArray<1> outs = {out1};
    
        this->p_62->process(nullptr, 0, outs, 1, n);
    }
    
    void selector_17_perform(
        number onoff,
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            if (onoff >= 1 && onoff < 2)
                out[(Index)i] = in1[(Index)i];
            else if (onoff >= 2 && onoff < 3)
                out[(Index)i] = in2[(Index)i];
            else if (onoff >= 3 && onoff < 4)
                out[(Index)i] = in3[(Index)i];
            else if (onoff >= 4 && onoff < 5)
                out[(Index)i] = in4[(Index)i];
            else
                out[(Index)i] = 0;
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        receive_70_output_number = 0;
        selector_17_onoff = 1;
        p_60_target = 0;
        p_61_target = 0;
        p_62_target = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number receive_70_output_number;
        list receive_70_output_list;
        number selector_17_onoff;
        number p_60_target;
        number p_61_target;
        number p_62_target;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[3];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_4288* p_60;
        RNBOSubpatcher_4289* p_61;
        RNBOSubpatcher_4290* p_62;
    
};

class RNBOSubpatcher_4293 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_4293()
    {
    }
    
    ~RNBOSubpatcher_4293()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1468824490, false);
    }
    
    Index vectorsize() {
        return this->vs;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    
        this->adsr_01_perform(
            this->adsr_01_attack,
            this->adsr_01_decay,
            this->adsr_01_sustain,
            this->adsr_01_release,
            this->zeroBuffer,
            out1,
            n
        );
    
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->adsr_01_triggerBuf = resizeSignal(this->adsr_01_triggerBuf, this->maxvs, maxBlockSize);
            this->adsr_01_triggerValueBuf = resizeSignal(this->adsr_01_triggerValueBuf, this->maxvs, maxBlockSize);
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->adsr_01_dspsetup(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void processTempoEvent(MillisecondTime , Tempo ) {}
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void onSampleRateChanged(double ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1468824490:
            {
            this->adsr_01_mute_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
    
    void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
    
    void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
    
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_01_out1_bang_bang() {}
    
    void eventinlet_01_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->adsr_01_trigger_number_set(converted);
        }
    }
    
    void adsr_01_mute_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {}
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void adsr_01_trigger_number_set(number v) {
        this->adsr_01_trigger_number = v;
    
        if (v != 0)
            this->adsr_01_triggerBuf[(Index)this->sampleOffsetIntoNextAudioBuffer] = 1;
    
        for (number i = this->sampleOffsetIntoNextAudioBuffer; i < this->vectorsize(); i++) {
            this->adsr_01_triggerValueBuf[(Index)i] = v;
        }
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->adsr_01_trigger_number_set(v);
    }
    
    void adsr_01_release_set(number v) {
        this->adsr_01_release = v;
    }
    
    void receive_74_output_number_set(number v) {
        this->receive_74_output_number = v;
        this->adsr_01_release_set(v);
    }
    
    void adsr_01_sustain_set(number v) {
        this->adsr_01_sustain = v;
    }
    
    void receive_73_output_number_set(number v) {
        this->receive_73_output_number = v;
        this->adsr_01_sustain_set(v);
    }
    
    void adsr_01_decay_set(number v) {
        this->adsr_01_decay = v;
    }
    
    void receive_72_output_number_set(number v) {
        this->receive_72_output_number = v;
        this->adsr_01_decay_set(v);
    }
    
    void adsr_01_attack_set(number v) {
        this->adsr_01_attack = v;
    }
    
    void receive_71_output_number_set(number v) {
        this->receive_71_output_number = v;
        this->adsr_01_attack_set(v);
    }
    
    void adsr_01_perform(
        number attack,
        number decay,
        number sustain,
        number release,
        const SampleValue * trigger_signal,
        SampleValue * out,
        Index n
    ) {
        RNBO_UNUSED(trigger_signal);
        auto __adsr_01_trigger_number = this->adsr_01_trigger_number;
        auto __adsr_01_time = this->adsr_01_time;
        auto __adsr_01_amplitude = this->adsr_01_amplitude;
        auto __adsr_01_outval = this->adsr_01_outval;
        auto __adsr_01_startingpoint = this->adsr_01_startingpoint;
        auto __adsr_01_phase = this->adsr_01_phase;
        auto __adsr_01_legato = this->adsr_01_legato;
        auto __adsr_01_lastTriggerVal = this->adsr_01_lastTriggerVal;
        auto __adsr_01_mspersamp = this->adsr_01_mspersamp;
        bool bangMute = false;
    
        for (Index i = 0; i < n; i++) {
            number clampedattack = (attack > __adsr_01_mspersamp ? attack : __adsr_01_mspersamp);
            number clampeddecay = (decay > __adsr_01_mspersamp ? decay : __adsr_01_mspersamp);
            number clampedrelease = (release > __adsr_01_mspersamp ? release : __adsr_01_mspersamp);
            number currentTriggerVal = this->adsr_01_triggerValueBuf[(Index)i];
    
            if ((__adsr_01_lastTriggerVal == 0.0 && currentTriggerVal != 0.0) || this->adsr_01_triggerBuf[(Index)i] == 1) {
                if ((bool)(__adsr_01_legato)) {
                    if (__adsr_01_phase != 0) {
                        __adsr_01_startingpoint = __adsr_01_outval;
                    } else {
                        __adsr_01_startingpoint = 0;
                    }
                } else {
                    __adsr_01_startingpoint = 0;
                }
    
                __adsr_01_amplitude = currentTriggerVal;
                __adsr_01_phase = 1;
                __adsr_01_time = 0.0;
                bangMute = false;
            } else if (__adsr_01_lastTriggerVal != 0.0 && currentTriggerVal == 0.0) {
                if (__adsr_01_phase != 4 && __adsr_01_phase != 0) {
                    __adsr_01_phase = 4;
                    __adsr_01_amplitude = __adsr_01_outval;
                    __adsr_01_time = 0.0;
                }
            }
    
            __adsr_01_time += __adsr_01_mspersamp;
    
            if (__adsr_01_phase == 0) {
                __adsr_01_outval = 0;
            } else if (__adsr_01_phase == 1) {
                if (__adsr_01_time > clampedattack) {
                    __adsr_01_time -= clampedattack;
                    __adsr_01_phase = 2;
                    __adsr_01_outval = __adsr_01_amplitude;
                } else {
                    __adsr_01_outval = (__adsr_01_amplitude - __adsr_01_startingpoint) * __adsr_01_time / clampedattack + __adsr_01_startingpoint;
                }
            } else if (__adsr_01_phase == 2) {
                if (__adsr_01_time > clampeddecay) {
                    __adsr_01_time -= clampeddecay;
                    __adsr_01_phase = 3;
                    __adsr_01_outval = __adsr_01_amplitude * sustain;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * sustain + (__adsr_01_amplitude - __adsr_01_amplitude * sustain) * (1. - __adsr_01_time / clampeddecay);
                }
            } else if (__adsr_01_phase == 3) {
                __adsr_01_outval = __adsr_01_amplitude * sustain;
            } else if (__adsr_01_phase == 4) {
                if (__adsr_01_time > clampedrelease) {
                    __adsr_01_time = 0;
                    __adsr_01_phase = 0;
                    __adsr_01_outval = 0;
                    __adsr_01_amplitude = 0;
                    bangMute = true;
                } else {
                    __adsr_01_outval = __adsr_01_amplitude * (1.0 - __adsr_01_time / clampedrelease);
                }
            }
    
            out[(Index)i] = __adsr_01_outval;
            this->adsr_01_triggerBuf[(Index)i] = 0;
            this->adsr_01_triggerValueBuf[(Index)i] = __adsr_01_trigger_number;
            __adsr_01_lastTriggerVal = currentTriggerVal;
        }
    
        if ((bool)(bangMute)) {
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1468824490,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                0
            );;
        }
    
        this->adsr_01_lastTriggerVal = __adsr_01_lastTriggerVal;
        this->adsr_01_phase = __adsr_01_phase;
        this->adsr_01_startingpoint = __adsr_01_startingpoint;
        this->adsr_01_outval = __adsr_01_outval;
        this->adsr_01_amplitude = __adsr_01_amplitude;
        this->adsr_01_time = __adsr_01_time;
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void adsr_01_dspsetup(bool force) {
        if ((bool)(this->adsr_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->adsr_01_mspersamp = (number)1000 / this->sr;
        this->adsr_01_setupDone = true;
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        adsr_01_trigger_number = 0;
        adsr_01_attack = 0;
        adsr_01_decay = 0;
        adsr_01_sustain = 0;
        adsr_01_release = 0;
        adsr_01_legato = 0;
        receive_71_output_number = 0;
        receive_72_output_number = 0;
        receive_73_output_number = 0;
        receive_74_output_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        adsr_01_phase = 3;
        adsr_01_mspersamp = 0;
        adsr_01_time = 0;
        adsr_01_lastTriggerVal = 0;
        adsr_01_amplitude = 0;
        adsr_01_outval = 0;
        adsr_01_startingpoint = 0;
        adsr_01_triggerBuf = nullptr;
        adsr_01_triggerValueBuf = nullptr;
        adsr_01_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number adsr_01_trigger_number;
        number adsr_01_attack;
        number adsr_01_decay;
        number adsr_01_sustain;
        number adsr_01_release;
        number adsr_01_legato;
        number receive_71_output_number;
        list receive_71_output_list;
        number receive_72_output_number;
        list receive_72_output_list;
        number receive_73_output_number;
        list receive_73_output_list;
        number receive_74_output_number;
        list receive_74_output_list;
        MillisecondTime _currentTime;
        SampleIndex audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int adsr_01_phase;
        number adsr_01_mspersamp;
        number adsr_01_time;
        number adsr_01_lastTriggerVal;
        number adsr_01_amplitude;
        number adsr_01_outval;
        number adsr_01_startingpoint;
        signal adsr_01_triggerBuf;
        signal adsr_01_triggerValueBuf;
        bool adsr_01_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_63;
    delete this->p_64;
    delete this->p_65;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

number tempo() {
    return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
}

number mstobeats(number ms) {
    return ms * this->tempo() * 0.008 / (number)480;
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 0;
}

void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    this->p_64_perform(this->signals[0], n);
    this->p_63_perform(this->signals[0], this->signals[1], n);
    this->p_65_perform(this->signals[0], n);
    this->dspexpr_23_perform(this->signals[1], this->signals[0], out1, n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 2; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_63->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_64->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_65->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->RNBODefaultSinus);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 1;
}

void fillRNBODefaultSinus(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 0:
        {
        this->fillRNBODefaultSinus(ref);
        break;
        }
    }
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->p_63->processDataViewUpdate(index, time);
    this->p_64->processDataViewUpdate(index, time);
    this->p_65->processDataViewUpdate(index, time);
}

void initialize() {
    this->RNBODefaultSinus = initDataRef("RNBODefaultSinus", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->RNBODefaultSinus->setIndex(0);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_63 = new RNBOSubpatcher_4291();
    this->p_63->setEngineAndPatcher(this->getEngine(), this);
    this->p_63->initialize();
    this->p_63->setParameterOffset(this->getParameterOffset(this->p_63));
    this->p_64 = new RNBOSubpatcher_4292();
    this->p_64->setEngineAndPatcher(this->getEngine(), this);
    this->p_64->initialize();
    this->p_64->setParameterOffset(this->getParameterOffset(this->p_64));
    this->p_65 = new RNBOSubpatcher_4293();
    this->p_65->setEngineAndPatcher(this->getEngine(), this);
    this->p_65->initialize();
    this->p_65->setParameterOffset(this->getParameterOffset(this->p_65));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_01_getPresetValue(getSubState(preset, "adsr"));
    this->param_02_getPresetValue(getSubState(preset, "source"));
    this->param_03_getPresetValue(getSubState(preset, "release"));
    this->param_04_getPresetValue(getSubState(preset, "sustain"));
    this->param_05_getPresetValue(getSubState(preset, "decay"));
    this->param_06_getPresetValue(getSubState(preset, "attack"));
    this->param_07_getPresetValue(getSubState(preset, "FMsource"));
    this->param_08_getPresetValue(getSubState(preset, "FMDepth"));
    this->param_09_getPresetValue(getSubState(preset, "FM"));
    this->param_10_getPresetValue(getSubState(preset, "pitch"));
    this->param_11_getPresetValue(getSubState(preset, "FM2"));
    this->param_12_getPresetValue(getSubState(preset, "FM2source"));
    this->param_13_getPresetValue(getSubState(preset, "FM2Depth"));
    this->param_14_getPresetValue(getSubState(preset, "FMfreq"));
    this->param_15_getPresetValue(getSubState(preset, "AM2freq"));
    this->param_16_getPresetValue(getSubState(preset, "FM2freq"));
    this->param_17_getPresetValue(getSubState(preset, "AM2source"));
    this->param_18_getPresetValue(getSubState(preset, "AMsource"));
    this->param_19_getPresetValue(getSubState(preset, "AMfreq"));
    this->param_20_getPresetValue(getSubState(preset, "AM2depth"));
    this->param_21_getPresetValue(getSubState(preset, "AMdepth"));
    this->param_22_getPresetValue(getSubState(preset, "AM"));
    this->param_23_getPresetValue(getSubState(preset, "AM2"));
    this->p_63->getPreset(getSubState(getSubState(preset, "__sps"), "AM[1]"));
    this->p_64->getPreset(getSubState(getSubState(preset, "__sps"), "generator"));
    this->p_65->getPreset(getSubState(getSubState(preset, "__sps"), "env"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_01_setPresetValue(getSubState(preset, "adsr"));
    this->param_02_setPresetValue(getSubState(preset, "source"));
    this->param_03_setPresetValue(getSubState(preset, "release"));
    this->param_04_setPresetValue(getSubState(preset, "sustain"));
    this->param_05_setPresetValue(getSubState(preset, "decay"));
    this->param_06_setPresetValue(getSubState(preset, "attack"));
    this->param_07_setPresetValue(getSubState(preset, "FMsource"));
    this->param_08_setPresetValue(getSubState(preset, "FMDepth"));
    this->param_09_setPresetValue(getSubState(preset, "FM"));
    this->param_10_setPresetValue(getSubState(preset, "pitch"));
    this->param_11_setPresetValue(getSubState(preset, "FM2"));
    this->param_12_setPresetValue(getSubState(preset, "FM2source"));
    this->param_13_setPresetValue(getSubState(preset, "FM2Depth"));
    this->param_14_setPresetValue(getSubState(preset, "FMfreq"));
    this->param_15_setPresetValue(getSubState(preset, "AM2freq"));
    this->param_16_setPresetValue(getSubState(preset, "FM2freq"));
    this->param_17_setPresetValue(getSubState(preset, "AM2source"));
    this->param_18_setPresetValue(getSubState(preset, "AMsource"));
    this->param_19_setPresetValue(getSubState(preset, "AMfreq"));
    this->param_20_setPresetValue(getSubState(preset, "AM2depth"));
    this->param_21_setPresetValue(getSubState(preset, "AMdepth"));
    this->param_22_setPresetValue(getSubState(preset, "AM"));
    this->param_23_setPresetValue(getSubState(preset, "AM2"));
}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_63->processTempoEvent(time, tempo);
        this->p_64->processTempoEvent(time, tempo);
        this->p_65->processTempoEvent(time, tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_63->processTransportEvent(time, state);
        this->p_64->processTransportEvent(time, state);
        this->p_65->processTransportEvent(time, state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_63->processBeatTimeEvent(time, beattime);
        this->p_64->processBeatTimeEvent(time, beattime);
        this->p_65->processBeatTimeEvent(time, beattime);
    }
}

void onSampleRateChanged(double ) {}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_63->processTimeSignatureEvent(time, numerator, denominator);
        this->p_64->processTimeSignatureEvent(time, numerator, denominator);
        this->p_65->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_01_value_set(v);
        break;
        }
    case 1:
        {
        this->param_02_value_set(v);
        break;
        }
    case 2:
        {
        this->param_03_value_set(v);
        break;
        }
    case 3:
        {
        this->param_04_value_set(v);
        break;
        }
    case 4:
        {
        this->param_05_value_set(v);
        break;
        }
    case 5:
        {
        this->param_06_value_set(v);
        break;
        }
    case 6:
        {
        this->param_07_value_set(v);
        break;
        }
    case 7:
        {
        this->param_08_value_set(v);
        break;
        }
    case 8:
        {
        this->param_09_value_set(v);
        break;
        }
    case 9:
        {
        this->param_10_value_set(v);
        break;
        }
    case 10:
        {
        this->param_11_value_set(v);
        break;
        }
    case 11:
        {
        this->param_12_value_set(v);
        break;
        }
    case 12:
        {
        this->param_13_value_set(v);
        break;
        }
    case 13:
        {
        this->param_14_value_set(v);
        break;
        }
    case 14:
        {
        this->param_15_value_set(v);
        break;
        }
    case 15:
        {
        this->param_16_value_set(v);
        break;
        }
    case 16:
        {
        this->param_17_value_set(v);
        break;
        }
    case 17:
        {
        this->param_18_value_set(v);
        break;
        }
    case 18:
        {
        this->param_19_value_set(v);
        break;
        }
    case 19:
        {
        this->param_20_value_set(v);
        break;
        }
    case 20:
        {
        this->param_21_value_set(v);
        break;
        }
    case 21:
        {
        this->param_22_value_set(v);
        break;
        }
    case 22:
        {
        this->param_23_value_set(v);
        break;
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            this->p_63->setParameterValue(index, v, time);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            this->p_64->setParameterValue(index, v, time);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            this->p_65->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_01_value;
        }
    case 1:
        {
        return this->param_02_value;
        }
    case 2:
        {
        return this->param_03_value;
        }
    case 3:
        {
        return this->param_04_value;
        }
    case 4:
        {
        return this->param_05_value;
        }
    case 5:
        {
        return this->param_06_value;
        }
    case 6:
        {
        return this->param_07_value;
        }
    case 7:
        {
        return this->param_08_value;
        }
    case 8:
        {
        return this->param_09_value;
        }
    case 9:
        {
        return this->param_10_value;
        }
    case 10:
        {
        return this->param_11_value;
        }
    case 11:
        {
        return this->param_12_value;
        }
    case 12:
        {
        return this->param_13_value;
        }
    case 13:
        {
        return this->param_14_value;
        }
    case 14:
        {
        return this->param_15_value;
        }
    case 15:
        {
        return this->param_16_value;
        }
    case 16:
        {
        return this->param_17_value;
        }
    case 17:
        {
        return this->param_18_value;
        }
    case 18:
        {
        return this->param_19_value;
        }
    case 19:
        {
        return this->param_20_value;
        }
    case 20:
        {
        return this->param_21_value;
        }
    case 21:
        {
        return this->param_22_value;
        }
    case 22:
        {
        return this->param_23_value;
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            return this->p_63->getParameterValue(index);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            return this->p_64->getParameterValue(index);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            return this->p_65->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 23 + this->p_63->getNumParameters() + this->p_64->getNumParameters() + this->p_65->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "adsr";
        }
    case 1:
        {
        return "source";
        }
    case 2:
        {
        return "release";
        }
    case 3:
        {
        return "sustain";
        }
    case 4:
        {
        return "decay";
        }
    case 5:
        {
        return "attack";
        }
    case 6:
        {
        return "FMsource";
        }
    case 7:
        {
        return "FMDepth";
        }
    case 8:
        {
        return "FM";
        }
    case 9:
        {
        return "pitch";
        }
    case 10:
        {
        return "FM2";
        }
    case 11:
        {
        return "FM2source";
        }
    case 12:
        {
        return "FM2Depth";
        }
    case 13:
        {
        return "FMfreq";
        }
    case 14:
        {
        return "AM2freq";
        }
    case 15:
        {
        return "FM2freq";
        }
    case 16:
        {
        return "AM2source";
        }
    case 17:
        {
        return "AMsource";
        }
    case 18:
        {
        return "AMfreq";
        }
    case 19:
        {
        return "AM2depth";
        }
    case 20:
        {
        return "AMdepth";
        }
    case 21:
        {
        return "AM";
        }
    case 22:
        {
        return "AM2";
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            return this->p_63->getParameterName(index);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            return this->p_64->getParameterName(index);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            return this->p_65->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "adsr";
        }
    case 1:
        {
        return "source";
        }
    case 2:
        {
        return "release";
        }
    case 3:
        {
        return "sustain";
        }
    case 4:
        {
        return "decay";
        }
    case 5:
        {
        return "attack";
        }
    case 6:
        {
        return "FMsource";
        }
    case 7:
        {
        return "FMDepth";
        }
    case 8:
        {
        return "FM";
        }
    case 9:
        {
        return "pitch";
        }
    case 10:
        {
        return "FM2";
        }
    case 11:
        {
        return "FM2source";
        }
    case 12:
        {
        return "FM2Depth";
        }
    case 13:
        {
        return "FMfreq";
        }
    case 14:
        {
        return "AM2freq";
        }
    case 15:
        {
        return "FM2freq";
        }
    case 16:
        {
        return "AM2source";
        }
    case 17:
        {
        return "AMsource";
        }
    case 18:
        {
        return "AMfreq";
        }
    case 19:
        {
        return "AM2depth";
        }
    case 20:
        {
        return "AMdepth";
        }
    case 21:
        {
        return "AM";
        }
    case 22:
        {
        return "AM2";
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            return this->p_63->getParameterId(index);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            return this->p_64->getParameterId(index);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            return this->p_65->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 2000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 2000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 2000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 6:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 7:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 10;
            info->max = 500;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 8:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 9:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 2093;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 10:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 11:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 12:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 10;
            info->max = 500;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 13:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 20;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 14:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 20;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 15:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 20;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 16:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 17:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 4;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 18:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 20;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 19:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 2;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 20:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 1;
            info->max = 2;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 21:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 22:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 23;

            if (index < this->p_63->getNumParameters())
                this->p_63->getParameterInfo(index, info);

            index -= this->p_63->getNumParameters();

            if (index < this->p_64->getNumParameters())
                this->p_64->getParameterInfo(index, info);

            index -= this->p_64->getNumParameters();

            if (index < this->p_65->getNumParameters())
                this->p_65->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_63)
        return 23;

    if (subpatcher == this->p_64)
        return 23 + this->p_63->getNumParameters();

    if (subpatcher == this->p_65)
        return 23 + this->p_63->getNumParameters() + this->p_64->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
    case 3:
    case 8:
    case 10:
    case 21:
    case 22:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    case 2:
    case 4:
    case 5:
        {
        {
            value = (value < 0 ? 0 : (value > 2000 ? 2000 : value));
            ParameterValue normalizedValue = (value - 0) / (2000 - 0);
            return normalizedValue;
        }
        }
    case 19:
    case 20:
        {
        {
            value = (value < 1 ? 1 : (value > 2 ? 2 : value));
            ParameterValue normalizedValue = (value - 1) / (2 - 1);
            return normalizedValue;
        }
        }
    case 1:
    case 6:
    case 11:
    case 16:
    case 17:
        {
        {
            value = (value < 1 ? 1 : (value > 4 ? 4 : value));
            ParameterValue normalizedValue = (value - 1) / (4 - 1);
            return normalizedValue;
        }
        }
    case 13:
    case 14:
    case 15:
    case 18:
        {
        {
            value = (value < 1 ? 1 : (value > 20 ? 20 : value));
            ParameterValue normalizedValue = (value - 1) / (20 - 1);
            return normalizedValue;
        }
        }
    case 9:
        {
        {
            value = (value < 1 ? 1 : (value > 2093 ? 2093 : value));
            ParameterValue normalizedValue = (value - 1) / (2093 - 1);
            return normalizedValue;
        }
        }
    case 7:
    case 12:
        {
        {
            value = (value < 10 ? 10 : (value > 500 ? 500 : value));
            ParameterValue normalizedValue = (value - 10) / (500 - 10);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            return this->p_63->convertToNormalizedParameterValue(index, value);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            return this->p_64->convertToNormalizedParameterValue(index, value);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            return this->p_65->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 0:
    case 3:
    case 8:
    case 10:
    case 21:
    case 22:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 2:
    case 4:
    case 5:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 0 + value * (2000 - 0);
            }
        }
        }
    case 19:
    case 20:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 1 + value * (2 - 1);
            }
        }
        }
    case 1:
    case 6:
    case 11:
    case 16:
    case 17:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 1 + value * (4 - 1);
            }
        }
        }
    case 13:
    case 14:
    case 15:
    case 18:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 1 + value * (20 - 1);
            }
        }
        }
    case 9:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 1 + value * (2093 - 1);
            }
        }
        }
    case 7:
    case 12:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));

            {
                return 10 + value * (500 - 10);
            }
        }
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            return this->p_63->convertFromNormalizedParameterValue(index, value);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            return this->p_64->convertFromNormalizedParameterValue(index, value);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            return this->p_65->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_01_value_constrain(value);
        }
    case 1:
        {
        return this->param_02_value_constrain(value);
        }
    case 2:
        {
        return this->param_03_value_constrain(value);
        }
    case 3:
        {
        return this->param_04_value_constrain(value);
        }
    case 4:
        {
        return this->param_05_value_constrain(value);
        }
    case 5:
        {
        return this->param_06_value_constrain(value);
        }
    case 6:
        {
        return this->param_07_value_constrain(value);
        }
    case 7:
        {
        return this->param_08_value_constrain(value);
        }
    case 8:
        {
        return this->param_09_value_constrain(value);
        }
    case 9:
        {
        return this->param_10_value_constrain(value);
        }
    case 10:
        {
        return this->param_11_value_constrain(value);
        }
    case 11:
        {
        return this->param_12_value_constrain(value);
        }
    case 12:
        {
        return this->param_13_value_constrain(value);
        }
    case 13:
        {
        return this->param_14_value_constrain(value);
        }
    case 14:
        {
        return this->param_15_value_constrain(value);
        }
    case 15:
        {
        return this->param_16_value_constrain(value);
        }
    case 16:
        {
        return this->param_17_value_constrain(value);
        }
    case 17:
        {
        return this->param_18_value_constrain(value);
        }
    case 18:
        {
        return this->param_19_value_constrain(value);
        }
    case 19:
        {
        return this->param_20_value_constrain(value);
        }
    case 20:
        {
        return this->param_21_value_constrain(value);
        }
    case 21:
        {
        return this->param_22_value_constrain(value);
        }
    case 22:
        {
        return this->param_23_value_constrain(value);
        }
    default:
        {
        index -= 23;

        if (index < this->p_63->getNumParameters())
            return this->p_63->constrainParameterValue(index, value);

        index -= this->p_63->getNumParameters();

        if (index < this->p_64->getNumParameters())
            return this->p_64->constrainParameterValue(index, value);

        index -= this->p_64->getNumParameters();

        if (index < this->p_65->getNumParameters())
            return this->p_65->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->p_63->processNumMessage(tag, objectId, time, payload);
    this->p_64->processNumMessage(tag, objectId, time, payload);
    this->p_65->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->p_63->processListMessage(tag, objectId, time, payload);
    this->p_64->processListMessage(tag, objectId, time, payload);
    this->p_65->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    RNBO_UNUSED(objectId);
    this->updateTime(time);
    this->p_63->processBangMessage(tag, objectId, time);
    this->p_64->processBangMessage(tag, objectId, time);
    this->p_65->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {

    }

    auto subpatchResult_0 = this->p_63->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_64->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_65->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_01_value_set(number v) {
    v = this->param_01_value_constrain(v);
    this->param_01_value = v;
    this->sendParameter(0, false);

    if (this->param_01_value != this->param_01_lastValue) {
        this->getEngine()->presetTouched();
        this->param_01_lastValue = this->param_01_value;
    }

    this->p_65_in1_number_set(v);
}

void param_02_value_set(number v) {
    v = this->param_02_value_constrain(v);
    this->param_02_value = v;
    this->sendParameter(1, false);

    if (this->param_02_value != this->param_02_lastValue) {
        this->getEngine()->presetTouched();
        this->param_02_lastValue = this->param_02_value;
    }

    this->send_01_input_number_set(v);
}

void param_03_value_set(number v) {
    v = this->param_03_value_constrain(v);
    this->param_03_value = v;
    this->sendParameter(2, false);

    if (this->param_03_value != this->param_03_lastValue) {
        this->getEngine()->presetTouched();
        this->param_03_lastValue = this->param_03_value;
    }

    this->send_02_input_number_set(v);
}

void param_04_value_set(number v) {
    v = this->param_04_value_constrain(v);
    this->param_04_value = v;
    this->sendParameter(3, false);

    if (this->param_04_value != this->param_04_lastValue) {
        this->getEngine()->presetTouched();
        this->param_04_lastValue = this->param_04_value;
    }

    this->send_03_input_number_set(v);
}

void param_05_value_set(number v) {
    v = this->param_05_value_constrain(v);
    this->param_05_value = v;
    this->sendParameter(4, false);

    if (this->param_05_value != this->param_05_lastValue) {
        this->getEngine()->presetTouched();
        this->param_05_lastValue = this->param_05_value;
    }

    this->send_04_input_number_set(v);
}

void param_06_value_set(number v) {
    v = this->param_06_value_constrain(v);
    this->param_06_value = v;
    this->sendParameter(5, false);

    if (this->param_06_value != this->param_06_lastValue) {
        this->getEngine()->presetTouched();
        this->param_06_lastValue = this->param_06_value;
    }

    this->send_05_input_number_set(v);
}

void param_07_value_set(number v) {
    v = this->param_07_value_constrain(v);
    this->param_07_value = v;
    this->sendParameter(6, false);

    if (this->param_07_value != this->param_07_lastValue) {
        this->getEngine()->presetTouched();
        this->param_07_lastValue = this->param_07_value;
    }

    this->send_06_input_number_set(v);
}

void param_08_value_set(number v) {
    v = this->param_08_value_constrain(v);
    this->param_08_value = v;
    this->sendParameter(7, false);

    if (this->param_08_value != this->param_08_lastValue) {
        this->getEngine()->presetTouched();
        this->param_08_lastValue = this->param_08_value;
    }

    this->send_09_input_number_set(v);
}

void param_09_value_set(number v) {
    v = this->param_09_value_constrain(v);
    this->param_09_value = v;
    this->sendParameter(8, false);

    if (this->param_09_value != this->param_09_lastValue) {
        this->getEngine()->presetTouched();
        this->param_09_lastValue = this->param_09_value;
    }

    this->send_07_input_number_set(v);
}

void param_10_value_set(number v) {
    v = this->param_10_value_constrain(v);
    this->param_10_value = v;
    this->sendParameter(9, false);

    if (this->param_10_value != this->param_10_lastValue) {
        this->getEngine()->presetTouched();
        this->param_10_lastValue = this->param_10_value;
    }

    this->send_08_input_number_set(v);
}

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(10, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->send_10_input_number_set(v);
}

void param_12_value_set(number v) {
    v = this->param_12_value_constrain(v);
    this->param_12_value = v;
    this->sendParameter(11, false);

    if (this->param_12_value != this->param_12_lastValue) {
        this->getEngine()->presetTouched();
        this->param_12_lastValue = this->param_12_value;
    }

    this->send_11_input_number_set(v);
}

void param_13_value_set(number v) {
    v = this->param_13_value_constrain(v);
    this->param_13_value = v;
    this->sendParameter(12, false);

    if (this->param_13_value != this->param_13_lastValue) {
        this->getEngine()->presetTouched();
        this->param_13_lastValue = this->param_13_value;
    }

    this->send_12_input_number_set(v);
}

void param_14_value_set(number v) {
    v = this->param_14_value_constrain(v);
    this->param_14_value = v;
    this->sendParameter(13, false);

    if (this->param_14_value != this->param_14_lastValue) {
        this->getEngine()->presetTouched();
        this->param_14_lastValue = this->param_14_value;
    }

    this->send_13_input_number_set(v);
}

void param_15_value_set(number v) {
    v = this->param_15_value_constrain(v);
    this->param_15_value = v;
    this->sendParameter(14, false);

    if (this->param_15_value != this->param_15_lastValue) {
        this->getEngine()->presetTouched();
        this->param_15_lastValue = this->param_15_value;
    }

    this->send_14_input_number_set(v);
}

void param_16_value_set(number v) {
    v = this->param_16_value_constrain(v);
    this->param_16_value = v;
    this->sendParameter(15, false);

    if (this->param_16_value != this->param_16_lastValue) {
        this->getEngine()->presetTouched();
        this->param_16_lastValue = this->param_16_value;
    }

    this->send_15_input_number_set(v);
}

void param_17_value_set(number v) {
    v = this->param_17_value_constrain(v);
    this->param_17_value = v;
    this->sendParameter(16, false);

    if (this->param_17_value != this->param_17_lastValue) {
        this->getEngine()->presetTouched();
        this->param_17_lastValue = this->param_17_value;
    }

    this->send_16_input_number_set(v);
}

void param_18_value_set(number v) {
    v = this->param_18_value_constrain(v);
    this->param_18_value = v;
    this->sendParameter(17, false);

    if (this->param_18_value != this->param_18_lastValue) {
        this->getEngine()->presetTouched();
        this->param_18_lastValue = this->param_18_value;
    }

    this->send_17_input_number_set(v);
}

void param_19_value_set(number v) {
    v = this->param_19_value_constrain(v);
    this->param_19_value = v;
    this->sendParameter(18, false);

    if (this->param_19_value != this->param_19_lastValue) {
        this->getEngine()->presetTouched();
        this->param_19_lastValue = this->param_19_value;
    }

    this->send_18_input_number_set(v);
}

void param_20_value_set(number v) {
    v = this->param_20_value_constrain(v);
    this->param_20_value = v;
    this->sendParameter(19, false);

    if (this->param_20_value != this->param_20_lastValue) {
        this->getEngine()->presetTouched();
        this->param_20_lastValue = this->param_20_value;
    }

    this->send_19_input_number_set(v);
}

void param_21_value_set(number v) {
    v = this->param_21_value_constrain(v);
    this->param_21_value = v;
    this->sendParameter(20, false);

    if (this->param_21_value != this->param_21_lastValue) {
        this->getEngine()->presetTouched();
        this->param_21_lastValue = this->param_21_value;
    }

    this->send_22_input_number_set(v);
}

void param_22_value_set(number v) {
    v = this->param_22_value_constrain(v);
    this->param_22_value = v;
    this->sendParameter(21, false);

    if (this->param_22_value != this->param_22_lastValue) {
        this->getEngine()->presetTouched();
        this->param_22_lastValue = this->param_22_value;
    }

    this->send_21_input_number_set(v);
}

void param_23_value_set(number v) {
    v = this->param_23_value_constrain(v);
    this->param_23_value = v;
    this->sendParameter(22, false);

    if (this->param_23_value != this->param_23_lastValue) {
        this->getEngine()->presetTouched();
        this->param_23_lastValue = this->param_23_value;
    }

    this->send_20_input_number_set(v);
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 1;
}

void allocateDataRefs() {
    this->p_63->allocateDataRefs();
    this->p_64->allocateDataRefs();
    this->p_65->allocateDataRefs();

    if (this->RNBODefaultSinus->hasRequestedSize()) {
        if (this->RNBODefaultSinus->wantsFill())
            this->fillRNBODefaultSinus(this->RNBODefaultSinus);

        this->getEngine()->sendDataRefUpdated(0);
    }
}

void initializeObjects() {
    this->p_63->initializeObjects();
    this->p_64->initializeObjects();
    this->p_65->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_63->startup();
    this->p_64->startup();
    this->p_65->startup();

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    {
        this->scheduleParamInit(6, 0);
    }

    {
        this->scheduleParamInit(7, 0);
    }

    {
        this->scheduleParamInit(8, 0);
    }

    {
        this->scheduleParamInit(9, 0);
    }

    {
        this->scheduleParamInit(10, 0);
    }

    {
        this->scheduleParamInit(11, 0);
    }

    {
        this->scheduleParamInit(12, 0);
    }

    {
        this->scheduleParamInit(13, 0);
    }

    {
        this->scheduleParamInit(14, 0);
    }

    {
        this->scheduleParamInit(15, 0);
    }

    {
        this->scheduleParamInit(16, 0);
    }

    {
        this->scheduleParamInit(17, 0);
    }

    {
        this->scheduleParamInit(18, 0);
    }

    {
        this->scheduleParamInit(19, 0);
    }

    {
        this->scheduleParamInit(20, 0);
    }

    {
        this->scheduleParamInit(21, 0);
    }

    {
        this->scheduleParamInit(22, 0);
    }

    this->processParamInitEvents();
}

static number param_01_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_65_in1_number_set(number v) {
    this->p_65->updateTime(this->_currentTime);
    this->p_65->eventinlet_01_out1_number_set(v);
}

static number param_02_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 1 ? 1 : v));
    return v;
}

void p_64_target_source_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->receive_70_output_number_set(v);
}

void send_01_input_number_set(number v) {
    this->send_01_input_number = v;
    this->p_64_target_source_number_set(v);
}

static number param_03_value_constrain(number v) {
    v = (v > 2000 ? 2000 : (v < 0 ? 0 : v));
    return v;
}

void p_65_target_release_number_set(number v) {
    this->p_65->updateTime(this->_currentTime);
    this->p_65->receive_74_output_number_set(v);
}

void send_02_input_number_set(number v) {
    this->send_02_input_number = v;
    this->p_65_target_release_number_set(v);
}

static number param_04_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_65_target_sustain_number_set(number v) {
    this->p_65->updateTime(this->_currentTime);
    this->p_65->receive_73_output_number_set(v);
}

void send_03_input_number_set(number v) {
    this->send_03_input_number = v;
    this->p_65_target_sustain_number_set(v);
}

static number param_05_value_constrain(number v) {
    v = (v > 2000 ? 2000 : (v < 0 ? 0 : v));
    return v;
}

void p_65_target_decay_number_set(number v) {
    this->p_65->updateTime(this->_currentTime);
    this->p_65->receive_72_output_number_set(v);
}

void send_04_input_number_set(number v) {
    this->send_04_input_number = v;
    this->p_65_target_decay_number_set(v);
}

static number param_06_value_constrain(number v) {
    v = (v > 2000 ? 2000 : (v < 0 ? 0 : v));
    return v;
}

void p_65_target_attack_number_set(number v) {
    this->p_65->updateTime(this->_currentTime);
    this->p_65->receive_71_output_number_set(v);
}

void send_05_input_number_set(number v) {
    this->send_05_input_number = v;
    this->p_65_target_attack_number_set(v);
}

static number param_07_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 1 ? 1 : v));
    return v;
}

void p_64_target_FMLFOsource_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FMLFOsource_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FMLFOsource_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FMLFOsource_number_set(v);
}

void send_06_input_number_set(number v) {
    this->send_06_input_number = v;
    this->p_64_target_FMLFOsource_number_set(v);
}

static number param_08_value_constrain(number v) {
    v = (v > 500 ? 500 : (v < 10 ? 10 : v));
    return v;
}

void p_64_target_FMLFODepth_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FMLFODepth_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FMLFODepth_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FMLFODepth_number_set(v);
}

void send_09_input_number_set(number v) {
    this->send_09_input_number = v;
    this->p_64_target_FMLFODepth_number_set(v);
}

static number param_09_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_64_target_FM_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FM_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FM_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FM_number_set(v);
}

void send_07_input_number_set(number v) {
    this->send_07_input_number = v;
    this->p_64_target_FM_number_set(v);
}

static number param_10_value_constrain(number v) {
    v = (v > 2093 ? 2093 : (v < 1 ? 1 : v));
    return v;
}

void p_64_target_pitch_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_pitch_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_pitch_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_pitch_number_set(v);
}

void send_08_input_number_set(number v) {
    this->send_08_input_number = v;
    this->p_64_target_pitch_number_set(v);
}

static number param_11_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_64_target_FM2_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FM2_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FM2_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FM2_number_set(v);
}

void send_10_input_number_set(number v) {
    this->send_10_input_number = v;
    this->p_64_target_FM2_number_set(v);
}

static number param_12_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 1 ? 1 : v));
    return v;
}

void p_64_target_FMLFO2source_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FMLFO2source_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FMLFO2source_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FMLFO2source_number_set(v);
}

void send_11_input_number_set(number v) {
    this->send_11_input_number = v;
    this->p_64_target_FMLFO2source_number_set(v);
}

static number param_13_value_constrain(number v) {
    v = (v > 500 ? 500 : (v < 10 ? 10 : v));
    return v;
}

void send_12_input_number_set(number v) {
    this->send_12_input_number = v;
}

static number param_14_value_constrain(number v) {
    v = (v > 20 ? 20 : (v < 1 ? 1 : v));
    return v;
}

void p_64_target_FMLFOfreq_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FMLFOfreq_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FMLFOfreq_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FMLFOfreq_number_set(v);
}

void send_13_input_number_set(number v) {
    this->send_13_input_number = v;
    this->p_64_target_FMLFOfreq_number_set(v);
}

static number param_15_value_constrain(number v) {
    v = (v > 20 ? 20 : (v < 1 ? 1 : v));
    return v;
}

void p_63_target_AM2freq_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->p_25_target_AM2freq_number_set(v);
}

void send_14_input_number_set(number v) {
    this->send_14_input_number = v;
    this->p_63_target_AM2freq_number_set(v);
}

static number param_16_value_constrain(number v) {
    v = (v > 20 ? 20 : (v < 1 ? 1 : v));
    return v;
}

void p_64_target_FMLFO2freq_number_set(number v) {
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_60_target_FMLFO2freq_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_61_target_FMLFO2freq_number_set(v);
    this->p_64->updateTime(this->_currentTime);
    this->p_64->p_62_target_FMLFO2freq_number_set(v);
}

void send_15_input_number_set(number v) {
    this->send_15_input_number = v;
    this->p_64_target_FMLFO2freq_number_set(v);
}

static number param_17_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 1 ? 1 : v));
    return v;
}

void p_63_target_AM2source_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->p_25_target_AM2source_number_set(v);
}

void send_16_input_number_set(number v) {
    this->send_16_input_number = v;
    this->p_63_target_AM2source_number_set(v);
}

static number param_18_value_constrain(number v) {
    v = (v > 4 ? 4 : (v < 1 ? 1 : v));
    return v;
}

void p_63_target_AMsource_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->p_26_target_AMsource_number_set(v);
}

void send_17_input_number_set(number v) {
    this->send_17_input_number = v;
    this->p_63_target_AMsource_number_set(v);
}

static number param_19_value_constrain(number v) {
    v = (v > 20 ? 20 : (v < 1 ? 1 : v));
    return v;
}

void p_63_target_AMLFOfreq_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->p_26_target_AMLFOfreq_number_set(v);
}

void send_18_input_number_set(number v) {
    this->send_18_input_number = v;
    this->p_63_target_AMLFOfreq_number_set(v);
}

static number param_20_value_constrain(number v) {
    v = (v > 2 ? 2 : (v < 1 ? 1 : v));
    return v;
}

void p_63_target_AM2depth_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->receive_29_output_number_set(v);
}

void send_19_input_number_set(number v) {
    this->send_19_input_number = v;
    this->p_63_target_AM2depth_number_set(v);
}

static number param_21_value_constrain(number v) {
    v = (v > 2 ? 2 : (v < 1 ? 1 : v));
    return v;
}

void p_63_target_AMdepth_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->receive_30_output_number_set(v);
}

void send_22_input_number_set(number v) {
    this->send_22_input_number = v;
    this->p_63_target_AMdepth_number_set(v);
}

static number param_22_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_63_target_AM_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->receive_27_output_number_set(v);
}

void send_21_input_number_set(number v) {
    this->send_21_input_number = v;
    this->p_63_target_AM_number_set(v);
}

static number param_23_value_constrain(number v) {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_63_target_AM2_number_set(number v) {
    this->p_63->updateTime(this->_currentTime);
    this->p_63->receive_28_output_number_set(v);
}

void send_20_input_number_set(number v) {
    this->send_20_input_number = v;
    this->p_63_target_AM2_number_set(v);
}

void p_64_perform(SampleValue * out1, Index n) {
    // subpatcher: generator
    SampleArray<1> outs = {out1};

    this->p_64->process(nullptr, 0, outs, 1, n);
}

void p_63_perform(const SampleValue * in1, SampleValue * out1, Index n) {
    // subpatcher: AM,LFO
    ConstSampleArray<1> ins = {in1};

    SampleArray<1> outs = {out1};
    this->p_63->process(ins, 1, outs, 1, n);
}

void p_65_perform(SampleValue * out1, Index n) {
    // subpatcher: env
    SampleArray<1> outs = {out1};

    this->p_65->process(nullptr, 0, outs, 1, n);
}

void dspexpr_23_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
    }
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void param_01_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_01_value;
}

void param_01_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_01_value_set(preset["value"]);
}

void param_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_02_value;
}

void param_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_02_value_set(preset["value"]);
}

void param_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_03_value;
}

void param_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_03_value_set(preset["value"]);
}

void param_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_04_value;
}

void param_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_04_value_set(preset["value"]);
}

void param_05_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_05_value;
}

void param_05_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_05_value_set(preset["value"]);
}

void param_06_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_06_value;
}

void param_06_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_06_value_set(preset["value"]);
}

void param_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_07_value;
}

void param_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_07_value_set(preset["value"]);
}

void param_08_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_08_value;
}

void param_08_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_08_value_set(preset["value"]);
}

void param_09_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_09_value;
}

void param_09_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_09_value_set(preset["value"]);
}

void param_10_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_10_value;
}

void param_10_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_10_value_set(preset["value"]);
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void param_12_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_12_value;
}

void param_12_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_12_value_set(preset["value"]);
}

void param_13_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_13_value;
}

void param_13_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_13_value_set(preset["value"]);
}

void param_14_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_14_value;
}

void param_14_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_14_value_set(preset["value"]);
}

void param_15_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_15_value;
}

void param_15_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_15_value_set(preset["value"]);
}

void param_16_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_16_value;
}

void param_16_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_16_value_set(preset["value"]);
}

void param_17_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_17_value;
}

void param_17_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_17_value_set(preset["value"]);
}

void param_18_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_18_value;
}

void param_18_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_18_value_set(preset["value"]);
}

void param_19_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_19_value;
}

void param_19_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_19_value_set(preset["value"]);
}

void param_20_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_20_value;
}

void param_20_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_20_value_set(preset["value"]);
}

void param_21_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_21_value;
}

void param_21_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_21_value_set(preset["value"]);
}

void param_22_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_22_value;
}

void param_22_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_22_value_set(preset["value"]);
}

void param_23_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_23_value;
}

void param_23_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_23_value_set(preset["value"]);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    return beatTimeBase + this->mstobeats(diff);
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample(offset) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;

            if (state == 0) {
                this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
                this->globaltransport_beatTimeChanges->push(time);
            }

            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    p_63_target = 0;
    p_64_target = 0;
    dspexpr_23_in1 = 0;
    dspexpr_23_in2 = 0;
    param_01_value = 0;
    p_65_target = 0;
    send_01_input_number = 0;
    param_02_value = 0;
    send_02_input_number = 0;
    param_03_value = 0;
    send_03_input_number = 0;
    param_04_value = 0;
    send_04_input_number = 0;
    param_05_value = 0;
    send_05_input_number = 0;
    param_06_value = 0;
    send_06_input_number = 0;
    param_07_value = 0;
    param_08_value = 0;
    param_09_value = 0;
    send_07_input_number = 0;
    send_08_input_number = 0;
    param_10_value = 0;
    send_09_input_number = 0;
    send_10_input_number = 0;
    param_11_value = 0;
    send_11_input_number = 0;
    param_12_value = 0;
    send_12_input_number = 0;
    param_13_value = 0;
    send_13_input_number = 0;
    param_14_value = 0;
    send_14_input_number = 0;
    param_15_value = 0;
    param_16_value = 0;
    send_15_input_number = 0;
    send_16_input_number = 0;
    param_17_value = 0;
    send_17_input_number = 0;
    param_18_value = 0;
    send_18_input_number = 0;
    param_19_value = 0;
    param_20_value = 0;
    send_19_input_number = 0;
    send_20_input_number = 0;
    send_21_input_number = 0;
    send_22_input_number = 0;
    param_21_value = 0;
    param_22_value = 0;
    param_23_value = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    param_01_lastValue = 0;
    param_02_lastValue = 0;
    param_03_lastValue = 0;
    param_04_lastValue = 0;
    param_05_lastValue = 0;
    param_06_lastValue = 0;
    param_07_lastValue = 0;
    param_08_lastValue = 0;
    param_09_lastValue = 0;
    param_10_lastValue = 0;
    param_11_lastValue = 0;
    param_12_lastValue = 0;
    param_13_lastValue = 0;
    param_14_lastValue = 0;
    param_15_lastValue = 0;
    param_16_lastValue = 0;
    param_17_lastValue = 0;
    param_18_lastValue = 0;
    param_19_lastValue = 0;
    param_20_lastValue = 0;
    param_21_lastValue = 0;
    param_22_lastValue = 0;
    param_23_lastValue = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number p_63_target;
    number p_64_target;
    number dspexpr_23_in1;
    number dspexpr_23_in2;
    number param_01_value;
    number p_65_target;
    number send_01_input_number;
    list send_01_input_list;
    number param_02_value;
    number send_02_input_number;
    list send_02_input_list;
    number param_03_value;
    number send_03_input_number;
    list send_03_input_list;
    number param_04_value;
    number send_04_input_number;
    list send_04_input_list;
    number param_05_value;
    number send_05_input_number;
    list send_05_input_list;
    number param_06_value;
    number send_06_input_number;
    list send_06_input_list;
    number param_07_value;
    number param_08_value;
    number param_09_value;
    number send_07_input_number;
    list send_07_input_list;
    number send_08_input_number;
    list send_08_input_list;
    number param_10_value;
    number send_09_input_number;
    list send_09_input_list;
    number send_10_input_number;
    list send_10_input_list;
    number param_11_value;
    number send_11_input_number;
    list send_11_input_list;
    number param_12_value;
    number send_12_input_number;
    list send_12_input_list;
    number param_13_value;
    number send_13_input_number;
    list send_13_input_list;
    number param_14_value;
    number send_14_input_number;
    list send_14_input_list;
    number param_15_value;
    number param_16_value;
    number send_15_input_number;
    list send_15_input_list;
    number send_16_input_number;
    list send_16_input_list;
    number param_17_value;
    number send_17_input_number;
    list send_17_input_list;
    number param_18_value;
    number send_18_input_number;
    list send_18_input_list;
    number param_19_value;
    number param_20_value;
    number send_19_input_number;
    list send_19_input_list;
    number send_20_input_number;
    list send_20_input_list;
    number send_21_input_number;
    list send_21_input_list;
    number send_22_input_number;
    list send_22_input_list;
    number param_21_value;
    number param_22_value;
    number param_23_value;
    MillisecondTime _currentTime;
    SampleIndex audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[2];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    number param_01_lastValue;
    number param_02_lastValue;
    number param_03_lastValue;
    number param_04_lastValue;
    number param_05_lastValue;
    number param_06_lastValue;
    number param_07_lastValue;
    number param_08_lastValue;
    number param_09_lastValue;
    number param_10_lastValue;
    number param_11_lastValue;
    number param_12_lastValue;
    number param_13_lastValue;
    number param_14_lastValue;
    number param_15_lastValue;
    number param_16_lastValue;
    number param_17_lastValue;
    number param_18_lastValue;
    number param_19_lastValue;
    number param_20_lastValue;
    number param_21_lastValue;
    number param_22_lastValue;
    number param_23_lastValue;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef RNBODefaultSinus;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_4291* p_63;
    RNBOSubpatcher_4292* p_64;
    RNBOSubpatcher_4293* p_65;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

